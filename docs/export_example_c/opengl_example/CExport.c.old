/* VRML97/X3D file "" converted to C with white_dune*/

#ifndef NULL
# define NULL (void *)0
#endif

struct X3dSceneGraph;

typedef void X3dNode;

struct X3dNodeStruct;

typedef void (*X3dCallback)(X3dNode *node, void *data);

void X3dTreeRenderCallback(struct X3dNodeStruct *node, void *data);
void X3dTreeDoWithDataCallback(struct X3dNodeStruct *node, void *data);
typedef int (*X3dProcessEventCallback)(X3dNode *node, const char *event, void *data);



struct X3dColorRGBA {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float* color;
    int color_length;
    void* extra_data;
};

void X3dColorRGBAInit(struct X3dColorRGBA* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->color = NULL;
    self->color_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dColorRGBARenderCallback = NULL;
X3dCallback X3dColorRGBATreeRenderCallback = NULL;
X3dCallback X3dColorRGBADoWithDataCallback = NULL;
X3dCallback X3dColorRGBATreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dColorRGBAProcessEventCallback = NULL;

int X3dColorRGBAType = 40;

void X3dColorRGBARender(X3dNode* self, void *dataptr) {
    if (X3dColorRGBARenderCallback)
        X3dColorRGBARenderCallback(self, dataptr);
}
void X3dColorRGBATreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dColorRGBA*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dColorRGBA*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dColorRGBA*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dColorRGBA*)self)->metadata, dataptr);
        X3dColorRGBARender(self, dataptr);
    }
}
void X3dColorRGBADoWithData(X3dNode* self, void *dataptr) {
    if (X3dColorRGBADoWithDataCallback)
        X3dColorRGBADoWithDataCallback(self, dataptr);
}
void X3dColorRGBATreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dColorRGBA*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dColorRGBA*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dColorRGBA*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dColorRGBA*)self)->metadata, dataptr);
        X3dColorRGBADoWithData(self, dataptr);
    }
}


struct X3dVolumeEmitter {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float speed;
    float variation;
    float mass;
    float surfaceArea;
    X3dNode* coord;
    float* direction;
    int direction_length;
    int* coordIndex;
    int coordIndex_length;
    short internal;
    void* extra_data;
};

void X3dVolumeEmitterInit(struct X3dVolumeEmitter* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->speed = 0.0f;
    self->variation = 0.0f;
    self->mass = 0.0f;
    self->surfaceArea = 0.0f;
    self->coord = NULL;
    self->direction = NULL;
    self->direction_length = 0;
    self->coordIndex = NULL;
    self->coordIndex_length = 0;
    self->internal = 0;
    self->extra_data = NULL;
}

X3dCallback X3dVolumeEmitterRenderCallback = NULL;
X3dCallback X3dVolumeEmitterTreeRenderCallback = NULL;
X3dCallback X3dVolumeEmitterDoWithDataCallback = NULL;
X3dCallback X3dVolumeEmitterTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dVolumeEmitterProcessEventCallback = NULL;

int X3dVolumeEmitterType = 323;

void X3dVolumeEmitterRender(X3dNode* self, void *dataptr) {
    if (X3dVolumeEmitterRenderCallback)
        X3dVolumeEmitterRenderCallback(self, dataptr);
}
void X3dVolumeEmitterTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dVolumeEmitter*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dVolumeEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dVolumeEmitter*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dVolumeEmitter*)self)->metadata, dataptr);
        if (((struct X3dVolumeEmitter*)self)->coord)
            X3dTreeRenderCallback(((struct X3dVolumeEmitter*)self)->coord, dataptr);
        X3dVolumeEmitterRender(self, dataptr);
    }
}
void X3dVolumeEmitterDoWithData(X3dNode* self, void *dataptr) {
    if (X3dVolumeEmitterDoWithDataCallback)
        X3dVolumeEmitterDoWithDataCallback(self, dataptr);
}
void X3dVolumeEmitterTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dVolumeEmitter*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dVolumeEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dVolumeEmitter*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dVolumeEmitter*)self)->metadata, dataptr);
        if (((struct X3dVolumeEmitter*)self)->coord)
            X3dTreeDoWithDataCallback(((struct X3dVolumeEmitter*)self)->coord, dataptr);
        X3dVolumeEmitterDoWithData(self, dataptr);
    }
}


struct X3dHAnimJoint {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    float* rotation;
    int rotation_length;
    float* translation;
    int translation_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    float* center;
    int center_length;
    float* scale;
    int scale_length;
    float* scaleOrientation;
    int scaleOrientation_length;
    X3dNode** children;
    int children_length;
    X3dNode** displacers;
    int displacers_length;
    float* limitOrientation;
    int limitOrientation_length;
    float* llimit;
    int llimit_length;
    const char* name;
    int* skinCoordIndex;
    int skinCoordIndex_length;
    float* skinCoordWeight;
    int skinCoordWeight_length;
    float* stiffness;
    int stiffness_length;
    float* ulimit;
    int ulimit_length;
    void* extra_data;
};

void X3dHAnimJointInit(struct X3dHAnimJoint* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->rotation = NULL;
    self->rotation_length = 0;
    self->translation = NULL;
    self->translation_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->center = NULL;
    self->center_length = 0;
    self->scale = NULL;
    self->scale_length = 0;
    self->scaleOrientation = NULL;
    self->scaleOrientation_length = 0;
    self->children = NULL;
    self->children_length = 0;
    self->displacers = NULL;
    self->displacers_length = 0;
    self->limitOrientation = NULL;
    self->limitOrientation_length = 0;
    self->llimit = NULL;
    self->llimit_length = 0;
    self->name = NULL;
    self->skinCoordIndex = NULL;
    self->skinCoordIndex_length = 0;
    self->skinCoordWeight = NULL;
    self->skinCoordWeight_length = 0;
    self->stiffness = NULL;
    self->stiffness_length = 0;
    self->ulimit = NULL;
    self->ulimit_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dHAnimJointRenderCallback = NULL;
X3dCallback X3dHAnimJointTreeRenderCallback = NULL;
X3dCallback X3dHAnimJointDoWithDataCallback = NULL;
X3dCallback X3dHAnimJointTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dHAnimJointProcessEventCallback = NULL;

int X3dHAnimJointType = 107;

void X3dHAnimJointRender(X3dNode* self, void *dataptr) {
    if (X3dHAnimJointRenderCallback)
        X3dHAnimJointRenderCallback(self, dataptr);
}
void X3dHAnimJointTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dHAnimJoint*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dHAnimJoint*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dHAnimJoint*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dHAnimJoint*)self)->metadata, dataptr);
        if (((struct X3dHAnimJoint*)self)->children)
            for (i = 0; i < ((struct X3dHAnimJoint*)self)->children_length; i++)
                if (((struct X3dHAnimJoint*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dHAnimJoint*)self)->children[i], dataptr);
        if (((struct X3dHAnimJoint*)self)->displacers)
            for (i = 0; i < ((struct X3dHAnimJoint*)self)->displacers_length; i++)
                if (((struct X3dHAnimJoint*)self)->displacers[i])
                    X3dTreeRenderCallback(((struct X3dHAnimJoint*)self)->displacers[i], dataptr);
        X3dHAnimJointRender(self, dataptr);
    }
}
void X3dHAnimJointDoWithData(X3dNode* self, void *dataptr) {
    if (X3dHAnimJointDoWithDataCallback)
        X3dHAnimJointDoWithDataCallback(self, dataptr);
}
void X3dHAnimJointTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dHAnimJoint*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dHAnimJoint*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dHAnimJoint*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dHAnimJoint*)self)->metadata, dataptr);
        if (((struct X3dHAnimJoint*)self)->children)
            for (i = 0; i < ((struct X3dHAnimJoint*)self)->children_length; i++)
                if (((struct X3dHAnimJoint*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimJoint*)self)->children[i], dataptr);
        if (((struct X3dHAnimJoint*)self)->displacers)
            for (i = 0; i < ((struct X3dHAnimJoint*)self)->displacers_length; i++)
                if (((struct X3dHAnimJoint*)self)->displacers[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimJoint*)self)->displacers[i], dataptr);
        X3dHAnimJointDoWithData(self, dataptr);
    }
}


struct X3dWindPhysicsModel {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float* direction;
    int direction_length;
    short enabled;
    float gustiness;
    float speed;
    float turbulence;
    void* extra_data;
};

void X3dWindPhysicsModelInit(struct X3dWindPhysicsModel* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->direction = NULL;
    self->direction_length = 0;
    self->enabled = 0;
    self->gustiness = 0.0f;
    self->speed = 0.0f;
    self->turbulence = 0.0f;
    self->extra_data = NULL;
}

X3dCallback X3dWindPhysicsModelRenderCallback = NULL;
X3dCallback X3dWindPhysicsModelTreeRenderCallback = NULL;
X3dCallback X3dWindPhysicsModelDoWithDataCallback = NULL;
X3dCallback X3dWindPhysicsModelTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dWindPhysicsModelProcessEventCallback = NULL;

int X3dWindPhysicsModelType = 328;

void X3dWindPhysicsModelRender(X3dNode* self, void *dataptr) {
    if (X3dWindPhysicsModelRenderCallback)
        X3dWindPhysicsModelRenderCallback(self, dataptr);
}
void X3dWindPhysicsModelTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dWindPhysicsModel*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dWindPhysicsModel*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dWindPhysicsModel*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dWindPhysicsModel*)self)->metadata, dataptr);
        X3dWindPhysicsModelRender(self, dataptr);
    }
}
void X3dWindPhysicsModelDoWithData(X3dNode* self, void *dataptr) {
    if (X3dWindPhysicsModelDoWithDataCallback)
        X3dWindPhysicsModelDoWithDataCallback(self, dataptr);
}
void X3dWindPhysicsModelTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dWindPhysicsModel*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dWindPhysicsModel*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dWindPhysicsModel*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dWindPhysicsModel*)self)->metadata, dataptr);
        X3dWindPhysicsModelDoWithData(self, dataptr);
    }
}


struct X3dTransform {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    float* rotation;
    int rotation_length;
    float* translation;
    int translation_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    float* center;
    int center_length;
    float* scale;
    int scale_length;
    float* scaleOrientation;
    int scaleOrientation_length;
    X3dNode** children;
    int children_length;
    void* extra_data;
    int num_route_source;
    X3dNode **route_sources;
};

void X3dTransformInit(struct X3dTransform* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->rotation = NULL;
    self->rotation_length = 0;
    self->translation = NULL;
    self->translation_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->center = NULL;
    self->center_length = 0;
    self->scale = NULL;
    self->scale_length = 0;
    self->scaleOrientation = NULL;
    self->scaleOrientation_length = 0;
    self->children = NULL;
    self->children_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dTransformRenderCallback = NULL;
X3dCallback X3dTransformTreeRenderCallback = NULL;
X3dCallback X3dTransformDoWithDataCallback = NULL;
X3dCallback X3dTransformTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dTransformProcessEventCallback = NULL;

int X3dTransformType = 289;

void X3dTransformRender(X3dNode* self, void *dataptr) {
    if (X3dTransformRenderCallback)
        X3dTransformRenderCallback(self, dataptr);
}
void X3dTransformTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTransform*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dTransform*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTransform*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dTransform*)self)->metadata, dataptr);
        if (((struct X3dTransform*)self)->children)
            for (i = 0; i < ((struct X3dTransform*)self)->children_length; i++)
                if (((struct X3dTransform*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dTransform*)self)->children[i], dataptr);
        X3dTransformRender(self, dataptr);
    }
}
void X3dTransformDoWithData(X3dNode* self, void *dataptr) {
    if (X3dTransformDoWithDataCallback)
        X3dTransformDoWithDataCallback(self, dataptr);
}
void X3dTransformTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTransform*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dTransform*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTransform*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dTransform*)self)->metadata, dataptr);
        if (((struct X3dTransform*)self)->children)
            for (i = 0; i < ((struct X3dTransform*)self)->children_length; i++)
                if (((struct X3dTransform*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dTransform*)self)->children[i], dataptr);
        X3dTransformDoWithData(self, dataptr);
    }
}


struct X3dCylinderSensor {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    short isActive;
    short isOver;
    float* rotation_changed;
    int rotation_changed_length;
    float* trackPoint_changed;
    int trackPoint_changed_length;
    X3dNode* metadata;
    short autoOffset;
    float* axisRotation;
    int axisRotation_length;
    const char* description;
    float diskAngle;
    short enabled;
    float maxAngle;
    float minAngle;
    float offset;
    void* extra_data;
};

void X3dCylinderSensorInit(struct X3dCylinderSensor* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->autoOffset = 0;
    self->axisRotation = NULL;
    self->axisRotation_length = 0;
    self->description = NULL;
    self->diskAngle = 0.0f;
    self->enabled = 0;
    self->maxAngle = 0.0f;
    self->minAngle = 0.0f;
    self->offset = 0.0f;
    self->extra_data = NULL;
}

X3dCallback X3dCylinderSensorRenderCallback = NULL;
X3dCallback X3dCylinderSensorTreeRenderCallback = NULL;
X3dCallback X3dCylinderSensorDoWithDataCallback = NULL;
X3dCallback X3dCylinderSensorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dCylinderSensorProcessEventCallback = NULL;

int X3dCylinderSensorType = 65;

void X3dCylinderSensorRender(X3dNode* self, void *dataptr) {
    if (X3dCylinderSensorRenderCallback)
        X3dCylinderSensorRenderCallback(self, dataptr);
}
void X3dCylinderSensorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCylinderSensor*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dCylinderSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCylinderSensor*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dCylinderSensor*)self)->metadata, dataptr);
        X3dCylinderSensorRender(self, dataptr);
    }
}
void X3dCylinderSensorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dCylinderSensorDoWithDataCallback)
        X3dCylinderSensorDoWithDataCallback(self, dataptr);
}
void X3dCylinderSensorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCylinderSensor*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dCylinderSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCylinderSensor*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dCylinderSensor*)self)->metadata, dataptr);
        X3dCylinderSensorDoWithData(self, dataptr);
    }
}


struct X3dCommonSurfaceShader {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    void* extra_data;
};

void X3dCommonSurfaceShaderInit(struct X3dCommonSurfaceShader* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dCommonSurfaceShaderRenderCallback = NULL;
X3dCallback X3dCommonSurfaceShaderTreeRenderCallback = NULL;
X3dCallback X3dCommonSurfaceShaderDoWithDataCallback = NULL;
X3dCallback X3dCommonSurfaceShaderTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dCommonSurfaceShaderProcessEventCallback = NULL;

int X3dCommonSurfaceShaderType = 42;

void X3dCommonSurfaceShaderRender(X3dNode* self, void *dataptr) {
    if (X3dCommonSurfaceShaderRenderCallback)
        X3dCommonSurfaceShaderRenderCallback(self, dataptr);
}
void X3dCommonSurfaceShaderTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCommonSurfaceShader*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dCommonSurfaceShader*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCommonSurfaceShader*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dCommonSurfaceShader*)self)->metadata, dataptr);
        if (((struct X3dCommonSurfaceShader*)self)->children)
            for (i = 0; i < ((struct X3dCommonSurfaceShader*)self)->children_length; i++)
                if (((struct X3dCommonSurfaceShader*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dCommonSurfaceShader*)self)->children[i], dataptr);
        X3dCommonSurfaceShaderRender(self, dataptr);
    }
}
void X3dCommonSurfaceShaderDoWithData(X3dNode* self, void *dataptr) {
    if (X3dCommonSurfaceShaderDoWithDataCallback)
        X3dCommonSurfaceShaderDoWithDataCallback(self, dataptr);
}
void X3dCommonSurfaceShaderTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCommonSurfaceShader*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dCommonSurfaceShader*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCommonSurfaceShader*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dCommonSurfaceShader*)self)->metadata, dataptr);
        if (((struct X3dCommonSurfaceShader*)self)->children)
            for (i = 0; i < ((struct X3dCommonSurfaceShader*)self)->children_length; i++)
                if (((struct X3dCommonSurfaceShader*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dCommonSurfaceShader*)self)->children[i], dataptr);
        X3dCommonSurfaceShaderDoWithData(self, dataptr);
    }
}


struct X3dPlaneSensor {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    short isOver;
    short isActive;
    float* trackPoint_changed;
    int trackPoint_changed_length;
    float* translation_changed;
    int translation_changed_length;
    X3dNode* metadata;
    short autoOffset;
    float* axisRotation;
    int axisRotation_length;
    const char* description;
    short enabled;
    float* maxPosition;
    int maxPosition_length;
    float* minPosition;
    int minPosition_length;
    float* offset;
    int offset_length;
    void* extra_data;
};

void X3dPlaneSensorInit(struct X3dPlaneSensor* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->autoOffset = 0;
    self->axisRotation = NULL;
    self->axisRotation_length = 0;
    self->description = NULL;
    self->enabled = 0;
    self->maxPosition = NULL;
    self->maxPosition_length = 0;
    self->minPosition = NULL;
    self->minPosition_length = 0;
    self->offset = NULL;
    self->offset_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dPlaneSensorRenderCallback = NULL;
X3dCallback X3dPlaneSensorTreeRenderCallback = NULL;
X3dCallback X3dPlaneSensorDoWithDataCallback = NULL;
X3dCallback X3dPlaneSensorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dPlaneSensorProcessEventCallback = NULL;

int X3dPlaneSensorType = 196;

void X3dPlaneSensorRender(X3dNode* self, void *dataptr) {
    if (X3dPlaneSensorRenderCallback)
        X3dPlaneSensorRenderCallback(self, dataptr);
}
void X3dPlaneSensorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPlaneSensor*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dPlaneSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPlaneSensor*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dPlaneSensor*)self)->metadata, dataptr);
        X3dPlaneSensorRender(self, dataptr);
    }
}
void X3dPlaneSensorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dPlaneSensorDoWithDataCallback)
        X3dPlaneSensorDoWithDataCallback(self, dataptr);
}
void X3dPlaneSensorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPlaneSensor*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dPlaneSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPlaneSensor*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dPlaneSensor*)self)->metadata, dataptr);
        X3dPlaneSensorDoWithData(self, dataptr);
    }
}


struct X3dPositionInterpolator2D {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    float set_fraction;
    float* value_changed;
    int value_changed_length;
    X3dNode* metadata;
    float* key;
    int key_length;
    float* keyValue;
    int keyValue_length;
    void* extra_data;
};

void X3dPositionInterpolator2DInit(struct X3dPositionInterpolator2D* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->key = NULL;
    self->key_length = 0;
    self->keyValue = NULL;
    self->keyValue_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dPositionInterpolator2DRenderCallback = NULL;
X3dCallback X3dPositionInterpolator2DTreeRenderCallback = NULL;
X3dCallback X3dPositionInterpolator2DDoWithDataCallback = NULL;
X3dCallback X3dPositionInterpolator2DTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dPositionInterpolator2DProcessEventCallback = NULL;

int X3dPositionInterpolator2DType = 211;

void X3dPositionInterpolator2DRender(X3dNode* self, void *dataptr) {
    if (X3dPositionInterpolator2DRenderCallback)
        X3dPositionInterpolator2DRenderCallback(self, dataptr);
}
void X3dPositionInterpolator2DTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPositionInterpolator2D*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dPositionInterpolator2D*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPositionInterpolator2D*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dPositionInterpolator2D*)self)->metadata, dataptr);
        X3dPositionInterpolator2DRender(self, dataptr);
    }
}
void X3dPositionInterpolator2DDoWithData(X3dNode* self, void *dataptr) {
    if (X3dPositionInterpolator2DDoWithDataCallback)
        X3dPositionInterpolator2DDoWithDataCallback(self, dataptr);
}
void X3dPositionInterpolator2DTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPositionInterpolator2D*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dPositionInterpolator2D*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPositionInterpolator2D*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dPositionInterpolator2D*)self)->metadata, dataptr);
        X3dPositionInterpolator2DDoWithData(self, dataptr);
    }
}


struct X3dHAnimSite {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    float* rotation;
    int rotation_length;
    float* translation;
    int translation_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    float* center;
    int center_length;
    float* scale;
    int scale_length;
    float* scaleOrientation;
    int scaleOrientation_length;
    X3dNode** children;
    int children_length;
    const char* name;
    void* extra_data;
};

void X3dHAnimSiteInit(struct X3dHAnimSite* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->rotation = NULL;
    self->rotation_length = 0;
    self->translation = NULL;
    self->translation_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->center = NULL;
    self->center_length = 0;
    self->scale = NULL;
    self->scale_length = 0;
    self->scaleOrientation = NULL;
    self->scaleOrientation_length = 0;
    self->children = NULL;
    self->children_length = 0;
    self->name = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dHAnimSiteRenderCallback = NULL;
X3dCallback X3dHAnimSiteTreeRenderCallback = NULL;
X3dCallback X3dHAnimSiteDoWithDataCallback = NULL;
X3dCallback X3dHAnimSiteTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dHAnimSiteProcessEventCallback = NULL;

int X3dHAnimSiteType = 109;

void X3dHAnimSiteRender(X3dNode* self, void *dataptr) {
    if (X3dHAnimSiteRenderCallback)
        X3dHAnimSiteRenderCallback(self, dataptr);
}
void X3dHAnimSiteTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dHAnimSite*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dHAnimSite*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dHAnimSite*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dHAnimSite*)self)->metadata, dataptr);
        if (((struct X3dHAnimSite*)self)->children)
            for (i = 0; i < ((struct X3dHAnimSite*)self)->children_length; i++)
                if (((struct X3dHAnimSite*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dHAnimSite*)self)->children[i], dataptr);
        X3dHAnimSiteRender(self, dataptr);
    }
}
void X3dHAnimSiteDoWithData(X3dNode* self, void *dataptr) {
    if (X3dHAnimSiteDoWithDataCallback)
        X3dHAnimSiteDoWithDataCallback(self, dataptr);
}
void X3dHAnimSiteTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dHAnimSite*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dHAnimSite*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dHAnimSite*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dHAnimSite*)self)->metadata, dataptr);
        if (((struct X3dHAnimSite*)self)->children)
            for (i = 0; i < ((struct X3dHAnimSite*)self)->children_length; i++)
                if (((struct X3dHAnimSite*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimSite*)self)->children[i], dataptr);
        X3dHAnimSiteDoWithData(self, dataptr);
    }
}


struct X3dImageTexture {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    const char** url;
    int url_length;
    short repeatS;
    short repeatT;
    X3dNode* textureProperties;
    X3dNode** effects;
    int effects_length;
    const char* alphaChannel;
    void* extra_data;
};

void X3dImageTextureInit(struct X3dImageTexture* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->url = NULL;
    self->url_length = 0;
    self->repeatS = 0;
    self->repeatT = 0;
    self->textureProperties = NULL;
    self->effects = NULL;
    self->effects_length = 0;
    self->alphaChannel = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dImageTextureRenderCallback = NULL;
X3dCallback X3dImageTextureTreeRenderCallback = NULL;
X3dCallback X3dImageTextureDoWithDataCallback = NULL;
X3dCallback X3dImageTextureTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dImageTextureProcessEventCallback = NULL;

int X3dImageTextureType = 112;

void X3dImageTextureRender(X3dNode* self, void *dataptr) {
    if (X3dImageTextureRenderCallback)
        X3dImageTextureRenderCallback(self, dataptr);
}
void X3dImageTextureTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dImageTexture*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dImageTexture*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dImageTexture*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dImageTexture*)self)->metadata, dataptr);
        if (((struct X3dImageTexture*)self)->textureProperties)
            X3dTreeRenderCallback(((struct X3dImageTexture*)self)->textureProperties, dataptr);
        if (((struct X3dImageTexture*)self)->effects)
            for (i = 0; i < ((struct X3dImageTexture*)self)->effects_length; i++)
                if (((struct X3dImageTexture*)self)->effects[i])
                    X3dTreeRenderCallback(((struct X3dImageTexture*)self)->effects[i], dataptr);
        X3dImageTextureRender(self, dataptr);
    }
}
void X3dImageTextureDoWithData(X3dNode* self, void *dataptr) {
    if (X3dImageTextureDoWithDataCallback)
        X3dImageTextureDoWithDataCallback(self, dataptr);
}
void X3dImageTextureTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dImageTexture*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dImageTexture*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dImageTexture*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dImageTexture*)self)->metadata, dataptr);
        if (((struct X3dImageTexture*)self)->textureProperties)
            X3dTreeDoWithDataCallback(((struct X3dImageTexture*)self)->textureProperties, dataptr);
        if (((struct X3dImageTexture*)self)->effects)
            for (i = 0; i < ((struct X3dImageTexture*)self)->effects_length; i++)
                if (((struct X3dImageTexture*)self)->effects[i])
                    X3dTreeDoWithDataCallback(((struct X3dImageTexture*)self)->effects[i], dataptr);
        X3dImageTextureDoWithData(self, dataptr);
    }
}


struct X3dScreenFontStyle {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    const char** family;
    int family_length;
    short horizontal;
    const char** justify;
    int justify_length;
    const char* language;
    short leftToRight;
    float spacing;
    const char* style;
    short topToBottom;
    float pointSize;
    void* extra_data;
};

void X3dScreenFontStyleInit(struct X3dScreenFontStyle* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->family = NULL;
    self->family_length = 0;
    self->horizontal = 0;
    self->justify = NULL;
    self->justify_length = 0;
    self->language = NULL;
    self->leftToRight = 0;
    self->spacing = 0.0f;
    self->style = NULL;
    self->topToBottom = 0;
    self->pointSize = 0.0f;
    self->extra_data = NULL;
}

X3dCallback X3dScreenFontStyleRenderCallback = NULL;
X3dCallback X3dScreenFontStyleTreeRenderCallback = NULL;
X3dCallback X3dScreenFontStyleDoWithDataCallback = NULL;
X3dCallback X3dScreenFontStyleTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dScreenFontStyleProcessEventCallback = NULL;

int X3dScreenFontStyleType = 232;

void X3dScreenFontStyleRender(X3dNode* self, void *dataptr) {
    if (X3dScreenFontStyleRenderCallback)
        X3dScreenFontStyleRenderCallback(self, dataptr);
}
void X3dScreenFontStyleTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dScreenFontStyle*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dScreenFontStyle*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dScreenFontStyle*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dScreenFontStyle*)self)->metadata, dataptr);
        X3dScreenFontStyleRender(self, dataptr);
    }
}
void X3dScreenFontStyleDoWithData(X3dNode* self, void *dataptr) {
    if (X3dScreenFontStyleDoWithDataCallback)
        X3dScreenFontStyleDoWithDataCallback(self, dataptr);
}
void X3dScreenFontStyleTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dScreenFontStyle*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dScreenFontStyle*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dScreenFontStyle*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dScreenFontStyle*)self)->metadata, dataptr);
        X3dScreenFontStyleDoWithData(self, dataptr);
    }
}


struct X3dNavigationInfo {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    short set_bind;
    double bindTime;
    short isBound;
    short transitionComplete;
    X3dNode* metadata;
    float* avatarSize;
    int avatarSize_length;
    short headlight;
    float speed;
    double transitionTime;
    const char** transitionType;
    int transitionType_length;
    const char** type;
    int type_length;
    float visibilityLimit;
    const char* blendingSort;
    void* extra_data;
};

void X3dNavigationInfoInit(struct X3dNavigationInfo* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->avatarSize = NULL;
    self->avatarSize_length = 0;
    self->headlight = 0;
    self->speed = 0.0f;
    self->transitionTime = 0;
    self->transitionType = NULL;
    self->transitionType_length = 0;
    self->type = NULL;
    self->type_length = 0;
    self->visibilityLimit = 0.0f;
    self->blendingSort = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dNavigationInfoRenderCallback = NULL;
X3dCallback X3dNavigationInfoTreeRenderCallback = NULL;
X3dCallback X3dNavigationInfoDoWithDataCallback = NULL;
X3dCallback X3dNavigationInfoTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dNavigationInfoProcessEventCallback = NULL;

int X3dNavigationInfoType = 166;

void X3dNavigationInfoRender(X3dNode* self, void *dataptr) {
    if (X3dNavigationInfoRenderCallback)
        X3dNavigationInfoRenderCallback(self, dataptr);
}
void X3dNavigationInfoTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dNavigationInfo*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dNavigationInfo*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dNavigationInfo*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dNavigationInfo*)self)->metadata, dataptr);
        X3dNavigationInfoRender(self, dataptr);
    }
}
void X3dNavigationInfoDoWithData(X3dNode* self, void *dataptr) {
    if (X3dNavigationInfoDoWithDataCallback)
        X3dNavigationInfoDoWithDataCallback(self, dataptr);
}
void X3dNavigationInfoTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dNavigationInfo*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dNavigationInfo*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dNavigationInfo*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dNavigationInfo*)self)->metadata, dataptr);
        X3dNavigationInfoDoWithData(self, dataptr);
    }
}


struct X3dRemoteSelectionGroup {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    void* extra_data;
};

void X3dRemoteSelectionGroupInit(struct X3dRemoteSelectionGroup* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dRemoteSelectionGroupRenderCallback = NULL;
X3dCallback X3dRemoteSelectionGroupTreeRenderCallback = NULL;
X3dCallback X3dRemoteSelectionGroupDoWithDataCallback = NULL;
X3dCallback X3dRemoteSelectionGroupTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dRemoteSelectionGroupProcessEventCallback = NULL;

int X3dRemoteSelectionGroupType = 224;

void X3dRemoteSelectionGroupRender(X3dNode* self, void *dataptr) {
    if (X3dRemoteSelectionGroupRenderCallback)
        X3dRemoteSelectionGroupRenderCallback(self, dataptr);
}
void X3dRemoteSelectionGroupTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dRemoteSelectionGroup*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dRemoteSelectionGroup*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dRemoteSelectionGroup*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dRemoteSelectionGroup*)self)->metadata, dataptr);
        if (((struct X3dRemoteSelectionGroup*)self)->children)
            for (i = 0; i < ((struct X3dRemoteSelectionGroup*)self)->children_length; i++)
                if (((struct X3dRemoteSelectionGroup*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dRemoteSelectionGroup*)self)->children[i], dataptr);
        X3dRemoteSelectionGroupRender(self, dataptr);
    }
}
void X3dRemoteSelectionGroupDoWithData(X3dNode* self, void *dataptr) {
    if (X3dRemoteSelectionGroupDoWithDataCallback)
        X3dRemoteSelectionGroupDoWithDataCallback(self, dataptr);
}
void X3dRemoteSelectionGroupTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dRemoteSelectionGroup*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dRemoteSelectionGroup*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dRemoteSelectionGroup*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dRemoteSelectionGroup*)self)->metadata, dataptr);
        if (((struct X3dRemoteSelectionGroup*)self)->children)
            for (i = 0; i < ((struct X3dRemoteSelectionGroup*)self)->children_length; i++)
                if (((struct X3dRemoteSelectionGroup*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dRemoteSelectionGroup*)self)->children[i], dataptr);
        X3dRemoteSelectionGroupDoWithData(self, dataptr);
    }
}


struct X3dCoordinateInterpolator {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    float set_fraction;
    float* value_changed;
    int value_changed_length;
    X3dNode* metadata;
    float* key;
    int key_length;
    float* keyValue;
    int keyValue_length;
    void* extra_data;
};

void X3dCoordinateInterpolatorInit(struct X3dCoordinateInterpolator* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->key = NULL;
    self->key_length = 0;
    self->keyValue = NULL;
    self->keyValue_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dCoordinateInterpolatorRenderCallback = NULL;
X3dCallback X3dCoordinateInterpolatorTreeRenderCallback = NULL;
X3dCallback X3dCoordinateInterpolatorDoWithDataCallback = NULL;
X3dCallback X3dCoordinateInterpolatorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dCoordinateInterpolatorProcessEventCallback = NULL;

int X3dCoordinateInterpolatorType = 57;

void X3dCoordinateInterpolatorRender(X3dNode* self, void *dataptr) {
    if (X3dCoordinateInterpolatorRenderCallback)
        X3dCoordinateInterpolatorRenderCallback(self, dataptr);
}
void X3dCoordinateInterpolatorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCoordinateInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dCoordinateInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCoordinateInterpolator*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dCoordinateInterpolator*)self)->metadata, dataptr);
        X3dCoordinateInterpolatorRender(self, dataptr);
    }
}
void X3dCoordinateInterpolatorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dCoordinateInterpolatorDoWithDataCallback)
        X3dCoordinateInterpolatorDoWithDataCallback(self, dataptr);
}
void X3dCoordinateInterpolatorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCoordinateInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dCoordinateInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCoordinateInterpolator*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dCoordinateInterpolator*)self)->metadata, dataptr);
        X3dCoordinateInterpolatorDoWithData(self, dataptr);
    }
}


struct X3dDirectionalLight {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float ambientIntensity;
    float* color;
    int color_length;
    float* direction;
    int direction_length;
    short global;
    float intensity;
    short on;
    float* projectionRectangle;
    int projectionRectangle_length;
    float* projectionLocation;
    int projectionLocation_length;
    short shadows;
    short kambiShadows;
    short kambiShadowsMain;
    float projectionNear;
    float projectionFar;
    float* up;
    int up_length;
    X3dNode* defaultShadowMap;
    X3dNode** effects;
    int effects_length;
    short shadowVolumes;
    short shadowVolumesMain;
    void* extra_data;
};

void X3dDirectionalLightInit(struct X3dDirectionalLight* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->ambientIntensity = 0.0f;
    self->color = NULL;
    self->color_length = 0;
    self->direction = NULL;
    self->direction_length = 0;
    self->global = 0;
    self->intensity = 0.0f;
    self->on = 0;
    self->projectionRectangle = NULL;
    self->projectionRectangle_length = 0;
    self->projectionLocation = NULL;
    self->projectionLocation_length = 0;
    self->shadows = 0;
    self->kambiShadows = 0;
    self->kambiShadowsMain = 0;
    self->projectionNear = 0.0f;
    self->projectionFar = 0.0f;
    self->up = NULL;
    self->up_length = 0;
    self->defaultShadowMap = NULL;
    self->effects = NULL;
    self->effects_length = 0;
    self->shadowVolumes = 0;
    self->shadowVolumesMain = 0;
    self->extra_data = NULL;
}

X3dCallback X3dDirectionalLightRenderCallback = NULL;
X3dCallback X3dDirectionalLightTreeRenderCallback = NULL;
X3dCallback X3dDirectionalLightDoWithDataCallback = NULL;
X3dCallback X3dDirectionalLightTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dDirectionalLightProcessEventCallback = NULL;

int X3dDirectionalLightType = 67;

void X3dDirectionalLightRender(X3dNode* self, void *dataptr) {
    if (X3dDirectionalLightRenderCallback)
        X3dDirectionalLightRenderCallback(self, dataptr);
}
void X3dDirectionalLightTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dDirectionalLight*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dDirectionalLight*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dDirectionalLight*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dDirectionalLight*)self)->metadata, dataptr);
        if (((struct X3dDirectionalLight*)self)->defaultShadowMap)
            X3dTreeRenderCallback(((struct X3dDirectionalLight*)self)->defaultShadowMap, dataptr);
        if (((struct X3dDirectionalLight*)self)->effects)
            for (i = 0; i < ((struct X3dDirectionalLight*)self)->effects_length; i++)
                if (((struct X3dDirectionalLight*)self)->effects[i])
                    X3dTreeRenderCallback(((struct X3dDirectionalLight*)self)->effects[i], dataptr);
        X3dDirectionalLightRender(self, dataptr);
    }
}
void X3dDirectionalLightDoWithData(X3dNode* self, void *dataptr) {
    if (X3dDirectionalLightDoWithDataCallback)
        X3dDirectionalLightDoWithDataCallback(self, dataptr);
}
void X3dDirectionalLightTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dDirectionalLight*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dDirectionalLight*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dDirectionalLight*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dDirectionalLight*)self)->metadata, dataptr);
        if (((struct X3dDirectionalLight*)self)->defaultShadowMap)
            X3dTreeDoWithDataCallback(((struct X3dDirectionalLight*)self)->defaultShadowMap, dataptr);
        if (((struct X3dDirectionalLight*)self)->effects)
            for (i = 0; i < ((struct X3dDirectionalLight*)self)->effects_length; i++)
                if (((struct X3dDirectionalLight*)self)->effects[i])
                    X3dTreeDoWithDataCallback(((struct X3dDirectionalLight*)self)->effects[i], dataptr);
        X3dDirectionalLightDoWithData(self, dataptr);
    }
}


struct X3dCollision {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    double collideTime;
    short isActive;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    short enabled;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    X3dNode* proxy;
    void* extra_data;
};

void X3dCollisionInit(struct X3dCollision* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->enabled = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->proxy = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dCollisionRenderCallback = NULL;
X3dCallback X3dCollisionTreeRenderCallback = NULL;
X3dCallback X3dCollisionDoWithDataCallback = NULL;
X3dCallback X3dCollisionTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dCollisionProcessEventCallback = NULL;

int X3dCollisionType = 31;

void X3dCollisionRender(X3dNode* self, void *dataptr) {
    if (X3dCollisionRenderCallback)
        X3dCollisionRenderCallback(self, dataptr);
}
void X3dCollisionTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCollision*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dCollision*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCollision*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dCollision*)self)->metadata, dataptr);
        if (((struct X3dCollision*)self)->children)
            for (i = 0; i < ((struct X3dCollision*)self)->children_length; i++)
                if (((struct X3dCollision*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dCollision*)self)->children[i], dataptr);
        if (((struct X3dCollision*)self)->proxy)
            X3dTreeRenderCallback(((struct X3dCollision*)self)->proxy, dataptr);
        X3dCollisionRender(self, dataptr);
    }
}
void X3dCollisionDoWithData(X3dNode* self, void *dataptr) {
    if (X3dCollisionDoWithDataCallback)
        X3dCollisionDoWithDataCallback(self, dataptr);
}
void X3dCollisionTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCollision*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dCollision*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCollision*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dCollision*)self)->metadata, dataptr);
        if (((struct X3dCollision*)self)->children)
            for (i = 0; i < ((struct X3dCollision*)self)->children_length; i++)
                if (((struct X3dCollision*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dCollision*)self)->children[i], dataptr);
        if (((struct X3dCollision*)self)->proxy)
            X3dTreeDoWithDataCallback(((struct X3dCollision*)self)->proxy, dataptr);
        X3dCollisionDoWithData(self, dataptr);
    }
}


struct X3dNurbsGroup {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    float tessellationScale;
    void* extra_data;
};

void X3dNurbsGroupInit(struct X3dNurbsGroup* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->tessellationScale = 0.0f;
    self->extra_data = NULL;
}

X3dCallback X3dNurbsGroupRenderCallback = NULL;
X3dCallback X3dNurbsGroupTreeRenderCallback = NULL;
X3dCallback X3dNurbsGroupDoWithDataCallback = NULL;
X3dCallback X3dNurbsGroupTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dNurbsGroupProcessEventCallback = NULL;

int X3dNurbsGroupType = 172;

void X3dNurbsGroupRender(X3dNode* self, void *dataptr) {
    if (X3dNurbsGroupRenderCallback)
        X3dNurbsGroupRenderCallback(self, dataptr);
}
void X3dNurbsGroupTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dNurbsGroup*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dNurbsGroup*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dNurbsGroup*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dNurbsGroup*)self)->metadata, dataptr);
        if (((struct X3dNurbsGroup*)self)->children)
            for (i = 0; i < ((struct X3dNurbsGroup*)self)->children_length; i++)
                if (((struct X3dNurbsGroup*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dNurbsGroup*)self)->children[i], dataptr);
        X3dNurbsGroupRender(self, dataptr);
    }
}
void X3dNurbsGroupDoWithData(X3dNode* self, void *dataptr) {
    if (X3dNurbsGroupDoWithDataCallback)
        X3dNurbsGroupDoWithDataCallback(self, dataptr);
}
void X3dNurbsGroupTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dNurbsGroup*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dNurbsGroup*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dNurbsGroup*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dNurbsGroup*)self)->metadata, dataptr);
        if (((struct X3dNurbsGroup*)self)->children)
            for (i = 0; i < ((struct X3dNurbsGroup*)self)->children_length; i++)
                if (((struct X3dNurbsGroup*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dNurbsGroup*)self)->children[i], dataptr);
        X3dNurbsGroupDoWithData(self, dataptr);
    }
}


struct X3dPointEmitter {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float speed;
    float variation;
    float mass;
    float surfaceArea;
    float* direction;
    int direction_length;
    float* position;
    int position_length;
    void* extra_data;
};

void X3dPointEmitterInit(struct X3dPointEmitter* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->speed = 0.0f;
    self->variation = 0.0f;
    self->mass = 0.0f;
    self->surfaceArea = 0.0f;
    self->direction = NULL;
    self->direction_length = 0;
    self->position = NULL;
    self->position_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dPointEmitterRenderCallback = NULL;
X3dCallback X3dPointEmitterTreeRenderCallback = NULL;
X3dCallback X3dPointEmitterDoWithDataCallback = NULL;
X3dCallback X3dPointEmitterTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dPointEmitterProcessEventCallback = NULL;

int X3dPointEmitterType = 197;

void X3dPointEmitterRender(X3dNode* self, void *dataptr) {
    if (X3dPointEmitterRenderCallback)
        X3dPointEmitterRenderCallback(self, dataptr);
}
void X3dPointEmitterTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPointEmitter*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dPointEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPointEmitter*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dPointEmitter*)self)->metadata, dataptr);
        X3dPointEmitterRender(self, dataptr);
    }
}
void X3dPointEmitterDoWithData(X3dNode* self, void *dataptr) {
    if (X3dPointEmitterDoWithDataCallback)
        X3dPointEmitterDoWithDataCallback(self, dataptr);
}
void X3dPointEmitterTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPointEmitter*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dPointEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPointEmitter*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dPointEmitter*)self)->metadata, dataptr);
        X3dPointEmitterDoWithData(self, dataptr);
    }
}


struct X3dProximitySensor {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    double enterTime;
    double exitTime;
    float* centerOfRotation_changed;
    int centerOfRotation_changed_length;
    short isActive;
    float* position_changed;
    int position_changed_length;
    float* orientation_changed;
    int orientation_changed_length;
    X3dNode* metadata;
    float* center;
    int center_length;
    short enabled;
    float* size;
    int size_length;
    void* extra_data;
};

void X3dProximitySensorInit(struct X3dProximitySensor* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->center = NULL;
    self->center_length = 0;
    self->enabled = 0;
    self->size = NULL;
    self->size_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dProximitySensorRenderCallback = NULL;
X3dCallback X3dProximitySensorTreeRenderCallback = NULL;
X3dCallback X3dProximitySensorDoWithDataCallback = NULL;
X3dCallback X3dProximitySensorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dProximitySensorProcessEventCallback = NULL;

int X3dProximitySensorType = 216;

void X3dProximitySensorRender(X3dNode* self, void *dataptr) {
    if (X3dProximitySensorRenderCallback)
        X3dProximitySensorRenderCallback(self, dataptr);
}
void X3dProximitySensorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dProximitySensor*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dProximitySensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dProximitySensor*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dProximitySensor*)self)->metadata, dataptr);
        X3dProximitySensorRender(self, dataptr);
    }
}
void X3dProximitySensorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dProximitySensorDoWithDataCallback)
        X3dProximitySensorDoWithDataCallback(self, dataptr);
}
void X3dProximitySensorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dProximitySensor*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dProximitySensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dProximitySensor*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dProximitySensor*)self)->metadata, dataptr);
        X3dProximitySensorDoWithData(self, dataptr);
    }
}


struct X3dHAnimHumanoid {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float* rotation;
    int rotation_length;
    float* translation;
    int translation_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    float* center;
    int center_length;
    float* scale;
    int scale_length;
    float* scaleOrientation;
    int scaleOrientation_length;
    const char** info;
    int info_length;
    X3dNode** joints;
    int joints_length;
    const char* name;
    X3dNode** segments;
    int segments_length;
    X3dNode** sites;
    int sites_length;
    X3dNode** skeleton;
    int skeleton_length;
    X3dNode** skin;
    int skin_length;
    X3dNode* skinCoord;
    X3dNode* skinNormal;
    const char* version;
    X3dNode** viewpoints;
    int viewpoints_length;
    void* extra_data;
};

void X3dHAnimHumanoidInit(struct X3dHAnimHumanoid* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->rotation = NULL;
    self->rotation_length = 0;
    self->translation = NULL;
    self->translation_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->center = NULL;
    self->center_length = 0;
    self->scale = NULL;
    self->scale_length = 0;
    self->scaleOrientation = NULL;
    self->scaleOrientation_length = 0;
    self->info = NULL;
    self->info_length = 0;
    self->joints = NULL;
    self->joints_length = 0;
    self->name = NULL;
    self->segments = NULL;
    self->segments_length = 0;
    self->sites = NULL;
    self->sites_length = 0;
    self->skeleton = NULL;
    self->skeleton_length = 0;
    self->skin = NULL;
    self->skin_length = 0;
    self->skinCoord = NULL;
    self->skinNormal = NULL;
    self->version = NULL;
    self->viewpoints = NULL;
    self->viewpoints_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dHAnimHumanoidRenderCallback = NULL;
X3dCallback X3dHAnimHumanoidTreeRenderCallback = NULL;
X3dCallback X3dHAnimHumanoidDoWithDataCallback = NULL;
X3dCallback X3dHAnimHumanoidTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dHAnimHumanoidProcessEventCallback = NULL;

int X3dHAnimHumanoidType = 106;

void X3dHAnimHumanoidRender(X3dNode* self, void *dataptr) {
    if (X3dHAnimHumanoidRenderCallback)
        X3dHAnimHumanoidRenderCallback(self, dataptr);
}
void X3dHAnimHumanoidTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dHAnimHumanoid*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dHAnimHumanoid*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->metadata, dataptr);
        if (((struct X3dHAnimHumanoid*)self)->joints)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->joints_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->joints[i])
                    X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->joints[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->segments)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->segments_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->segments[i])
                    X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->segments[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->sites)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->sites_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->sites[i])
                    X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->sites[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->skeleton)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->skeleton_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->skeleton[i])
                    X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->skeleton[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->skin)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->skin_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->skin[i])
                    X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->skin[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->skinCoord)
            X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->skinCoord, dataptr);
        if (((struct X3dHAnimHumanoid*)self)->skinNormal)
            X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->skinNormal, dataptr);
        if (((struct X3dHAnimHumanoid*)self)->viewpoints)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->viewpoints_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->viewpoints[i])
                    X3dTreeRenderCallback(((struct X3dHAnimHumanoid*)self)->viewpoints[i], dataptr);
        X3dHAnimHumanoidRender(self, dataptr);
    }
}
void X3dHAnimHumanoidDoWithData(X3dNode* self, void *dataptr) {
    if (X3dHAnimHumanoidDoWithDataCallback)
        X3dHAnimHumanoidDoWithDataCallback(self, dataptr);
}
void X3dHAnimHumanoidTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dHAnimHumanoid*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dHAnimHumanoid*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->metadata, dataptr);
        if (((struct X3dHAnimHumanoid*)self)->joints)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->joints_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->joints[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->joints[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->segments)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->segments_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->segments[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->segments[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->sites)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->sites_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->sites[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->sites[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->skeleton)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->skeleton_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->skeleton[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->skeleton[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->skin)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->skin_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->skin[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->skin[i], dataptr);
        if (((struct X3dHAnimHumanoid*)self)->skinCoord)
            X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->skinCoord, dataptr);
        if (((struct X3dHAnimHumanoid*)self)->skinNormal)
            X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->skinNormal, dataptr);
        if (((struct X3dHAnimHumanoid*)self)->viewpoints)
            for (i = 0; i < ((struct X3dHAnimHumanoid*)self)->viewpoints_length; i++)
                if (((struct X3dHAnimHumanoid*)self)->viewpoints[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimHumanoid*)self)->viewpoints[i], dataptr);
        X3dHAnimHumanoidDoWithData(self, dataptr);
    }
}


struct X3dIndexedFaceSet {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    int* set_colorIndex;
    int set_colorIndex_length;
    int* set_coordIndex;
    int set_coordIndex_length;
    int* set_normalIndex;
    int set_normalIndex_length;
    int* set_texCoordIndex;
    int set_texCoordIndex_length;
    X3dNode* metadata;
    X3dNode* color;
    X3dNode* coord;
    X3dNode* normal;
    X3dNode* texCoord;
    short ccw;
    int* colorIndex;
    int colorIndex_length;
    short colorPerVertex;
    short convex;
    int* coordIndex;
    int coordIndex_length;
    float creaseAngle;
    int* normalIndex;
    int normalIndex_length;
    short normalPerVertex;
    short solid;
    int* texCoordIndex;
    int texCoordIndex_length;
    float* radianceTransfer;
    int radianceTransfer_length;
    X3dNode** attrib;
    int attrib_length;
    X3dNode* fogCoord;
    void* extra_data;
    int glName_number;
};

    void X3dSetGlName(struct X3dIndexedFaceSet* self, int number)
{
    self->glName_number = number;
}

void X3dIndexedFaceSetInit(struct X3dIndexedFaceSet* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->color = NULL;
    self->coord = NULL;
    self->normal = NULL;
    self->texCoord = NULL;
    self->ccw = 0;
    self->colorIndex = NULL;
    self->colorIndex_length = 0;
    self->colorPerVertex = 0;
    self->convex = 0;
    self->coordIndex = NULL;
    self->coordIndex_length = 0;
    self->creaseAngle = 0.0f;
    self->normalIndex = NULL;
    self->normalIndex_length = 0;
    self->normalPerVertex = 0;
    self->solid = 0;
    self->texCoordIndex = NULL;
    self->texCoordIndex_length = 0;
    self->radianceTransfer = NULL;
    self->radianceTransfer_length = 0;
    self->attrib = NULL;
    self->attrib_length = 0;
    self->fogCoord = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dIndexedFaceSetRenderCallback = NULL;
X3dCallback X3dIndexedFaceSetTreeRenderCallback = NULL;
X3dCallback X3dIndexedFaceSetCreateNormalsCallback = NULL;
X3dCallback X3dIndexedFaceSetDoWithDataCallback = NULL;
X3dCallback X3dIndexedFaceSetTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dIndexedFaceSetProcessEventCallback = NULL;

int X3dIndexedFaceSetType = 115;

void X3dIndexedFaceSetRender(X3dNode* self, void *dataptr) {
    if (X3dIndexedFaceSetRenderCallback)
        X3dIndexedFaceSetRenderCallback(self, dataptr);
}
void X3dIndexedFaceSetTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dIndexedFaceSet*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dIndexedFaceSet*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dIndexedFaceSet*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dIndexedFaceSet*)self)->metadata, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->color)
            X3dTreeRenderCallback(((struct X3dIndexedFaceSet*)self)->color, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->coord)
            X3dTreeRenderCallback(((struct X3dIndexedFaceSet*)self)->coord, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->normal)
            X3dTreeRenderCallback(((struct X3dIndexedFaceSet*)self)->normal, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->texCoord)
            X3dTreeRenderCallback(((struct X3dIndexedFaceSet*)self)->texCoord, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->attrib)
            for (i = 0; i < ((struct X3dIndexedFaceSet*)self)->attrib_length; i++)
                if (((struct X3dIndexedFaceSet*)self)->attrib[i])
                    X3dTreeRenderCallback(((struct X3dIndexedFaceSet*)self)->attrib[i], dataptr);
        if (((struct X3dIndexedFaceSet*)self)->fogCoord)
            X3dTreeRenderCallback(((struct X3dIndexedFaceSet*)self)->fogCoord, dataptr);
        X3dIndexedFaceSetRender(self, dataptr);
    }
}
void X3dIndexedFaceSetCreateNormals(X3dNode* self, void *dataptr) {
    if (X3dIndexedFaceSetCreateNormalsCallback)
        X3dIndexedFaceSetCreateNormalsCallback(self, dataptr);
}
void X3dIndexedFaceSetDoWithData(X3dNode* self, void *dataptr) {
    if (X3dIndexedFaceSetDoWithDataCallback)
        X3dIndexedFaceSetDoWithDataCallback(self, dataptr);
}
void X3dIndexedFaceSetTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dIndexedFaceSet*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dIndexedFaceSet*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dIndexedFaceSet*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dIndexedFaceSet*)self)->metadata, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->color)
            X3dTreeDoWithDataCallback(((struct X3dIndexedFaceSet*)self)->color, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->coord)
            X3dTreeDoWithDataCallback(((struct X3dIndexedFaceSet*)self)->coord, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->normal)
            X3dTreeDoWithDataCallback(((struct X3dIndexedFaceSet*)self)->normal, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->texCoord)
            X3dTreeDoWithDataCallback(((struct X3dIndexedFaceSet*)self)->texCoord, dataptr);
        if (((struct X3dIndexedFaceSet*)self)->attrib)
            for (i = 0; i < ((struct X3dIndexedFaceSet*)self)->attrib_length; i++)
                if (((struct X3dIndexedFaceSet*)self)->attrib[i])
                    X3dTreeDoWithDataCallback(((struct X3dIndexedFaceSet*)self)->attrib[i], dataptr);
        if (((struct X3dIndexedFaceSet*)self)->fogCoord)
            X3dTreeDoWithDataCallback(((struct X3dIndexedFaceSet*)self)->fogCoord, dataptr);
        X3dIndexedFaceSetDoWithData(self, dataptr);
    }
}


struct X3dTriangleSet {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    X3dNode* color;
    X3dNode* coord;
    X3dNode* normal;
    X3dNode* texCoord;
    short ccw;
    short colorPerVertex;
    short normalPerVertex;
    short solid;
    float* radianceTransfer;
    int radianceTransfer_length;
    X3dNode** attrib;
    int attrib_length;
    X3dNode* fogCoord;
    void* extra_data;
};

void X3dTriangleSetInit(struct X3dTriangleSet* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->color = NULL;
    self->coord = NULL;
    self->normal = NULL;
    self->texCoord = NULL;
    self->ccw = 0;
    self->colorPerVertex = 0;
    self->normalPerVertex = 0;
    self->solid = 0;
    self->radianceTransfer = NULL;
    self->radianceTransfer_length = 0;
    self->attrib = NULL;
    self->attrib_length = 0;
    self->fogCoord = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dTriangleSetRenderCallback = NULL;
X3dCallback X3dTriangleSetTreeRenderCallback = NULL;
X3dCallback X3dTriangleSetDoWithDataCallback = NULL;
X3dCallback X3dTriangleSetTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dTriangleSetProcessEventCallback = NULL;

int X3dTriangleSetType = 293;

void X3dTriangleSetRender(X3dNode* self, void *dataptr) {
    if (X3dTriangleSetRenderCallback)
        X3dTriangleSetRenderCallback(self, dataptr);
}
void X3dTriangleSetTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTriangleSet*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dTriangleSet*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTriangleSet*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dTriangleSet*)self)->metadata, dataptr);
        if (((struct X3dTriangleSet*)self)->color)
            X3dTreeRenderCallback(((struct X3dTriangleSet*)self)->color, dataptr);
        if (((struct X3dTriangleSet*)self)->coord)
            X3dTreeRenderCallback(((struct X3dTriangleSet*)self)->coord, dataptr);
        if (((struct X3dTriangleSet*)self)->normal)
            X3dTreeRenderCallback(((struct X3dTriangleSet*)self)->normal, dataptr);
        if (((struct X3dTriangleSet*)self)->texCoord)
            X3dTreeRenderCallback(((struct X3dTriangleSet*)self)->texCoord, dataptr);
        if (((struct X3dTriangleSet*)self)->attrib)
            for (i = 0; i < ((struct X3dTriangleSet*)self)->attrib_length; i++)
                if (((struct X3dTriangleSet*)self)->attrib[i])
                    X3dTreeRenderCallback(((struct X3dTriangleSet*)self)->attrib[i], dataptr);
        if (((struct X3dTriangleSet*)self)->fogCoord)
            X3dTreeRenderCallback(((struct X3dTriangleSet*)self)->fogCoord, dataptr);
        X3dTriangleSetRender(self, dataptr);
    }
}
void X3dTriangleSetDoWithData(X3dNode* self, void *dataptr) {
    if (X3dTriangleSetDoWithDataCallback)
        X3dTriangleSetDoWithDataCallback(self, dataptr);
}
void X3dTriangleSetTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTriangleSet*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dTriangleSet*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTriangleSet*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dTriangleSet*)self)->metadata, dataptr);
        if (((struct X3dTriangleSet*)self)->color)
            X3dTreeDoWithDataCallback(((struct X3dTriangleSet*)self)->color, dataptr);
        if (((struct X3dTriangleSet*)self)->coord)
            X3dTreeDoWithDataCallback(((struct X3dTriangleSet*)self)->coord, dataptr);
        if (((struct X3dTriangleSet*)self)->normal)
            X3dTreeDoWithDataCallback(((struct X3dTriangleSet*)self)->normal, dataptr);
        if (((struct X3dTriangleSet*)self)->texCoord)
            X3dTreeDoWithDataCallback(((struct X3dTriangleSet*)self)->texCoord, dataptr);
        if (((struct X3dTriangleSet*)self)->attrib)
            for (i = 0; i < ((struct X3dTriangleSet*)self)->attrib_length; i++)
                if (((struct X3dTriangleSet*)self)->attrib[i])
                    X3dTreeDoWithDataCallback(((struct X3dTriangleSet*)self)->attrib[i], dataptr);
        if (((struct X3dTriangleSet*)self)->fogCoord)
            X3dTreeDoWithDataCallback(((struct X3dTriangleSet*)self)->fogCoord, dataptr);
        X3dTriangleSetDoWithData(self, dataptr);
    }
}


struct X3dFontStyle {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    const char** family;
    int family_length;
    short horizontal;
    const char** justify;
    int justify_length;
    const char* language;
    short leftToRight;
    float spacing;
    const char* style;
    short topToBottom;
    float size;
    void* extra_data;
};

void X3dFontStyleInit(struct X3dFontStyle* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->family = NULL;
    self->family_length = 0;
    self->horizontal = 0;
    self->justify = NULL;
    self->justify_length = 0;
    self->language = NULL;
    self->leftToRight = 0;
    self->spacing = 0.0f;
    self->style = NULL;
    self->topToBottom = 0;
    self->size = 0.0f;
    self->extra_data = NULL;
}

X3dCallback X3dFontStyleRenderCallback = NULL;
X3dCallback X3dFontStyleTreeRenderCallback = NULL;
X3dCallback X3dFontStyleDoWithDataCallback = NULL;
X3dCallback X3dFontStyleTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dFontStyleProcessEventCallback = NULL;

int X3dFontStyleType = 89;

void X3dFontStyleRender(X3dNode* self, void *dataptr) {
    if (X3dFontStyleRenderCallback)
        X3dFontStyleRenderCallback(self, dataptr);
}
void X3dFontStyleTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dFontStyle*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dFontStyle*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dFontStyle*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dFontStyle*)self)->metadata, dataptr);
        X3dFontStyleRender(self, dataptr);
    }
}
void X3dFontStyleDoWithData(X3dNode* self, void *dataptr) {
    if (X3dFontStyleDoWithDataCallback)
        X3dFontStyleDoWithDataCallback(self, dataptr);
}
void X3dFontStyleTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dFontStyle*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dFontStyle*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dFontStyle*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dFontStyle*)self)->metadata, dataptr);
        X3dFontStyleDoWithData(self, dataptr);
    }
}


struct X3dMaterial {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float ambientIntensity;
    float* diffuseColor;
    int diffuseColor_length;
    float* emissiveColor;
    int emissiveColor_length;
    float shininess;
    float* specularColor;
    int specularColor_length;
    float transparency;
    float mirror;
    float* reflSpecular;
    int reflSpecular_length;
    float* reflDiffuse;
    int reflDiffuse_length;
    float* transSpecular;
    int transSpecular_length;
    float* transDiffuse;
    int transDiffuse_length;
    float reflSpecularExp;
    float transSpecularExp;
    void* extra_data;
};

void X3dMaterialInit(struct X3dMaterial* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->ambientIntensity = 0.0f;
    self->diffuseColor = NULL;
    self->diffuseColor_length = 0;
    self->emissiveColor = NULL;
    self->emissiveColor_length = 0;
    self->shininess = 0.0f;
    self->specularColor = NULL;
    self->specularColor_length = 0;
    self->transparency = 0.0f;
    self->mirror = 0.0f;
    self->reflSpecular = NULL;
    self->reflSpecular_length = 0;
    self->reflDiffuse = NULL;
    self->reflDiffuse_length = 0;
    self->transSpecular = NULL;
    self->transSpecular_length = 0;
    self->transDiffuse = NULL;
    self->transDiffuse_length = 0;
    self->reflSpecularExp = 0.0f;
    self->transSpecularExp = 0.0f;
    self->extra_data = NULL;
}

X3dCallback X3dMaterialRenderCallback = NULL;
X3dCallback X3dMaterialTreeRenderCallback = NULL;
X3dCallback X3dMaterialDoWithDataCallback = NULL;
X3dCallback X3dMaterialTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dMaterialProcessEventCallback = NULL;

int X3dMaterialType = 147;

void X3dMaterialRender(X3dNode* self, void *dataptr) {
    if (X3dMaterialRenderCallback)
        X3dMaterialRenderCallback(self, dataptr);
}
void X3dMaterialTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dMaterial*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dMaterial*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dMaterial*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dMaterial*)self)->metadata, dataptr);
        X3dMaterialRender(self, dataptr);
    }
}
void X3dMaterialDoWithData(X3dNode* self, void *dataptr) {
    if (X3dMaterialDoWithDataCallback)
        X3dMaterialDoWithDataCallback(self, dataptr);
}
void X3dMaterialTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dMaterial*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dMaterial*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dMaterial*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dMaterial*)self)->metadata, dataptr);
        X3dMaterialDoWithData(self, dataptr);
    }
}


struct X3dConeEmitter {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float speed;
    float variation;
    float mass;
    float surfaceArea;
    float angle;
    float* direction;
    int direction_length;
    float* position;
    int position_length;
    void* extra_data;
};

void X3dConeEmitterInit(struct X3dConeEmitter* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->speed = 0.0f;
    self->variation = 0.0f;
    self->mass = 0.0f;
    self->surfaceArea = 0.0f;
    self->angle = 0.0f;
    self->direction = NULL;
    self->direction_length = 0;
    self->position = NULL;
    self->position_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dConeEmitterRenderCallback = NULL;
X3dCallback X3dConeEmitterTreeRenderCallback = NULL;
X3dCallback X3dConeEmitterDoWithDataCallback = NULL;
X3dCallback X3dConeEmitterTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dConeEmitterProcessEventCallback = NULL;

int X3dConeEmitterType = 48;

void X3dConeEmitterRender(X3dNode* self, void *dataptr) {
    if (X3dConeEmitterRenderCallback)
        X3dConeEmitterRenderCallback(self, dataptr);
}
void X3dConeEmitterTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dConeEmitter*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dConeEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dConeEmitter*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dConeEmitter*)self)->metadata, dataptr);
        X3dConeEmitterRender(self, dataptr);
    }
}
void X3dConeEmitterDoWithData(X3dNode* self, void *dataptr) {
    if (X3dConeEmitterDoWithDataCallback)
        X3dConeEmitterDoWithDataCallback(self, dataptr);
}
void X3dConeEmitterTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dConeEmitter*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dConeEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dConeEmitter*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dConeEmitter*)self)->metadata, dataptr);
        X3dConeEmitterDoWithData(self, dataptr);
    }
}


struct X3dOrientationInterpolator {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    float set_fraction;
    float* value_changed;
    int value_changed_length;
    X3dNode* metadata;
    float* key;
    int key_length;
    float* keyValue;
    int keyValue_length;
    void* extra_data;
};

void X3dOrientationInterpolatorInit(struct X3dOrientationInterpolator* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->key = NULL;
    self->key_length = 0;
    self->keyValue = NULL;
    self->keyValue_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dOrientationInterpolatorRenderCallback = NULL;
X3dCallback X3dOrientationInterpolatorTreeRenderCallback = NULL;
X3dCallback X3dOrientationInterpolatorDoWithDataCallback = NULL;
X3dCallback X3dOrientationInterpolatorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dOrientationInterpolatorProcessEventCallback = NULL;

int X3dOrientationInterpolatorType = 186;

void X3dOrientationInterpolatorRender(X3dNode* self, void *dataptr) {
    if (X3dOrientationInterpolatorRenderCallback)
        X3dOrientationInterpolatorRenderCallback(self, dataptr);
}
void X3dOrientationInterpolatorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dOrientationInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dOrientationInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dOrientationInterpolator*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dOrientationInterpolator*)self)->metadata, dataptr);
        X3dOrientationInterpolatorRender(self, dataptr);
    }
}
void X3dOrientationInterpolatorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dOrientationInterpolatorDoWithDataCallback)
        X3dOrientationInterpolatorDoWithDataCallback(self, dataptr);
}
void X3dOrientationInterpolatorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dOrientationInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dOrientationInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dOrientationInterpolator*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dOrientationInterpolator*)self)->metadata, dataptr);
        X3dOrientationInterpolatorDoWithData(self, dataptr);
    }
}


struct X3dTimeSensor {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    double cycleTime;
    double elapsedTime;
    float fraction_changed;
    short isActive;
    short isPaused;
    double time;
    X3dNode* metadata;
    double cycleInterval;
    short enabled;
    short loop;
    double pauseTime;
    double resumeTime;
    double startTime;
    double stopTime;
    void* extra_data;
};

void X3dTimeSensorInit(struct X3dTimeSensor* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->cycleInterval = 0;
    self->enabled = 0;
    self->loop = 0;
    self->pauseTime = 0;
    self->resumeTime = 0;
    self->startTime = 0;
    self->stopTime = 0;
    self->extra_data = NULL;
}

X3dCallback X3dTimeSensorRenderCallback = NULL;
X3dCallback X3dTimeSensorTreeRenderCallback = NULL;
X3dCallback X3dTimeSensorDoWithDataCallback = NULL;
X3dCallback X3dTimeSensorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dTimeSensorProcessEventCallback = NULL;

int X3dTimeSensorType = 284;

void X3dTimeSensorRender(X3dNode* self, void *dataptr) {
    if (X3dTimeSensorRenderCallback)
        X3dTimeSensorRenderCallback(self, dataptr);
}
void X3dTimeSensorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTimeSensor*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dTimeSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTimeSensor*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dTimeSensor*)self)->metadata, dataptr);
        X3dTimeSensorRender(self, dataptr);
    }
}
void X3dTimeSensorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dTimeSensorDoWithDataCallback)
        X3dTimeSensorDoWithDataCallback(self, dataptr);
}
void X3dTimeSensorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTimeSensor*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dTimeSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTimeSensor*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dTimeSensor*)self)->metadata, dataptr);
        X3dTimeSensorDoWithData(self, dataptr);
    }
}


struct X3dMultiPart {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    void* extra_data;
};

void X3dMultiPartInit(struct X3dMultiPart* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dMultiPartRenderCallback = NULL;
X3dCallback X3dMultiPartTreeRenderCallback = NULL;
X3dCallback X3dMultiPartDoWithDataCallback = NULL;
X3dCallback X3dMultiPartTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dMultiPartProcessEventCallback = NULL;

int X3dMultiPartType = 162;

void X3dMultiPartRender(X3dNode* self, void *dataptr) {
    if (X3dMultiPartRenderCallback)
        X3dMultiPartRenderCallback(self, dataptr);
}
void X3dMultiPartTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dMultiPart*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dMultiPart*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dMultiPart*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dMultiPart*)self)->metadata, dataptr);
        if (((struct X3dMultiPart*)self)->children)
            for (i = 0; i < ((struct X3dMultiPart*)self)->children_length; i++)
                if (((struct X3dMultiPart*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dMultiPart*)self)->children[i], dataptr);
        X3dMultiPartRender(self, dataptr);
    }
}
void X3dMultiPartDoWithData(X3dNode* self, void *dataptr) {
    if (X3dMultiPartDoWithDataCallback)
        X3dMultiPartDoWithDataCallback(self, dataptr);
}
void X3dMultiPartTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dMultiPart*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dMultiPart*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dMultiPart*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dMultiPart*)self)->metadata, dataptr);
        if (((struct X3dMultiPart*)self)->children)
            for (i = 0; i < ((struct X3dMultiPart*)self)->children_length; i++)
                if (((struct X3dMultiPart*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dMultiPart*)self)->children[i], dataptr);
        X3dMultiPartDoWithData(self, dataptr);
    }
}


struct X3dViewport {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    float* clipBoundary;
    int clipBoundary_length;
    void* extra_data;
};

void X3dViewportInit(struct X3dViewport* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->clipBoundary = NULL;
    self->clipBoundary_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dViewportRenderCallback = NULL;
X3dCallback X3dViewportTreeRenderCallback = NULL;
X3dCallback X3dViewportDoWithDataCallback = NULL;
X3dCallback X3dViewportTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dViewportProcessEventCallback = NULL;

int X3dViewportType = 318;

void X3dViewportRender(X3dNode* self, void *dataptr) {
    if (X3dViewportRenderCallback)
        X3dViewportRenderCallback(self, dataptr);
}
void X3dViewportTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dViewport*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dViewport*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dViewport*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dViewport*)self)->metadata, dataptr);
        if (((struct X3dViewport*)self)->children)
            for (i = 0; i < ((struct X3dViewport*)self)->children_length; i++)
                if (((struct X3dViewport*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dViewport*)self)->children[i], dataptr);
        X3dViewportRender(self, dataptr);
    }
}
void X3dViewportDoWithData(X3dNode* self, void *dataptr) {
    if (X3dViewportDoWithDataCallback)
        X3dViewportDoWithDataCallback(self, dataptr);
}
void X3dViewportTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dViewport*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dViewport*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dViewport*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dViewport*)self)->metadata, dataptr);
        if (((struct X3dViewport*)self)->children)
            for (i = 0; i < ((struct X3dViewport*)self)->children_length; i++)
                if (((struct X3dViewport*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dViewport*)self)->children[i], dataptr);
        X3dViewportDoWithData(self, dataptr);
    }
}


struct X3dAnchor {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    const char* description;
    const char** parameter;
    int parameter_length;
    const char** url;
    int url_length;
    void* extra_data;
};

void X3dAnchorInit(struct X3dAnchor* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->description = NULL;
    self->parameter = NULL;
    self->parameter_length = 0;
    self->url = NULL;
    self->url_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dAnchorRenderCallback = NULL;
X3dCallback X3dAnchorTreeRenderCallback = NULL;
X3dCallback X3dAnchorDoWithDataCallback = NULL;
X3dCallback X3dAnchorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dAnchorProcessEventCallback = NULL;

int X3dAnchorType = 0;

void X3dAnchorRender(X3dNode* self, void *dataptr) {
    if (X3dAnchorRenderCallback)
        X3dAnchorRenderCallback(self, dataptr);
}
void X3dAnchorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dAnchor*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dAnchor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dAnchor*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dAnchor*)self)->metadata, dataptr);
        if (((struct X3dAnchor*)self)->children)
            for (i = 0; i < ((struct X3dAnchor*)self)->children_length; i++)
                if (((struct X3dAnchor*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dAnchor*)self)->children[i], dataptr);
        X3dAnchorRender(self, dataptr);
    }
}
void X3dAnchorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dAnchorDoWithDataCallback)
        X3dAnchorDoWithDataCallback(self, dataptr);
}
void X3dAnchorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dAnchor*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dAnchor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dAnchor*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dAnchor*)self)->metadata, dataptr);
        if (((struct X3dAnchor*)self)->children)
            for (i = 0; i < ((struct X3dAnchor*)self)->children_length; i++)
                if (((struct X3dAnchor*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dAnchor*)self)->children[i], dataptr);
        X3dAnchorDoWithData(self, dataptr);
    }
}


struct X3dColor {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float* color;
    int color_length;
    void* extra_data;
};

void X3dColorInit(struct X3dColor* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->color = NULL;
    self->color_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dColorRenderCallback = NULL;
X3dCallback X3dColorTreeRenderCallback = NULL;
X3dCallback X3dColorDoWithDataCallback = NULL;
X3dCallback X3dColorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dColorProcessEventCallback = NULL;

int X3dColorType = 35;

void X3dColorRender(X3dNode* self, void *dataptr) {
    if (X3dColorRenderCallback)
        X3dColorRenderCallback(self, dataptr);
}
void X3dColorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dColor*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dColor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dColor*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dColor*)self)->metadata, dataptr);
        X3dColorRender(self, dataptr);
    }
}
void X3dColorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dColorDoWithDataCallback)
        X3dColorDoWithDataCallback(self, dataptr);
}
void X3dColorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dColor*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dColor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dColor*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dColor*)self)->metadata, dataptr);
        X3dColorDoWithData(self, dataptr);
    }
}


struct X3dShape {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    X3dNode* appearance;
    X3dNode* geometry;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    X3dNode* octreeTriangles;
    const char* shading;
    void* extra_data;
};

void X3dShapeInit(struct X3dShape* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->appearance = NULL;
    self->geometry = NULL;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->octreeTriangles = NULL;
    self->shading = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dShapeRenderCallback = NULL;
X3dCallback X3dShapeTreeRenderCallback = NULL;
X3dCallback X3dShapeDoWithDataCallback = NULL;
X3dCallback X3dShapeTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dShapeProcessEventCallback = NULL;

int X3dShapeType = 240;

void X3dShapeRender(X3dNode* self, void *dataptr) {
    if (X3dShapeRenderCallback)
        X3dShapeRenderCallback(self, dataptr);
}
void X3dShapeTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dShape*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dShape*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dShape*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dShape*)self)->metadata, dataptr);
        if (((struct X3dShape*)self)->appearance)
            X3dTreeRenderCallback(((struct X3dShape*)self)->appearance, dataptr);
        if (((struct X3dShape*)self)->geometry)
            X3dTreeRenderCallback(((struct X3dShape*)self)->geometry, dataptr);
        if (((struct X3dShape*)self)->octreeTriangles)
            X3dTreeRenderCallback(((struct X3dShape*)self)->octreeTriangles, dataptr);
        X3dShapeRender(self, dataptr);
    }
}
void X3dShapeDoWithData(X3dNode* self, void *dataptr) {
    if (X3dShapeDoWithDataCallback)
        X3dShapeDoWithDataCallback(self, dataptr);
}
void X3dShapeTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dShape*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dShape*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dShape*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dShape*)self)->metadata, dataptr);
        if (((struct X3dShape*)self)->appearance)
            X3dTreeDoWithDataCallback(((struct X3dShape*)self)->appearance, dataptr);
        if (((struct X3dShape*)self)->geometry)
            X3dTreeDoWithDataCallback(((struct X3dShape*)self)->geometry, dataptr);
        if (((struct X3dShape*)self)->octreeTriangles)
            X3dTreeDoWithDataCallback(((struct X3dShape*)self)->octreeTriangles, dataptr);
        X3dShapeDoWithData(self, dataptr);
    }
}


struct X3dNormalInterpolator {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    float set_fraction;
    float* value_changed;
    int value_changed_length;
    X3dNode* metadata;
    float* key;
    int key_length;
    float* keyValue;
    int keyValue_length;
    void* extra_data;
};

void X3dNormalInterpolatorInit(struct X3dNormalInterpolator* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->key = NULL;
    self->key_length = 0;
    self->keyValue = NULL;
    self->keyValue_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dNormalInterpolatorRenderCallback = NULL;
X3dCallback X3dNormalInterpolatorTreeRenderCallback = NULL;
X3dCallback X3dNormalInterpolatorDoWithDataCallback = NULL;
X3dCallback X3dNormalInterpolatorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dNormalInterpolatorProcessEventCallback = NULL;

int X3dNormalInterpolatorType = 168;

void X3dNormalInterpolatorRender(X3dNode* self, void *dataptr) {
    if (X3dNormalInterpolatorRenderCallback)
        X3dNormalInterpolatorRenderCallback(self, dataptr);
}
void X3dNormalInterpolatorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dNormalInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dNormalInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dNormalInterpolator*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dNormalInterpolator*)self)->metadata, dataptr);
        X3dNormalInterpolatorRender(self, dataptr);
    }
}
void X3dNormalInterpolatorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dNormalInterpolatorDoWithDataCallback)
        X3dNormalInterpolatorDoWithDataCallback(self, dataptr);
}
void X3dNormalInterpolatorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dNormalInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dNormalInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dNormalInterpolator*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dNormalInterpolator*)self)->metadata, dataptr);
        X3dNormalInterpolatorDoWithData(self, dataptr);
    }
}


struct X3dScalarInterpolator {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    float set_fraction;
    float value_changed;
    X3dNode* metadata;
    float* key;
    int key_length;
    float* keyValue;
    int keyValue_length;
    void* extra_data;
};

void X3dScalarInterpolatorInit(struct X3dScalarInterpolator* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->key = NULL;
    self->key_length = 0;
    self->keyValue = NULL;
    self->keyValue_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dScalarInterpolatorRenderCallback = NULL;
X3dCallback X3dScalarInterpolatorTreeRenderCallback = NULL;
X3dCallback X3dScalarInterpolatorDoWithDataCallback = NULL;
X3dCallback X3dScalarInterpolatorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dScalarInterpolatorProcessEventCallback = NULL;

int X3dScalarInterpolatorType = 230;

void X3dScalarInterpolatorRender(X3dNode* self, void *dataptr) {
    if (X3dScalarInterpolatorRenderCallback)
        X3dScalarInterpolatorRenderCallback(self, dataptr);
}
void X3dScalarInterpolatorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dScalarInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dScalarInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dScalarInterpolator*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dScalarInterpolator*)self)->metadata, dataptr);
        X3dScalarInterpolatorRender(self, dataptr);
    }
}
void X3dScalarInterpolatorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dScalarInterpolatorDoWithDataCallback)
        X3dScalarInterpolatorDoWithDataCallback(self, dataptr);
}
void X3dScalarInterpolatorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dScalarInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dScalarInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dScalarInterpolator*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dScalarInterpolator*)self)->metadata, dataptr);
        X3dScalarInterpolatorDoWithData(self, dataptr);
    }
}


struct X3dHAnimSegment {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    float* centerOfMass;
    int centerOfMass_length;
    X3dNode* coord;
    X3dNode** displacers;
    int displacers_length;
    float mass;
    float* momentsOfInertia;
    int momentsOfInertia_length;
    const char* name;
    void* extra_data;
};

void X3dHAnimSegmentInit(struct X3dHAnimSegment* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->centerOfMass = NULL;
    self->centerOfMass_length = 0;
    self->coord = NULL;
    self->displacers = NULL;
    self->displacers_length = 0;
    self->mass = 0.0f;
    self->momentsOfInertia = NULL;
    self->momentsOfInertia_length = 0;
    self->name = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dHAnimSegmentRenderCallback = NULL;
X3dCallback X3dHAnimSegmentTreeRenderCallback = NULL;
X3dCallback X3dHAnimSegmentDoWithDataCallback = NULL;
X3dCallback X3dHAnimSegmentTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dHAnimSegmentProcessEventCallback = NULL;

int X3dHAnimSegmentType = 108;

void X3dHAnimSegmentRender(X3dNode* self, void *dataptr) {
    if (X3dHAnimSegmentRenderCallback)
        X3dHAnimSegmentRenderCallback(self, dataptr);
}
void X3dHAnimSegmentTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dHAnimSegment*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dHAnimSegment*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dHAnimSegment*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dHAnimSegment*)self)->metadata, dataptr);
        if (((struct X3dHAnimSegment*)self)->children)
            for (i = 0; i < ((struct X3dHAnimSegment*)self)->children_length; i++)
                if (((struct X3dHAnimSegment*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dHAnimSegment*)self)->children[i], dataptr);
        if (((struct X3dHAnimSegment*)self)->coord)
            X3dTreeRenderCallback(((struct X3dHAnimSegment*)self)->coord, dataptr);
        if (((struct X3dHAnimSegment*)self)->displacers)
            for (i = 0; i < ((struct X3dHAnimSegment*)self)->displacers_length; i++)
                if (((struct X3dHAnimSegment*)self)->displacers[i])
                    X3dTreeRenderCallback(((struct X3dHAnimSegment*)self)->displacers[i], dataptr);
        X3dHAnimSegmentRender(self, dataptr);
    }
}
void X3dHAnimSegmentDoWithData(X3dNode* self, void *dataptr) {
    if (X3dHAnimSegmentDoWithDataCallback)
        X3dHAnimSegmentDoWithDataCallback(self, dataptr);
}
void X3dHAnimSegmentTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dHAnimSegment*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dHAnimSegment*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dHAnimSegment*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dHAnimSegment*)self)->metadata, dataptr);
        if (((struct X3dHAnimSegment*)self)->children)
            for (i = 0; i < ((struct X3dHAnimSegment*)self)->children_length; i++)
                if (((struct X3dHAnimSegment*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimSegment*)self)->children[i], dataptr);
        if (((struct X3dHAnimSegment*)self)->coord)
            X3dTreeDoWithDataCallback(((struct X3dHAnimSegment*)self)->coord, dataptr);
        if (((struct X3dHAnimSegment*)self)->displacers)
            for (i = 0; i < ((struct X3dHAnimSegment*)self)->displacers_length; i++)
                if (((struct X3dHAnimSegment*)self)->displacers[i])
                    X3dTreeDoWithDataCallback(((struct X3dHAnimSegment*)self)->displacers[i], dataptr);
        X3dHAnimSegmentDoWithData(self, dataptr);
    }
}


struct X3dTextureCoordinate {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float* point;
    int point_length;
    void* extra_data;
};

void X3dTextureCoordinateInit(struct X3dTextureCoordinate* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->point = NULL;
    self->point_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dTextureCoordinateRenderCallback = NULL;
X3dCallback X3dTextureCoordinateTreeRenderCallback = NULL;
X3dCallback X3dTextureCoordinateDoWithDataCallback = NULL;
X3dCallback X3dTextureCoordinateTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dTextureCoordinateProcessEventCallback = NULL;

int X3dTextureCoordinateType = 276;

void X3dTextureCoordinateRender(X3dNode* self, void *dataptr) {
    if (X3dTextureCoordinateRenderCallback)
        X3dTextureCoordinateRenderCallback(self, dataptr);
}
void X3dTextureCoordinateTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTextureCoordinate*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dTextureCoordinate*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTextureCoordinate*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dTextureCoordinate*)self)->metadata, dataptr);
        X3dTextureCoordinateRender(self, dataptr);
    }
}
void X3dTextureCoordinateDoWithData(X3dNode* self, void *dataptr) {
    if (X3dTextureCoordinateDoWithDataCallback)
        X3dTextureCoordinateDoWithDataCallback(self, dataptr);
}
void X3dTextureCoordinateTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTextureCoordinate*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dTextureCoordinate*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTextureCoordinate*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dTextureCoordinate*)self)->metadata, dataptr);
        X3dTextureCoordinateDoWithData(self, dataptr);
    }
}


struct X3dNormal {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float* vector;
    int vector_length;
    void* extra_data;
};

void X3dNormalInit(struct X3dNormal* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->vector = NULL;
    self->vector_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dNormalRenderCallback = NULL;
X3dCallback X3dNormalTreeRenderCallback = NULL;
X3dCallback X3dNormalDoWithDataCallback = NULL;
X3dCallback X3dNormalTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dNormalProcessEventCallback = NULL;

int X3dNormalType = 167;

void X3dNormalRender(X3dNode* self, void *dataptr) {
    if (X3dNormalRenderCallback)
        X3dNormalRenderCallback(self, dataptr);
}
void X3dNormalTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dNormal*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dNormal*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dNormal*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dNormal*)self)->metadata, dataptr);
        X3dNormalRender(self, dataptr);
    }
}
void X3dNormalDoWithData(X3dNode* self, void *dataptr) {
    if (X3dNormalDoWithDataCallback)
        X3dNormalDoWithDataCallback(self, dataptr);
}
void X3dNormalTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dNormal*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dNormal*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dNormal*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dNormal*)self)->metadata, dataptr);
        X3dNormalDoWithData(self, dataptr);
    }
}


struct X3dSpotLight {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float ambientIntensity;
    float* attenuation;
    int attenuation_length;
    float beamWidth;
    float* color;
    int color_length;
    float cutOffAngle;
    float* direction;
    int direction_length;
    short global;
    float intensity;
    float* location;
    int location_length;
    short on;
    float radius;
    float projectionAngle;
    short shadows;
    short kambiShadows;
    short kambiShadowsMain;
    float projectionNear;
    float projectionFar;
    float* up;
    int up_length;
    X3dNode* defaultShadowMap;
    X3dNode** effects;
    int effects_length;
    short shadowVolumes;
    short shadowVolumesMain;
    void* extra_data;
};

void X3dSpotLightInit(struct X3dSpotLight* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->ambientIntensity = 0.0f;
    self->attenuation = NULL;
    self->attenuation_length = 0;
    self->beamWidth = 0.0f;
    self->color = NULL;
    self->color_length = 0;
    self->cutOffAngle = 0.0f;
    self->direction = NULL;
    self->direction_length = 0;
    self->global = 0;
    self->intensity = 0.0f;
    self->location = NULL;
    self->location_length = 0;
    self->on = 0;
    self->radius = 0.0f;
    self->projectionAngle = 0.0f;
    self->shadows = 0;
    self->kambiShadows = 0;
    self->kambiShadowsMain = 0;
    self->projectionNear = 0.0f;
    self->projectionFar = 0.0f;
    self->up = NULL;
    self->up_length = 0;
    self->defaultShadowMap = NULL;
    self->effects = NULL;
    self->effects_length = 0;
    self->shadowVolumes = 0;
    self->shadowVolumesMain = 0;
    self->extra_data = NULL;
}

X3dCallback X3dSpotLightRenderCallback = NULL;
X3dCallback X3dSpotLightTreeRenderCallback = NULL;
X3dCallback X3dSpotLightDoWithDataCallback = NULL;
X3dCallback X3dSpotLightTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dSpotLightProcessEventCallback = NULL;

int X3dSpotLightType = 257;

void X3dSpotLightRender(X3dNode* self, void *dataptr) {
    if (X3dSpotLightRenderCallback)
        X3dSpotLightRenderCallback(self, dataptr);
}
void X3dSpotLightTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dSpotLight*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dSpotLight*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dSpotLight*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dSpotLight*)self)->metadata, dataptr);
        if (((struct X3dSpotLight*)self)->defaultShadowMap)
            X3dTreeRenderCallback(((struct X3dSpotLight*)self)->defaultShadowMap, dataptr);
        if (((struct X3dSpotLight*)self)->effects)
            for (i = 0; i < ((struct X3dSpotLight*)self)->effects_length; i++)
                if (((struct X3dSpotLight*)self)->effects[i])
                    X3dTreeRenderCallback(((struct X3dSpotLight*)self)->effects[i], dataptr);
        X3dSpotLightRender(self, dataptr);
    }
}
void X3dSpotLightDoWithData(X3dNode* self, void *dataptr) {
    if (X3dSpotLightDoWithDataCallback)
        X3dSpotLightDoWithDataCallback(self, dataptr);
}
void X3dSpotLightTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dSpotLight*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dSpotLight*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dSpotLight*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dSpotLight*)self)->metadata, dataptr);
        if (((struct X3dSpotLight*)self)->defaultShadowMap)
            X3dTreeDoWithDataCallback(((struct X3dSpotLight*)self)->defaultShadowMap, dataptr);
        if (((struct X3dSpotLight*)self)->effects)
            for (i = 0; i < ((struct X3dSpotLight*)self)->effects_length; i++)
                if (((struct X3dSpotLight*)self)->effects[i])
                    X3dTreeDoWithDataCallback(((struct X3dSpotLight*)self)->effects[i], dataptr);
        X3dSpotLightDoWithData(self, dataptr);
    }
}


struct X3dColorInterpolator {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    float set_fraction;
    float* value_changed;
    int value_changed_length;
    X3dNode* metadata;
    float* key;
    int key_length;
    float* keyValue;
    int keyValue_length;
    void* extra_data;
};

void X3dColorInterpolatorInit(struct X3dColorInterpolator* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->key = NULL;
    self->key_length = 0;
    self->keyValue = NULL;
    self->keyValue_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dColorInterpolatorRenderCallback = NULL;
X3dCallback X3dColorInterpolatorTreeRenderCallback = NULL;
X3dCallback X3dColorInterpolatorDoWithDataCallback = NULL;
X3dCallback X3dColorInterpolatorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dColorInterpolatorProcessEventCallback = NULL;

int X3dColorInterpolatorType = 38;

void X3dColorInterpolatorRender(X3dNode* self, void *dataptr) {
    if (X3dColorInterpolatorRenderCallback)
        X3dColorInterpolatorRenderCallback(self, dataptr);
}
void X3dColorInterpolatorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dColorInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dColorInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dColorInterpolator*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dColorInterpolator*)self)->metadata, dataptr);
        X3dColorInterpolatorRender(self, dataptr);
    }
}
void X3dColorInterpolatorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dColorInterpolatorDoWithDataCallback)
        X3dColorInterpolatorDoWithDataCallback(self, dataptr);
}
void X3dColorInterpolatorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dColorInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dColorInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dColorInterpolator*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dColorInterpolator*)self)->metadata, dataptr);
        X3dColorInterpolatorDoWithData(self, dataptr);
    }
}


struct X3dExplosionEmitter {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float speed;
    float variation;
    float mass;
    float surfaceArea;
    float* position;
    int position_length;
    void* extra_data;
};

void X3dExplosionEmitterInit(struct X3dExplosionEmitter* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->speed = 0.0f;
    self->variation = 0.0f;
    self->mass = 0.0f;
    self->surfaceArea = 0.0f;
    self->position = NULL;
    self->position_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dExplosionEmitterRenderCallback = NULL;
X3dCallback X3dExplosionEmitterTreeRenderCallback = NULL;
X3dCallback X3dExplosionEmitterDoWithDataCallback = NULL;
X3dCallback X3dExplosionEmitterTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dExplosionEmitterProcessEventCallback = NULL;

int X3dExplosionEmitterType = 81;

void X3dExplosionEmitterRender(X3dNode* self, void *dataptr) {
    if (X3dExplosionEmitterRenderCallback)
        X3dExplosionEmitterRenderCallback(self, dataptr);
}
void X3dExplosionEmitterTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dExplosionEmitter*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dExplosionEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dExplosionEmitter*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dExplosionEmitter*)self)->metadata, dataptr);
        X3dExplosionEmitterRender(self, dataptr);
    }
}
void X3dExplosionEmitterDoWithData(X3dNode* self, void *dataptr) {
    if (X3dExplosionEmitterDoWithDataCallback)
        X3dExplosionEmitterDoWithDataCallback(self, dataptr);
}
void X3dExplosionEmitterTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dExplosionEmitter*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dExplosionEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dExplosionEmitter*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dExplosionEmitter*)self)->metadata, dataptr);
        X3dExplosionEmitterDoWithData(self, dataptr);
    }
}


struct X3dPixelTexture {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    int* image;
    int image_length;
    short repeatS;
    short repeatT;
    X3dNode* textureProperties;
    X3dNode** effects;
    int effects_length;
    const char* alphaChannel;
    void* extra_data;
};

void X3dPixelTextureInit(struct X3dPixelTexture* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->image = NULL;
    self->image_length = 0;
    self->repeatS = 0;
    self->repeatT = 0;
    self->textureProperties = NULL;
    self->effects = NULL;
    self->effects_length = 0;
    self->alphaChannel = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dPixelTextureRenderCallback = NULL;
X3dCallback X3dPixelTextureTreeRenderCallback = NULL;
X3dCallback X3dPixelTextureDoWithDataCallback = NULL;
X3dCallback X3dPixelTextureTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dPixelTextureProcessEventCallback = NULL;

int X3dPixelTextureType = 193;

void X3dPixelTextureRender(X3dNode* self, void *dataptr) {
    if (X3dPixelTextureRenderCallback)
        X3dPixelTextureRenderCallback(self, dataptr);
}
void X3dPixelTextureTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPixelTexture*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dPixelTexture*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPixelTexture*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dPixelTexture*)self)->metadata, dataptr);
        if (((struct X3dPixelTexture*)self)->textureProperties)
            X3dTreeRenderCallback(((struct X3dPixelTexture*)self)->textureProperties, dataptr);
        if (((struct X3dPixelTexture*)self)->effects)
            for (i = 0; i < ((struct X3dPixelTexture*)self)->effects_length; i++)
                if (((struct X3dPixelTexture*)self)->effects[i])
                    X3dTreeRenderCallback(((struct X3dPixelTexture*)self)->effects[i], dataptr);
        X3dPixelTextureRender(self, dataptr);
    }
}
void X3dPixelTextureDoWithData(X3dNode* self, void *dataptr) {
    if (X3dPixelTextureDoWithDataCallback)
        X3dPixelTextureDoWithDataCallback(self, dataptr);
}
void X3dPixelTextureTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPixelTexture*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dPixelTexture*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPixelTexture*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dPixelTexture*)self)->metadata, dataptr);
        if (((struct X3dPixelTexture*)self)->textureProperties)
            X3dTreeDoWithDataCallback(((struct X3dPixelTexture*)self)->textureProperties, dataptr);
        if (((struct X3dPixelTexture*)self)->effects)
            for (i = 0; i < ((struct X3dPixelTexture*)self)->effects_length; i++)
                if (((struct X3dPixelTexture*)self)->effects[i])
                    X3dTreeDoWithDataCallback(((struct X3dPixelTexture*)self)->effects[i], dataptr);
        X3dPixelTextureDoWithData(self, dataptr);
    }
}


struct X3dSwitch {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    X3dNode** children;
    int children_length;
    int whichChoice;
    void* extra_data;
};

void X3dSwitchInit(struct X3dSwitch* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->children = NULL;
    self->children_length = 0;
    self->whichChoice = 0;
    self->extra_data = NULL;
}

X3dCallback X3dSwitchRenderCallback = NULL;
X3dCallback X3dSwitchTreeRenderCallback = NULL;
X3dCallback X3dSwitchDoWithDataCallback = NULL;
X3dCallback X3dSwitchTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dSwitchProcessEventCallback = NULL;

int X3dSwitchType = 269;

void X3dSwitchRender(X3dNode* self, void *dataptr) {
    if (X3dSwitchRenderCallback)
        X3dSwitchRenderCallback(self, dataptr);
}
void X3dSwitchTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dSwitch*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dSwitch*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dSwitch*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dSwitch*)self)->metadata, dataptr);
        if (((struct X3dSwitch*)self)->children)
            for (i = 0; i < ((struct X3dSwitch*)self)->children_length; i++)
                if (((struct X3dSwitch*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dSwitch*)self)->children[i], dataptr);
        X3dSwitchRender(self, dataptr);
    }
}
void X3dSwitchDoWithData(X3dNode* self, void *dataptr) {
    if (X3dSwitchDoWithDataCallback)
        X3dSwitchDoWithDataCallback(self, dataptr);
}
void X3dSwitchTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dSwitch*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dSwitch*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dSwitch*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dSwitch*)self)->metadata, dataptr);
        if (((struct X3dSwitch*)self)->children)
            for (i = 0; i < ((struct X3dSwitch*)self)->children_length; i++)
                if (((struct X3dSwitch*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dSwitch*)self)->children[i], dataptr);
        X3dSwitchDoWithData(self, dataptr);
    }
}


struct X3dBlock {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    void* extra_data;
};

void X3dBlockInit(struct X3dBlock* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dBlockRenderCallback = NULL;
X3dCallback X3dBlockTreeRenderCallback = NULL;
X3dCallback X3dBlockDoWithDataCallback = NULL;
X3dCallback X3dBlockTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dBlockProcessEventCallback = NULL;

int X3dBlockType = 10;

void X3dBlockRender(X3dNode* self, void *dataptr) {
    if (X3dBlockRenderCallback)
        X3dBlockRenderCallback(self, dataptr);
}
void X3dBlockTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dBlock*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dBlock*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dBlock*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dBlock*)self)->metadata, dataptr);
        if (((struct X3dBlock*)self)->children)
            for (i = 0; i < ((struct X3dBlock*)self)->children_length; i++)
                if (((struct X3dBlock*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dBlock*)self)->children[i], dataptr);
        X3dBlockRender(self, dataptr);
    }
}
void X3dBlockDoWithData(X3dNode* self, void *dataptr) {
    if (X3dBlockDoWithDataCallback)
        X3dBlockDoWithDataCallback(self, dataptr);
}
void X3dBlockTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dBlock*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dBlock*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dBlock*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dBlock*)self)->metadata, dataptr);
        if (((struct X3dBlock*)self)->children)
            for (i = 0; i < ((struct X3dBlock*)self)->children_length; i++)
                if (((struct X3dBlock*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dBlock*)self)->children[i], dataptr);
        X3dBlockDoWithData(self, dataptr);
    }
}


struct X3dViewpoint {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    short set_bind;
    double bindTime;
    short isBound;
    X3dNode* metadata;
    float* centerOfRotation;
    int centerOfRotation_length;
    const char* description;
    float fieldOfView;
    short jump;
    float* orientation;
    int orientation_length;
    short retainUserOffsets;
    float* position;
    int position_length;
    void* extra_data;
};

void X3dViewpointInit(struct X3dViewpoint* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->centerOfRotation = NULL;
    self->centerOfRotation_length = 0;
    self->description = NULL;
    self->fieldOfView = 0.0f;
    self->jump = 0;
    self->orientation = NULL;
    self->orientation_length = 0;
    self->retainUserOffsets = 0;
    self->position = NULL;
    self->position_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dViewpointRenderCallback = NULL;
X3dCallback X3dViewpointTreeRenderCallback = NULL;
X3dCallback X3dViewpointDoWithDataCallback = NULL;
X3dCallback X3dViewpointTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dViewpointProcessEventCallback = NULL;

int X3dViewpointType = 316;

void X3dViewpointRender(X3dNode* self, void *dataptr) {
    if (X3dViewpointRenderCallback)
        X3dViewpointRenderCallback(self, dataptr);
}
void X3dViewpointTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dViewpoint*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dViewpoint*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dViewpoint*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dViewpoint*)self)->metadata, dataptr);
        X3dViewpointRender(self, dataptr);
    }
}
void X3dViewpointDoWithData(X3dNode* self, void *dataptr) {
    if (X3dViewpointDoWithDataCallback)
        X3dViewpointDoWithDataCallback(self, dataptr);
}
void X3dViewpointTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dViewpoint*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dViewpoint*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dViewpoint*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dViewpoint*)self)->metadata, dataptr);
        X3dViewpointDoWithData(self, dataptr);
    }
}


struct X3dBoundedPhysicsModel {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    short enabled;
    X3dNode* geometry;
    void* extra_data;
};

void X3dBoundedPhysicsModelInit(struct X3dBoundedPhysicsModel* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->enabled = 0;
    self->geometry = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dBoundedPhysicsModelRenderCallback = NULL;
X3dCallback X3dBoundedPhysicsModelTreeRenderCallback = NULL;
X3dCallback X3dBoundedPhysicsModelDoWithDataCallback = NULL;
X3dCallback X3dBoundedPhysicsModelTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dBoundedPhysicsModelProcessEventCallback = NULL;

int X3dBoundedPhysicsModelType = 18;

void X3dBoundedPhysicsModelRender(X3dNode* self, void *dataptr) {
    if (X3dBoundedPhysicsModelRenderCallback)
        X3dBoundedPhysicsModelRenderCallback(self, dataptr);
}
void X3dBoundedPhysicsModelTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dBoundedPhysicsModel*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dBoundedPhysicsModel*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dBoundedPhysicsModel*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dBoundedPhysicsModel*)self)->metadata, dataptr);
        if (((struct X3dBoundedPhysicsModel*)self)->geometry)
            X3dTreeRenderCallback(((struct X3dBoundedPhysicsModel*)self)->geometry, dataptr);
        X3dBoundedPhysicsModelRender(self, dataptr);
    }
}
void X3dBoundedPhysicsModelDoWithData(X3dNode* self, void *dataptr) {
    if (X3dBoundedPhysicsModelDoWithDataCallback)
        X3dBoundedPhysicsModelDoWithDataCallback(self, dataptr);
}
void X3dBoundedPhysicsModelTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dBoundedPhysicsModel*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dBoundedPhysicsModel*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dBoundedPhysicsModel*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dBoundedPhysicsModel*)self)->metadata, dataptr);
        if (((struct X3dBoundedPhysicsModel*)self)->geometry)
            X3dTreeDoWithDataCallback(((struct X3dBoundedPhysicsModel*)self)->geometry, dataptr);
        X3dBoundedPhysicsModelDoWithData(self, dataptr);
    }
}


struct X3dGroup {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode** addChildren;
    int addChildren_length;
    X3dNode** removeChildren;
    int removeChildren_length;
    X3dNode* metadata;
    X3dNode** children;
    int children_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    void* extra_data;
};

void X3dGroupInit(struct X3dGroup* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->children = NULL;
    self->children_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dGroupRenderCallback = NULL;
X3dCallback X3dGroupTreeRenderCallback = NULL;
X3dCallback X3dGroupDoWithDataCallback = NULL;
X3dCallback X3dGroupTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dGroupProcessEventCallback = NULL;

int X3dGroupType = 104;

void X3dGroupRender(X3dNode* self, void *dataptr) {
    if (X3dGroupRenderCallback)
        X3dGroupRenderCallback(self, dataptr);
}
void X3dGroupTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dGroup*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dGroup*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dGroup*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dGroup*)self)->metadata, dataptr);
        if (((struct X3dGroup*)self)->children)
            for (i = 0; i < ((struct X3dGroup*)self)->children_length; i++)
                if (((struct X3dGroup*)self)->children[i])
                    X3dTreeRenderCallback(((struct X3dGroup*)self)->children[i], dataptr);
        X3dGroupRender(self, dataptr);
    }
}
void X3dGroupDoWithData(X3dNode* self, void *dataptr) {
    if (X3dGroupDoWithDataCallback)
        X3dGroupDoWithDataCallback(self, dataptr);
}
void X3dGroupTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dGroup*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dGroup*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dGroup*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dGroup*)self)->metadata, dataptr);
        if (((struct X3dGroup*)self)->children)
            for (i = 0; i < ((struct X3dGroup*)self)->children_length; i++)
                if (((struct X3dGroup*)self)->children[i])
                    X3dTreeDoWithDataCallback(((struct X3dGroup*)self)->children[i], dataptr);
        X3dGroupDoWithData(self, dataptr);
    }
}


struct X3dPolylineEmitter {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float speed;
    float variation;
    float mass;
    float surfaceArea;
    X3dNode* coord;
    float* direction;
    int direction_length;
    int* coordIndex;
    int coordIndex_length;
    void* extra_data;
};

void X3dPolylineEmitterInit(struct X3dPolylineEmitter* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->speed = 0.0f;
    self->variation = 0.0f;
    self->mass = 0.0f;
    self->surfaceArea = 0.0f;
    self->coord = NULL;
    self->direction = NULL;
    self->direction_length = 0;
    self->coordIndex = NULL;
    self->coordIndex_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dPolylineEmitterRenderCallback = NULL;
X3dCallback X3dPolylineEmitterTreeRenderCallback = NULL;
X3dCallback X3dPolylineEmitterDoWithDataCallback = NULL;
X3dCallback X3dPolylineEmitterTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dPolylineEmitterProcessEventCallback = NULL;

int X3dPolylineEmitterType = 202;

void X3dPolylineEmitterRender(X3dNode* self, void *dataptr) {
    if (X3dPolylineEmitterRenderCallback)
        X3dPolylineEmitterRenderCallback(self, dataptr);
}
void X3dPolylineEmitterTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPolylineEmitter*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dPolylineEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPolylineEmitter*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dPolylineEmitter*)self)->metadata, dataptr);
        if (((struct X3dPolylineEmitter*)self)->coord)
            X3dTreeRenderCallback(((struct X3dPolylineEmitter*)self)->coord, dataptr);
        X3dPolylineEmitterRender(self, dataptr);
    }
}
void X3dPolylineEmitterDoWithData(X3dNode* self, void *dataptr) {
    if (X3dPolylineEmitterDoWithDataCallback)
        X3dPolylineEmitterDoWithDataCallback(self, dataptr);
}
void X3dPolylineEmitterTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPolylineEmitter*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dPolylineEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPolylineEmitter*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dPolylineEmitter*)self)->metadata, dataptr);
        if (((struct X3dPolylineEmitter*)self)->coord)
            X3dTreeDoWithDataCallback(((struct X3dPolylineEmitter*)self)->coord, dataptr);
        X3dPolylineEmitterDoWithData(self, dataptr);
    }
}


struct X3dPositionInterpolator {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    float set_fraction;
    float* value_changed;
    int value_changed_length;
    X3dNode* metadata;
    float* key;
    int key_length;
    float* keyValue;
    int keyValue_length;
    void* extra_data;
};

void X3dPositionInterpolatorInit(struct X3dPositionInterpolator* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->key = NULL;
    self->key_length = 0;
    self->keyValue = NULL;
    self->keyValue_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dPositionInterpolatorRenderCallback = NULL;
X3dCallback X3dPositionInterpolatorTreeRenderCallback = NULL;
X3dCallback X3dPositionInterpolatorDoWithDataCallback = NULL;
X3dCallback X3dPositionInterpolatorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dPositionInterpolatorProcessEventCallback = NULL;

int X3dPositionInterpolatorType = 210;

void X3dPositionInterpolatorRender(X3dNode* self, void *dataptr) {
    if (X3dPositionInterpolatorRenderCallback)
        X3dPositionInterpolatorRenderCallback(self, dataptr);
}
void X3dPositionInterpolatorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPositionInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dPositionInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPositionInterpolator*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dPositionInterpolator*)self)->metadata, dataptr);
        X3dPositionInterpolatorRender(self, dataptr);
    }
}
void X3dPositionInterpolatorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dPositionInterpolatorDoWithDataCallback)
        X3dPositionInterpolatorDoWithDataCallback(self, dataptr);
}
void X3dPositionInterpolatorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPositionInterpolator*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dPositionInterpolator*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPositionInterpolator*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dPositionInterpolator*)self)->metadata, dataptr);
        X3dPositionInterpolatorDoWithData(self, dataptr);
    }
}


struct X3dCoordinate {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float* point;
    int point_length;
    void* extra_data;
};

void X3dCoordinateInit(struct X3dCoordinate* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->point = NULL;
    self->point_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dCoordinateRenderCallback = NULL;
X3dCallback X3dCoordinateTreeRenderCallback = NULL;
X3dCallback X3dCoordinateDoWithDataCallback = NULL;
X3dCallback X3dCoordinateTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dCoordinateProcessEventCallback = NULL;

int X3dCoordinateType = 52;

void X3dCoordinateRender(X3dNode* self, void *dataptr) {
    if (X3dCoordinateRenderCallback)
        X3dCoordinateRenderCallback(self, dataptr);
}
void X3dCoordinateTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCoordinate*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dCoordinate*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCoordinate*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dCoordinate*)self)->metadata, dataptr);
        X3dCoordinateRender(self, dataptr);
    }
}
void X3dCoordinateDoWithData(X3dNode* self, void *dataptr) {
    if (X3dCoordinateDoWithDataCallback)
        X3dCoordinateDoWithDataCallback(self, dataptr);
}
void X3dCoordinateTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dCoordinate*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dCoordinate*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dCoordinate*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dCoordinate*)self)->metadata, dataptr);
        X3dCoordinateDoWithData(self, dataptr);
    }
}


struct X3dForcePhysicsModel {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    short enabled;
    float* force;
    int force_length;
    void* extra_data;
};

void X3dForcePhysicsModelInit(struct X3dForcePhysicsModel* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->enabled = 0;
    self->force = NULL;
    self->force_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dForcePhysicsModelRenderCallback = NULL;
X3dCallback X3dForcePhysicsModelTreeRenderCallback = NULL;
X3dCallback X3dForcePhysicsModelDoWithDataCallback = NULL;
X3dCallback X3dForcePhysicsModelTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dForcePhysicsModelProcessEventCallback = NULL;

int X3dForcePhysicsModelType = 90;

void X3dForcePhysicsModelRender(X3dNode* self, void *dataptr) {
    if (X3dForcePhysicsModelRenderCallback)
        X3dForcePhysicsModelRenderCallback(self, dataptr);
}
void X3dForcePhysicsModelTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dForcePhysicsModel*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dForcePhysicsModel*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dForcePhysicsModel*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dForcePhysicsModel*)self)->metadata, dataptr);
        X3dForcePhysicsModelRender(self, dataptr);
    }
}
void X3dForcePhysicsModelDoWithData(X3dNode* self, void *dataptr) {
    if (X3dForcePhysicsModelDoWithDataCallback)
        X3dForcePhysicsModelDoWithDataCallback(self, dataptr);
}
void X3dForcePhysicsModelTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dForcePhysicsModel*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dForcePhysicsModel*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dForcePhysicsModel*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dForcePhysicsModel*)self)->metadata, dataptr);
        X3dForcePhysicsModelDoWithData(self, dataptr);
    }
}


struct X3dSphereSensor {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    short isActive;
    short isOver;
    float* rotation_changed;
    int rotation_changed_length;
    float* trackPoint_changed;
    int trackPoint_changed_length;
    X3dNode* metadata;
    short autoOffset;
    const char* description;
    short enabled;
    float* offset;
    int offset_length;
    void* extra_data;
};

void X3dSphereSensorInit(struct X3dSphereSensor* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->autoOffset = 0;
    self->description = NULL;
    self->enabled = 0;
    self->offset = NULL;
    self->offset_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dSphereSensorRenderCallback = NULL;
X3dCallback X3dSphereSensorTreeRenderCallback = NULL;
X3dCallback X3dSphereSensorDoWithDataCallback = NULL;
X3dCallback X3dSphereSensorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dSphereSensorProcessEventCallback = NULL;

int X3dSphereSensorType = 253;

void X3dSphereSensorRender(X3dNode* self, void *dataptr) {
    if (X3dSphereSensorRenderCallback)
        X3dSphereSensorRenderCallback(self, dataptr);
}
void X3dSphereSensorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dSphereSensor*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dSphereSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dSphereSensor*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dSphereSensor*)self)->metadata, dataptr);
        X3dSphereSensorRender(self, dataptr);
    }
}
void X3dSphereSensorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dSphereSensorDoWithDataCallback)
        X3dSphereSensorDoWithDataCallback(self, dataptr);
}
void X3dSphereSensorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dSphereSensor*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dSphereSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dSphereSensor*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dSphereSensor*)self)->metadata, dataptr);
        X3dSphereSensorDoWithData(self, dataptr);
    }
}


struct X3dSurfaceEmitter {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float speed;
    float variation;
    float mass;
    float surfaceArea;
    int* coordIndex;
    int coordIndex_length;
    X3dNode* surface;
    void* extra_data;
};

void X3dSurfaceEmitterInit(struct X3dSurfaceEmitter* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->speed = 0.0f;
    self->variation = 0.0f;
    self->mass = 0.0f;
    self->surfaceArea = 0.0f;
    self->coordIndex = NULL;
    self->coordIndex_length = 0;
    self->surface = NULL;
    self->extra_data = NULL;
}

X3dCallback X3dSurfaceEmitterRenderCallback = NULL;
X3dCallback X3dSurfaceEmitterTreeRenderCallback = NULL;
X3dCallback X3dSurfaceEmitterDoWithDataCallback = NULL;
X3dCallback X3dSurfaceEmitterTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dSurfaceEmitterProcessEventCallback = NULL;

int X3dSurfaceEmitterType = 267;

void X3dSurfaceEmitterRender(X3dNode* self, void *dataptr) {
    if (X3dSurfaceEmitterRenderCallback)
        X3dSurfaceEmitterRenderCallback(self, dataptr);
}
void X3dSurfaceEmitterTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dSurfaceEmitter*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dSurfaceEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dSurfaceEmitter*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dSurfaceEmitter*)self)->metadata, dataptr);
        if (((struct X3dSurfaceEmitter*)self)->surface)
            X3dTreeRenderCallback(((struct X3dSurfaceEmitter*)self)->surface, dataptr);
        X3dSurfaceEmitterRender(self, dataptr);
    }
}
void X3dSurfaceEmitterDoWithData(X3dNode* self, void *dataptr) {
    if (X3dSurfaceEmitterDoWithDataCallback)
        X3dSurfaceEmitterDoWithDataCallback(self, dataptr);
}
void X3dSurfaceEmitterTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dSurfaceEmitter*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dSurfaceEmitter*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dSurfaceEmitter*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dSurfaceEmitter*)self)->metadata, dataptr);
        if (((struct X3dSurfaceEmitter*)self)->surface)
            X3dTreeDoWithDataCallback(((struct X3dSurfaceEmitter*)self)->surface, dataptr);
        X3dSurfaceEmitterDoWithData(self, dataptr);
    }
}


struct X3dTouchSensor {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    float* hitNormal_changed;
    int hitNormal_changed_length;
    float* hitPoint_changed;
    int hitPoint_changed_length;
    float* hitTexCoord_changed;
    int hitTexCoord_changed_length;
    short isActive;
    short isOver;
    double touchTime;
    X3dNode* metadata;
    const char* description;
    short enabled;
    void* extra_data;
};

void X3dTouchSensorInit(struct X3dTouchSensor* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->description = NULL;
    self->enabled = 0;
    self->extra_data = NULL;
}

X3dCallback X3dTouchSensorRenderCallback = NULL;
X3dCallback X3dTouchSensorTreeRenderCallback = NULL;
X3dCallback X3dTouchSensorDoWithDataCallback = NULL;
X3dCallback X3dTouchSensorTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dTouchSensorProcessEventCallback = NULL;

int X3dTouchSensorType = 288;

void X3dTouchSensorRender(X3dNode* self, void *dataptr) {
    if (X3dTouchSensorRenderCallback)
        X3dTouchSensorRenderCallback(self, dataptr);
}
void X3dTouchSensorTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTouchSensor*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dTouchSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTouchSensor*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dTouchSensor*)self)->metadata, dataptr);
        X3dTouchSensorRender(self, dataptr);
    }
}
void X3dTouchSensorDoWithData(X3dNode* self, void *dataptr) {
    if (X3dTouchSensorDoWithDataCallback)
        X3dTouchSensorDoWithDataCallback(self, dataptr);
}
void X3dTouchSensorTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTouchSensor*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dTouchSensor*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTouchSensor*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dTouchSensor*)self)->metadata, dataptr);
        X3dTouchSensorDoWithData(self, dataptr);
    }
}


struct X3dPointLight {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float ambientIntensity;
    float* attenuation;
    int attenuation_length;
    float* color;
    int color_length;
    short global;
    float intensity;
    float* location;
    int location_length;
    short on;
    float radius;
    short shadows;
    short kambiShadows;
    short kambiShadowsMain;
    float projectionNear;
    float projectionFar;
    float* up;
    int up_length;
    X3dNode* defaultShadowMap;
    X3dNode** effects;
    int effects_length;
    short shadowVolumes;
    short shadowVolumesMain;
    void* extra_data;
};

void X3dPointLightInit(struct X3dPointLight* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->ambientIntensity = 0.0f;
    self->attenuation = NULL;
    self->attenuation_length = 0;
    self->color = NULL;
    self->color_length = 0;
    self->global = 0;
    self->intensity = 0.0f;
    self->location = NULL;
    self->location_length = 0;
    self->on = 0;
    self->radius = 0.0f;
    self->shadows = 0;
    self->kambiShadows = 0;
    self->kambiShadowsMain = 0;
    self->projectionNear = 0.0f;
    self->projectionFar = 0.0f;
    self->up = NULL;
    self->up_length = 0;
    self->defaultShadowMap = NULL;
    self->effects = NULL;
    self->effects_length = 0;
    self->shadowVolumes = 0;
    self->shadowVolumesMain = 0;
    self->extra_data = NULL;
}

X3dCallback X3dPointLightRenderCallback = NULL;
X3dCallback X3dPointLightTreeRenderCallback = NULL;
X3dCallback X3dPointLightDoWithDataCallback = NULL;
X3dCallback X3dPointLightTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dPointLightProcessEventCallback = NULL;

int X3dPointLightType = 198;

void X3dPointLightRender(X3dNode* self, void *dataptr) {
    if (X3dPointLightRenderCallback)
        X3dPointLightRenderCallback(self, dataptr);
}
void X3dPointLightTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPointLight*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dPointLight*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPointLight*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dPointLight*)self)->metadata, dataptr);
        if (((struct X3dPointLight*)self)->defaultShadowMap)
            X3dTreeRenderCallback(((struct X3dPointLight*)self)->defaultShadowMap, dataptr);
        if (((struct X3dPointLight*)self)->effects)
            for (i = 0; i < ((struct X3dPointLight*)self)->effects_length; i++)
                if (((struct X3dPointLight*)self)->effects[i])
                    X3dTreeRenderCallback(((struct X3dPointLight*)self)->effects[i], dataptr);
        X3dPointLightRender(self, dataptr);
    }
}
void X3dPointLightDoWithData(X3dNode* self, void *dataptr) {
    if (X3dPointLightDoWithDataCallback)
        X3dPointLightDoWithDataCallback(self, dataptr);
}
void X3dPointLightTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dPointLight*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dPointLight*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dPointLight*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dPointLight*)self)->metadata, dataptr);
        if (((struct X3dPointLight*)self)->defaultShadowMap)
            X3dTreeDoWithDataCallback(((struct X3dPointLight*)self)->defaultShadowMap, dataptr);
        if (((struct X3dPointLight*)self)->effects)
            for (i = 0; i < ((struct X3dPointLight*)self)->effects_length; i++)
                if (((struct X3dPointLight*)self)->effects[i])
                    X3dTreeDoWithDataCallback(((struct X3dPointLight*)self)->effects[i], dataptr);
        X3dPointLightDoWithData(self, dataptr);
    }
}


struct X3dAppearance {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    X3dNode* material;
    X3dNode* texture;
    X3dNode* textureTransform;
    X3dNode* fillProperties;
    X3dNode* lineProperties;
    X3dNode** shaders;
    int shaders_length;
    X3dNode** receiveShadows;
    int receiveShadows_length;
    short shadowCaster;
    X3dNode* normalMap;
    X3dNode* heightMap;
    float heightMapScale;
    X3dNode** effects;
    int effects_length;
    void* extra_data;
};

void X3dAppearanceInit(struct X3dAppearance* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->material = NULL;
    self->texture = NULL;
    self->textureTransform = NULL;
    self->fillProperties = NULL;
    self->lineProperties = NULL;
    self->shaders = NULL;
    self->shaders_length = 0;
    self->receiveShadows = NULL;
    self->receiveShadows_length = 0;
    self->shadowCaster = 0;
    self->normalMap = NULL;
    self->heightMap = NULL;
    self->heightMapScale = 0.0f;
    self->effects = NULL;
    self->effects_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dAppearanceRenderCallback = NULL;
X3dCallback X3dAppearanceTreeRenderCallback = NULL;
X3dCallback X3dAppearanceDoWithDataCallback = NULL;
X3dCallback X3dAppearanceTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dAppearanceProcessEventCallback = NULL;

int X3dAppearanceType = 1;

void X3dAppearanceRender(X3dNode* self, void *dataptr) {
    if (X3dAppearanceRenderCallback)
        X3dAppearanceRenderCallback(self, dataptr);
}
void X3dAppearanceTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dAppearance*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dAppearance*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dAppearance*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dAppearance*)self)->metadata, dataptr);
        if (((struct X3dAppearance*)self)->material)
            X3dTreeRenderCallback(((struct X3dAppearance*)self)->material, dataptr);
        if (((struct X3dAppearance*)self)->texture)
            X3dTreeRenderCallback(((struct X3dAppearance*)self)->texture, dataptr);
        if (((struct X3dAppearance*)self)->textureTransform)
            X3dTreeRenderCallback(((struct X3dAppearance*)self)->textureTransform, dataptr);
        if (((struct X3dAppearance*)self)->fillProperties)
            X3dTreeRenderCallback(((struct X3dAppearance*)self)->fillProperties, dataptr);
        if (((struct X3dAppearance*)self)->lineProperties)
            X3dTreeRenderCallback(((struct X3dAppearance*)self)->lineProperties, dataptr);
        if (((struct X3dAppearance*)self)->shaders)
            for (i = 0; i < ((struct X3dAppearance*)self)->shaders_length; i++)
                if (((struct X3dAppearance*)self)->shaders[i])
                    X3dTreeRenderCallback(((struct X3dAppearance*)self)->shaders[i], dataptr);
        if (((struct X3dAppearance*)self)->receiveShadows)
            for (i = 0; i < ((struct X3dAppearance*)self)->receiveShadows_length; i++)
                if (((struct X3dAppearance*)self)->receiveShadows[i])
                    X3dTreeRenderCallback(((struct X3dAppearance*)self)->receiveShadows[i], dataptr);
        if (((struct X3dAppearance*)self)->normalMap)
            X3dTreeRenderCallback(((struct X3dAppearance*)self)->normalMap, dataptr);
        if (((struct X3dAppearance*)self)->heightMap)
            X3dTreeRenderCallback(((struct X3dAppearance*)self)->heightMap, dataptr);
        if (((struct X3dAppearance*)self)->effects)
            for (i = 0; i < ((struct X3dAppearance*)self)->effects_length; i++)
                if (((struct X3dAppearance*)self)->effects[i])
                    X3dTreeRenderCallback(((struct X3dAppearance*)self)->effects[i], dataptr);
        X3dAppearanceRender(self, dataptr);
    }
}
void X3dAppearanceDoWithData(X3dNode* self, void *dataptr) {
    if (X3dAppearanceDoWithDataCallback)
        X3dAppearanceDoWithDataCallback(self, dataptr);
}
void X3dAppearanceTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dAppearance*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dAppearance*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->metadata, dataptr);
        if (((struct X3dAppearance*)self)->material)
            X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->material, dataptr);
        if (((struct X3dAppearance*)self)->texture)
            X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->texture, dataptr);
        if (((struct X3dAppearance*)self)->textureTransform)
            X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->textureTransform, dataptr);
        if (((struct X3dAppearance*)self)->fillProperties)
            X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->fillProperties, dataptr);
        if (((struct X3dAppearance*)self)->lineProperties)
            X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->lineProperties, dataptr);
        if (((struct X3dAppearance*)self)->shaders)
            for (i = 0; i < ((struct X3dAppearance*)self)->shaders_length; i++)
                if (((struct X3dAppearance*)self)->shaders[i])
                    X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->shaders[i], dataptr);
        if (((struct X3dAppearance*)self)->receiveShadows)
            for (i = 0; i < ((struct X3dAppearance*)self)->receiveShadows_length; i++)
                if (((struct X3dAppearance*)self)->receiveShadows[i])
                    X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->receiveShadows[i], dataptr);
        if (((struct X3dAppearance*)self)->normalMap)
            X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->normalMap, dataptr);
        if (((struct X3dAppearance*)self)->heightMap)
            X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->heightMap, dataptr);
        if (((struct X3dAppearance*)self)->effects)
            for (i = 0; i < ((struct X3dAppearance*)self)->effects_length; i++)
                if (((struct X3dAppearance*)self)->effects[i])
                    X3dTreeDoWithDataCallback(((struct X3dAppearance*)self)->effects[i], dataptr);
        X3dAppearanceDoWithData(self, dataptr);
    }
}


struct X3dParticleSystem {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    X3dNode* appearance;
    short createParticles;
    X3dNode* geometry;
    short enabled;
    float lifetimeVariation;
    int maxParticles;
    float particleLifetime;
    float* particleSize;
    int particleSize_length;
    float* bboxCenter;
    int bboxCenter_length;
    float* bboxSize;
    int bboxSize_length;
    X3dNode* colorRamp;
    float* colorKey;
    int colorKey_length;
    X3dNode* emitter;
    const char* geometryType;
    X3dNode** physics;
    int physics_length;
    X3dNode* texCoordRamp;
    float* texCoordKey;
    int texCoordKey_length;
    void* extra_data;
};

void X3dParticleSystemInit(struct X3dParticleSystem* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->appearance = NULL;
    self->createParticles = 0;
    self->geometry = NULL;
    self->enabled = 0;
    self->lifetimeVariation = 0.0f;
    self->maxParticles = 0;
    self->particleLifetime = 0.0f;
    self->particleSize = NULL;
    self->particleSize_length = 0;
    self->bboxCenter = NULL;
    self->bboxCenter_length = 0;
    self->bboxSize = NULL;
    self->bboxSize_length = 0;
    self->colorRamp = NULL;
    self->colorKey = NULL;
    self->colorKey_length = 0;
    self->emitter = NULL;
    self->geometryType = NULL;
    self->physics = NULL;
    self->physics_length = 0;
    self->texCoordRamp = NULL;
    self->texCoordKey = NULL;
    self->texCoordKey_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dParticleSystemRenderCallback = NULL;
X3dCallback X3dParticleSystemTreeRenderCallback = NULL;
X3dCallback X3dParticleSystemDoWithDataCallback = NULL;
X3dCallback X3dParticleSystemTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dParticleSystemProcessEventCallback = NULL;

int X3dParticleSystemType = 191;

void X3dParticleSystemRender(X3dNode* self, void *dataptr) {
    if (X3dParticleSystemRenderCallback)
        X3dParticleSystemRenderCallback(self, dataptr);
}
void X3dParticleSystemTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dParticleSystem*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dParticleSystem*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dParticleSystem*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dParticleSystem*)self)->metadata, dataptr);
        if (((struct X3dParticleSystem*)self)->appearance)
            X3dTreeRenderCallback(((struct X3dParticleSystem*)self)->appearance, dataptr);
        if (((struct X3dParticleSystem*)self)->geometry)
            X3dTreeRenderCallback(((struct X3dParticleSystem*)self)->geometry, dataptr);
        if (((struct X3dParticleSystem*)self)->colorRamp)
            X3dTreeRenderCallback(((struct X3dParticleSystem*)self)->colorRamp, dataptr);
        if (((struct X3dParticleSystem*)self)->emitter)
            X3dTreeRenderCallback(((struct X3dParticleSystem*)self)->emitter, dataptr);
        if (((struct X3dParticleSystem*)self)->physics)
            for (i = 0; i < ((struct X3dParticleSystem*)self)->physics_length; i++)
                if (((struct X3dParticleSystem*)self)->physics[i])
                    X3dTreeRenderCallback(((struct X3dParticleSystem*)self)->physics[i], dataptr);
        if (((struct X3dParticleSystem*)self)->texCoordRamp)
            X3dTreeRenderCallback(((struct X3dParticleSystem*)self)->texCoordRamp, dataptr);
        X3dParticleSystemRender(self, dataptr);
    }
}
void X3dParticleSystemDoWithData(X3dNode* self, void *dataptr) {
    if (X3dParticleSystemDoWithDataCallback)
        X3dParticleSystemDoWithDataCallback(self, dataptr);
}
void X3dParticleSystemTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dParticleSystem*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dParticleSystem*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dParticleSystem*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dParticleSystem*)self)->metadata, dataptr);
        if (((struct X3dParticleSystem*)self)->appearance)
            X3dTreeDoWithDataCallback(((struct X3dParticleSystem*)self)->appearance, dataptr);
        if (((struct X3dParticleSystem*)self)->geometry)
            X3dTreeDoWithDataCallback(((struct X3dParticleSystem*)self)->geometry, dataptr);
        if (((struct X3dParticleSystem*)self)->colorRamp)
            X3dTreeDoWithDataCallback(((struct X3dParticleSystem*)self)->colorRamp, dataptr);
        if (((struct X3dParticleSystem*)self)->emitter)
            X3dTreeDoWithDataCallback(((struct X3dParticleSystem*)self)->emitter, dataptr);
        if (((struct X3dParticleSystem*)self)->physics)
            for (i = 0; i < ((struct X3dParticleSystem*)self)->physics_length; i++)
                if (((struct X3dParticleSystem*)self)->physics[i])
                    X3dTreeDoWithDataCallback(((struct X3dParticleSystem*)self)->physics[i], dataptr);
        if (((struct X3dParticleSystem*)self)->texCoordRamp)
            X3dTreeDoWithDataCallback(((struct X3dParticleSystem*)self)->texCoordRamp, dataptr);
        X3dParticleSystemDoWithData(self, dataptr);
    }
}


struct X3dTextureTransform {
    X3dNode* m_parent;
    X3dNode* m_protoRoot;
    int m_type;
    void *m_data;
    X3dNode* metadata;
    float* center;
    int center_length;
    float rotation;
    float* scale;
    int scale_length;
    float* translation;
    int translation_length;
    void* extra_data;
};

void X3dTextureTransformInit(struct X3dTextureTransform* self) {
    self->m_protoRoot = NULL;
    self->metadata = NULL;
    self->center = NULL;
    self->center_length = 0;
    self->rotation = 0.0f;
    self->scale = NULL;
    self->scale_length = 0;
    self->translation = NULL;
    self->translation_length = 0;
    self->extra_data = NULL;
}

X3dCallback X3dTextureTransformRenderCallback = NULL;
X3dCallback X3dTextureTransformTreeRenderCallback = NULL;
X3dCallback X3dTextureTransformDoWithDataCallback = NULL;
X3dCallback X3dTextureTransformTreeDoWithDataCallback = NULL;

X3dProcessEventCallback X3dTextureTransformProcessEventCallback = NULL;

int X3dTextureTransformType = 281;

void X3dTextureTransformRender(X3dNode* self, void *dataptr) {
    if (X3dTextureTransformRenderCallback)
        X3dTextureTransformRenderCallback(self, dataptr);
}
void X3dTextureTransformTreeRender(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTextureTransform*)self)->m_protoRoot != NULL)
        X3dTreeRenderCallback(((struct X3dTextureTransform*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTextureTransform*)self)->metadata)
            X3dTreeRenderCallback(((struct X3dTextureTransform*)self)->metadata, dataptr);
        X3dTextureTransformRender(self, dataptr);
    }
}
void X3dTextureTransformDoWithData(X3dNode* self, void *dataptr) {
    if (X3dTextureTransformDoWithDataCallback)
        X3dTextureTransformDoWithDataCallback(self, dataptr);
}
void X3dTextureTransformTreeDoWithData(X3dNode* self, void *dataptr) {
    int i;
    if (((struct X3dTextureTransform*)self)->m_protoRoot != NULL)
        X3dTreeDoWithDataCallback(((struct X3dTextureTransform*)self)->m_protoRoot, dataptr);
    else {
        if (((struct X3dTextureTransform*)self)->metadata)
            X3dTreeDoWithDataCallback(((struct X3dTextureTransform*)self)->metadata, dataptr);
        X3dTextureTransformDoWithData(self, dataptr);
    }
}



struct X3dSceneGraph {
    struct X3dGroup root;
    struct X3dTransform Transform1;
    struct X3dShape Shape_5;
    struct X3dAppearance Appearance_6;
    struct X3dMaterial Material_7;
    struct X3dCoordinateInterpolator CoordinateInterpolator_8;
    struct X3dNormalInterpolator NormalInterpolator_9;
    struct X3dIndexedFaceSet NurbsSurface1;
    struct X3dCoordinate Coordinate_4;
    struct X3dNormal Normal1;
    struct X3dTextureCoordinate TextureCoordinate_10;
    struct X3dTimeSensor TimeSensor1;
    struct X3dCoordinateInterpolator CoordinateInterpolator1;
};

struct X3dNodeStruct {
    X3dNode *m_parent;
    X3dNode *m_protoRoot;
    int m_type;
    void *m_data;
};

void X3dSceneGraphInit(struct X3dSceneGraph *self) {
    X3dGroupInit(&self->root);
    self->root.m_parent = (X3dNode *)NULL;
    self->Transform1.route_sources =  NULL;
    self->Transform1.num_route_source = 0;
    X3dTransformInit(&self->Transform1);
    self->Transform1.m_parent = (X3dNode *)&self->root;
    X3dShapeInit(&self->Shape_5);
    self->Shape_5.m_parent = (X3dNode *)&self->Transform1;
    X3dAppearanceInit(&self->Appearance_6);
    self->Appearance_6.m_parent = (X3dNode *)&self->Shape_5;
    X3dMaterialInit(&self->Material_7);
    self->Material_7.m_parent = (X3dNode *)&self->Appearance_6;
    self->Material_7.ambientIntensity = 0.200000;
    {
    static float m_diffuseColor[3] = { 0.800000, 0.800000, 0.800000 };
    self->Material_7.diffuseColor = m_diffuseColor;
    self->Material_7.diffuseColor_length = sizeof(m_diffuseColor) / sizeof(float);
    }
    {
    static float m_emissiveColor[3] = { 0, 0, 0 };
    self->Material_7.emissiveColor = m_emissiveColor;
    self->Material_7.emissiveColor_length = sizeof(m_emissiveColor) / sizeof(float);
    }
    self->Material_7.shininess = 0.200000;
    {
    static float m_specularColor[3] = { 0, 0, 0 };
    self->Material_7.specularColor = m_specularColor;
    self->Material_7.specularColor_length = sizeof(m_specularColor) / sizeof(float);
    }
    self->Material_7.transparency = 0;
    self->Material_7.m_type = 147;
    self->Material_7.m_data = NULL;
    self->Appearance_6.material = &self->Material_7;
    self->Appearance_6.texture = NULL;
    self->Appearance_6.textureTransform = NULL;
    self->Appearance_6.m_type = 1;
    self->Appearance_6.m_data = NULL;
    X3dCoordinateInterpolatorInit(&self->CoordinateInterpolator_8);
    self->CoordinateInterpolator_8.m_parent = (X3dNode *)&self->Shape_5;
    {
    static float m_key[] = { 0, 1 };
    self->CoordinateInterpolator_8.key = m_key;
    self->CoordinateInterpolator_8.key_length = sizeof(m_key) / sizeof(float);
    }
    {
    static float m_keyValue[] = { 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -0.995955, -0.089854, -0.016350, -0.995955, -0.088354, -0.033075, -0.995955, -0.083546, -0.049169, -0.995955, -0.075208, -0.063537, -0.995955, -0.063537, -0.075208, -0.995955, -0.049169, -0.083546, -0.995955, -0.033075, -0.088354, -0.995955, -0.016350, -0.089854, -0.995955, 0, -0.088354, -0.995955, 0.016350, -0.083546, -0.995955, 0.033075, -0.075208, -0.995955, 0.049169, -0.063537, -0.995955, 0.063537, -0.049169, -0.995955, 0.075208, -0.033075, -0.995955, 0.083546, -0.016350, -0.995955, 0.088354, 0, -0.995955, 0.089854, 0.016350, -0.995955, 0.088354, 0.033075, -0.995955, 0.083546, 0.049169, -0.995955, 0.075208, 0.063537, -0.995955, 0.063537, 0.075208, -0.995955, 0.049169, 0.083546, -0.995955, 0.033075, 0.088354, -0.995955, 0.016350, 0.089854, -0.995955, 0, 0.088354, -0.995955, -0.016350, 0.083546, -0.995955, -0.033075, 0.075208, -0.995955, -0.049169, 0.063537, -0.995955, -0.063537, 0.049169, -0.995955, -0.075208, 0.033075, -0.995955, -0.083546, 0.016350, -0.995955, -0.088354, 0, -0.995955, -0.089854, 0, -0.983305, -0.181963, -0.033111, -0.983305, -0.178925, -0.066980, -0.983305, -0.169187, -0.099572, -0.983305, -0.152302, -0.128667, -0.983305, -0.128667, -0.152302, -0.983305, -0.099572, -0.169187, -0.983305, -0.066980, -0.178925, -0.983305, -0.033111, -0.181963, -0.983305, 0, -0.178925, -0.983305, 0.033111, -0.169187, -0.983305, 0.066980, -0.152302, -0.983305, 0.099572, -0.128667, -0.983305, 0.128667, -0.099572, -0.983305, 0.152302, -0.066980, -0.983305, 0.169187, -0.033111, -0.983305, 0.178925, 0, -0.983305, 0.181963, 0.033111, -0.983305, 0.178925, 0.066980, -0.983305, 0.169187, 0.099572, -0.983305, 0.152302, 0.128667, -0.983305, 0.128667, 0.152302, -0.983305, 0.099572, 0.169187, -0.983305, 0.066980, 0.178925, -0.983305, 0.033111, 0.181963, -0.983305, 0, 0.178925, -0.983305, -0.033111, 0.169187, -0.983305, -0.066980, 0.152302, -0.983305, -0.099572, 0.128667, -0.983305, -0.128667, 0.099572, -0.983305, -0.152302, 0.066980, -0.983305, -0.169187, 0.033111, -0.983305, -0.178925, 0, -0.983305, -0.181963, 0, -0.961399, -0.275158, -0.050069, -0.961399, -0.270565, -0.101284, -0.961399, -0.255839, -0.150569, -0.961399, -0.230306, -0.194566, -0.961399, -0.194566, -0.230306, -0.961399, -0.150569, -0.255839, -0.961399, -0.101284, -0.270565, -0.961399, -0.050069, -0.275158, -0.961399, 0, -0.270565, -0.961399, 0.050069, -0.255839, -0.961399, 0.101284, -0.230306, -0.961399, 0.150569, -0.194566, -0.961399, 0.194566, -0.150569, -0.961399, 0.230306, -0.101284, -0.961399, 0.255839, -0.050069, -0.961399, 0.270565, 0, -0.961399, 0.275158, 0.050069, -0.961399, 0.270565, 0.101284, -0.961399, 0.255839, 0.150569, -0.961399, 0.230306, 0.194566, -0.961399, 0.194566, 0.230306, -0.961399, 0.150569, 0.255839, -0.961399, 0.101284, 0.270565, -0.961399, 0.050069, 0.275158, -0.961399, 0, 0.270565, -0.961399, -0.050069, 0.255839, -0.961399, -0.101284, 0.230306, -0.961399, -0.150569, 0.194566, -0.961399, -0.194566, 0.150569, -0.961399, -0.230306, 0.101284, -0.961399, -0.255839, 0.050069, -0.961399, -0.270565, 0, -0.961399, -0.275158, 0, -0.929788, -0.368095, -0.066980, -0.929788, -0.361950, -0.135494, -0.929788, -0.342250, -0.201425, -0.929788, -0.308094, -0.260282, -0.929788, -0.260282, -0.308094, -0.929788, -0.201425, -0.342250, -0.929788, -0.135494, -0.361950, -0.929788, -0.066980, -0.368095, -0.929788, 0, -0.361950, -0.929788, 0.066980, -0.342250, -0.929788, 0.135494, -0.308094, -0.929788, 0.201425, -0.260282, -0.929788, 0.260282, -0.201425, -0.929788, 0.308094, -0.135494, -0.929788, 0.342250, -0.066980, -0.929788, 0.361950, 0, -0.929788, 0.368095, 0.066980, -0.929788, 0.361950, 0.135494, -0.929788, 0.342250, 0.201425, -0.929788, 0.308094, 0.260282, -0.929788, 0.260282, 0.308094, -0.929788, 0.201425, 0.342250, -0.929788, 0.135494, 0.361950, -0.929788, 0.066980, 0.368095, -0.929788, 0, 0.361950, -0.929788, -0.066980, 0.342250, -0.929788, -0.135494, 0.308094, -0.929788, -0.201425, 0.260282, -0.929788, -0.260282, 0.201425, -0.929788, -0.308094, 0.135494, -0.929788, -0.342250, 0.066980, -0.929788, -0.361950, 0, -0.929788, -0.368095, 0, -0.888284, -0.459295, -0.083575, -0.888284, -0.451627, -0.169064, -0.888284, -0.427047, -0.251330, -0.888284, -0.384428, -0.324770, -0.888284, -0.324770, -0.384428, -0.888284, -0.251330, -0.427047, -0.888284, -0.169064, -0.451627, -0.888284, -0.083575, -0.459295, -0.888284, 0, -0.451627, -0.888284, 0.083575, -0.427047, -0.888284, 0.169064, -0.384428, -0.888284, 0.251330, -0.324770, -0.888284, 0.324770, -0.251330, -0.888284, 0.384428, -0.169064, -0.888284, 0.427047, -0.083575, -0.888284, 0.451627, 0, -0.888284, 0.459295, 0.083575, -0.888284, 0.451627, 0.169064, -0.888284, 0.427047, 0.251330, -0.888284, 0.384428, 0.324770, -0.888284, 0.324770, 0.384428, -0.888284, 0.251330, 0.427047, -0.888284, 0.169064, 0.451627, -0.888284, 0.083575, 0.459295, -0.888284, 0, 0.451627, -0.888284, -0.083575, 0.427047, -0.888284, -0.169064, 0.384428, -0.888284, -0.251330, 0.324770, -0.888284, -0.324770, 0.251330, -0.888284, -0.384428, 0.169064, -0.888284, -0.427047, 0.083575, -0.888284, -0.451627, 0, -0.888284, -0.459295, 0, -0.836996, -0.547210, -0.099572, -0.836996, -0.538074, -0.201425, -0.836996, -0.508789, -0.299438, -0.836995, -0.458012, -0.386936, -0.836996, -0.386936, -0.458012, -0.836995, -0.299438, -0.508789, -0.836996, -0.201425, -0.538074, -0.836996, -0.099572, -0.547210, -0.836996, 0, -0.538074, -0.836996, 0.099572, -0.508789, -0.836996, 0.201425, -0.458012, -0.836995, 0.299438, -0.386936, -0.836996, 0.386936, -0.299438, -0.836995, 0.458012, -0.201425, -0.836996, 0.508789, -0.099572, -0.836996, 0.538074, 0, -0.836996, 0.547210, 0.099572, -0.836996, 0.538074, 0.201425, -0.836996, 0.508789, 0.299438, -0.836995, 0.458012, 0.386936, -0.836996, 0.386936, 0.458012, -0.836995, 0.299438, 0.508789, -0.836996, 0.201425, 0.538074, -0.836996, 0.099572, 0.547210, -0.836996, 0, 0.538074, -0.836996, -0.099572, 0.508789, -0.836996, -0.201425, 0.458012, -0.836995, -0.299438, 0.386936, -0.836996, -0.386936, 0.299438, -0.836995, -0.458012, 0.201425, -0.836996, -0.508789, 0.099572, -0.836996, -0.538074, 0, -0.836996, -0.547210, 0, -0.776353, -0.630298, -0.114691, -0.776353, -0.619776, -0.232009, -0.776353, -0.586044, -0.344905, -0.776353, -0.527557, -0.445688, -0.776353, -0.445688, -0.527557, -0.776353, -0.344905, -0.586044, -0.776353, -0.232009, -0.619776, -0.776353, -0.114691, -0.630298, -0.776353, 0, -0.619776, -0.776353, 0.114691, -0.586044, -0.776353, 0.232009, -0.527557, -0.776353, 0.344905, -0.445688, -0.776353, 0.445688, -0.344905, -0.776353, 0.527557, -0.232009, -0.776353, 0.586044, -0.114691, -0.776353, 0.619776, 0, -0.776353, 0.630298, 0.114691, -0.776353, 0.619776, 0.232009, -0.776353, 0.586044, 0.344905, -0.776353, 0.527557, 0.445688, -0.776353, 0.445688, 0.527557, -0.776353, 0.344905, 0.586044, -0.776353, 0.232009, 0.619776, -0.776353, 0.114691, 0.630298, -0.776353, 0, 0.619776, -0.776353, -0.114691, 0.586044, -0.776353, -0.232009, 0.527557, -0.776353, -0.344905, 0.445688, -0.776353, -0.445688, 0.344905, -0.776353, -0.527557, 0.232009, -0.776353, -0.586044, 0.114691, -0.776353, -0.619776, 0, -0.776353, -0.630298, 0, -0.707107, -0.707107, -0.128667, -0.707107, -0.695302, -0.260282, -0.707107, -0.657460, -0.386936, -0.707107, -0.591845, -0.500000, -0.707107, -0.500000, -0.591845, -0.707107, -0.386936, -0.657460, -0.707107, -0.260282, -0.695302, -0.707107, -0.128667, -0.707107, -0.707107, 0, -0.695302, -0.707107, 0.128667, -0.657460, -0.707107, 0.260282, -0.591845, -0.707107, 0.386936, -0.500000, -0.707107, 0.500000, -0.386936, -0.707107, 0.591845, -0.260282, -0.707107, 0.657460, -0.128667, -0.707107, 0.695302, 0, -0.707107, 0.707107, 0.128667, -0.707107, 0.695302, 0.260282, -0.707107, 0.657460, 0.386936, -0.707107, 0.591845, 0.500000, -0.707107, 0.500000, 0.591845, -0.707107, 0.386936, 0.657460, -0.707107, 0.260282, 0.695302, -0.707107, 0.128667, 0.707107, -0.707107, 0, 0.695302, -0.707107, -0.128667, 0.657460, -0.707107, -0.260282, 0.591845, -0.707107, -0.386936, 0.500000, -0.707107, -0.500000, 0.386936, -0.707107, -0.591845, 0.260282, -0.707107, -0.657460, 0.128667, -0.707107, -0.695302, 0, -0.707107, -0.707107, 0, -0.630298, -0.776353, -0.141268, -0.630298, -0.763392, -0.285772, -0.630298, -0.721844, -0.424828, -0.630298, -0.649804, -0.548965, -0.630298, -0.548965, -0.649804, -0.630298, -0.424828, -0.721844, -0.630298, -0.285771, -0.763392, -0.630298, -0.141268, -0.776353, -0.630298, 0, -0.763392, -0.630298, 0.141268, -0.721844, -0.630298, 0.285772, -0.649804, -0.630298, 0.424828, -0.548965, -0.630298, 0.548965, -0.424828, -0.630298, 0.649804, -0.285771, -0.630298, 0.721844, -0.141268, -0.630298, 0.763392, 0, -0.630298, 0.776353, 0.141268, -0.630298, 0.763392, 0.285772, -0.630298, 0.721844, 0.424828, -0.630298, 0.649804, 0.548965, -0.630298, 0.548965, 0.649804, -0.630298, 0.424828, 0.721844, -0.630298, 0.285771, 0.763392, -0.630298, 0.141268, 0.776353, -0.630298, 0, 0.763392, -0.630298, -0.141268, 0.721844, -0.630298, -0.285772, 0.649804, -0.630298, -0.424828, 0.548965, -0.630298, -0.548965, 0.424828, -0.630298, -0.649804, 0.285771, -0.630298, -0.721844, 0.141268, -0.630298, -0.763392, 0, -0.630298, -0.776353, 0, -0.547210, -0.836996, -0.152302, -0.547210, -0.823022, -0.308094, -0.547210, -0.778229, -0.458012, -0.547210, -0.700562, -0.591845, -0.547210, -0.591845, -0.700562, -0.547210, -0.458012, -0.778229, -0.547210, -0.308094, -0.823022, -0.547210, -0.152302, -0.836996, -0.547210, 0, -0.823022, -0.547210, 0.152302, -0.778229, -0.547210, 0.308094, -0.700562, -0.547210, 0.458012, -0.591845, -0.547210, 0.591845, -0.458012, -0.547210, 0.700562, -0.308094, -0.547210, 0.778229, -0.152302, -0.547210, 0.823022, 0, -0.547210, 0.836996, 0.152302, -0.547210, 0.823022, 0.308094, -0.547210, 0.778229, 0.458012, -0.547210, 0.700562, 0.591845, -0.547210, 0.591845, 0.700562, -0.547210, 0.458012, 0.778229, -0.547210, 0.308094, 0.823022, -0.547210, 0.152302, 0.836996, -0.547210, 0, 0.823022, -0.547210, -0.152302, 0.778229, -0.547210, -0.308094, 0.700562, -0.547210, -0.458012, 0.591845, -0.547210, -0.591845, 0.458012, -0.547210, -0.700562, 0.308094, -0.547210, -0.778229, 0.152302, -0.547210, -0.823022, 0, -0.547210, -0.836996, 0, -0.459295, -0.888284, -0.161635, -0.459295, -0.873454, -0.326973, -0.459295, -0.825916, -0.486078, -0.459295, -0.743490, -0.628112, -0.459295, -0.628112, -0.743490, -0.459295, -0.486078, -0.825916, -0.459295, -0.326973, -0.873454, -0.459295, -0.161635, -0.888284, -0.459295, 0, -0.873454, -0.459295, 0.161635, -0.825916, -0.459295, 0.326973, -0.743490, -0.459295, 0.486078, -0.628112, -0.459295, 0.628112, -0.486078, -0.459295, 0.743490, -0.326973, -0.459295, 0.825916, -0.161635, -0.459295, 0.873454, 0, -0.459295, 0.888284, 0.161635, -0.459295, 0.873454, 0.326973, -0.459295, 0.825916, 0.486078, -0.459295, 0.743490, 0.628112, -0.459295, 0.628112, 0.743490, -0.459295, 0.486078, 0.825916, -0.459295, 0.326973, 0.873454, -0.459295, 0.161635, 0.888284, -0.459295, 0, 0.873454, -0.459295, -0.161635, 0.825916, -0.459295, -0.326973, 0.743490, -0.459295, -0.486078, 0.628112, -0.459295, -0.628112, 0.486078, -0.459295, -0.743490, 0.326973, -0.459295, -0.825916, 0.161635, -0.459295, -0.873454, 0, -0.459295, -0.888284, 0, -0.368095, -0.929788, -0.169187, -0.368095, -0.914266, -0.342250, -0.368095, -0.864506, -0.508789, -0.368095, -0.778229, -0.657460, -0.368095, -0.657460, -0.778229, -0.368095, -0.508789, -0.864506, -0.368095, -0.342250, -0.914266, -0.368095, -0.169187, -0.929788, -0.368095, 0, -0.914266, -0.368095, 0.169187, -0.864506, -0.368095, 0.342250, -0.778229, -0.368095, 0.508789, -0.657460, -0.368095, 0.657460, -0.508789, -0.368095, 0.778229, -0.342250, -0.368095, 0.864506, -0.169187, -0.368095, 0.914266, 0, -0.368095, 0.929788, 0.169187, -0.368095, 0.914266, 0.342250, -0.368095, 0.864506, 0.508789, -0.368095, 0.778229, 0.657460, -0.368095, 0.657460, 0.778229, -0.368095, 0.508789, 0.864506, -0.368095, 0.342250, 0.914266, -0.368095, 0.169187, 0.929788, -0.368095, 0, 0.914266, -0.368095, -0.169187, 0.864506, -0.368095, -0.342250, 0.778229, -0.368095, -0.508789, 0.657460, -0.368095, -0.657460, 0.508789, -0.368095, -0.778229, 0.342250, -0.368095, -0.864506, 0.169187, -0.368095, -0.914266, 0, -0.368095, -0.929788, 0, -0.275158, -0.961399, -0.174939, -0.275158, -0.945349, -0.353886, -0.275158, -0.893898, -0.526087, -0.275158, -0.804687, -0.679812, -0.275158, -0.679812, -0.804687, -0.275158, -0.526087, -0.893898, -0.275158, -0.353886, -0.945349, -0.275158, -0.174939, -0.961399, -0.275158, 0, -0.945349, -0.275158, 0.174939, -0.893898, -0.275158, 0.353886, -0.804687, -0.275158, 0.526087, -0.679812, -0.275158, 0.679812, -0.526087, -0.275158, 0.804687, -0.353886, -0.275158, 0.893898, -0.174939, -0.275158, 0.945349, 0, -0.275158, 0.961399, 0.174939, -0.275158, 0.945349, 0.353886, -0.275158, 0.893898, 0.526087, -0.275158, 0.804687, 0.679812, -0.275158, 0.679812, 0.804687, -0.275158, 0.526087, 0.893898, -0.275158, 0.353886, 0.945349, -0.275158, 0.174939, 0.961399, -0.275158, 0, 0.945349, -0.275158, -0.174939, 0.893898, -0.275158, -0.353886, 0.804687, -0.275158, -0.526087, 0.679812, -0.275158, -0.679812, 0.526087, -0.275158, -0.804687, 0.353886, -0.275158, -0.893898, 0.174939, -0.275158, -0.945349, 0, -0.275158, -0.961399, 0, -0.181963, -0.983305, -0.178925, -0.181963, -0.966889, -0.361950, -0.181963, -0.914266, -0.538074, -0.181963, -0.823022, -0.695302, -0.181963, -0.695302, -0.823022, -0.181963, -0.538074, -0.914266, -0.181963, -0.361950, -0.966890, -0.181963, -0.178925, -0.983305, -0.181963, 0, -0.966889, -0.181963, 0.178925, -0.914266, -0.181963, 0.361950, -0.823022, -0.181963, 0.538074, -0.695302, -0.181963, 0.695302, -0.538074, -0.181963, 0.823022, -0.361950, -0.181963, 0.914266, -0.178925, -0.181963, 0.966890, 0, -0.181963, 0.983305, 0.178925, -0.181963, 0.966889, 0.361950, -0.181963, 0.914266, 0.538074, -0.181963, 0.823022, 0.695302, -0.181963, 0.695302, 0.823022, -0.181963, 0.538074, 0.914266, -0.181963, 0.361950, 0.966890, -0.181963, 0.178925, 0.983305, -0.181963, 0, 0.966889, -0.181963, -0.178925, 0.914266, -0.181963, -0.361950, 0.823022, -0.181963, -0.538074, 0.695302, -0.181963, -0.695302, 0.538074, -0.181963, -0.823022, 0.361950, -0.181963, -0.914266, 0.178925, -0.181963, -0.966890, 0, -0.181963, -0.983305, 0, -0.089854, -0.995955, -0.181227, -0.089854, -0.979328, -0.366606, -0.089854, -0.926027, -0.544996, -0.089854, -0.833610, -0.704247, -0.089854, -0.704247, -0.833610, -0.089854, -0.544996, -0.926027, -0.089854, -0.366606, -0.979328, -0.089854, -0.181227, -0.995955, -0.089854, 0, -0.979328, -0.089854, 0.181227, -0.926027, -0.089854, 0.366606, -0.833610, -0.089854, 0.544996, -0.704247, -0.089854, 0.704247, -0.544996, -0.089854, 0.833610, -0.366606, -0.089854, 0.926027, -0.181227, -0.089854, 0.979328, 0, -0.089854, 0.995955, 0.181227, -0.089854, 0.979328, 0.366606, -0.089854, 0.926027, 0.544996, -0.089854, 0.833610, 0.704247, -0.089854, 0.704247, 0.833610, -0.089854, 0.544996, 0.926027, -0.089854, 0.366606, 0.979328, -0.089854, 0.181227, 0.995955, -0.089854, 0, 0.979328, -0.089854, -0.181227, 0.926027, -0.089854, -0.366606, 0.833610, -0.089854, -0.544996, 0.704247, -0.089854, -0.704247, 0.544996, -0.089854, -0.833610, 0.366606, -0.089854, -0.926027, 0.181227, -0.089854, -0.979328, 0, -0.089854, -0.995955, 0, 0, -1, -0.181963, 0, -0.983305, -0.368095, 0, -0.929788, -0.547210, 0, -0.836996, -0.707107, 0, -0.707107, -0.836996, 0, -0.547210, -0.929788, 0, -0.368095, -0.983305, 0, -0.181963, -1, 0, 0, -0.983305, 0, 0.181963, -0.929788, 0, 0.368095, -0.836996, 0, 0.547210, -0.707107, 0, 0.707107, -0.547210, 0, 0.836996, -0.368095, 0, 0.929788, -0.181963, 0, 0.983305, 0, 0, 1, 0.181963, 0, 0.983305, 0.368095, 0, 0.929788, 0.547210, 0, 0.836996, 0.707107, 0, 0.707107, 0.836996, 0, 0.547210, 0.929788, 0, 0.368095, 0.983305, 0, 0.181963, 1, 0, 0, 0.983305, 0, -0.181963, 0.929788, 0, -0.368095, 0.836996, 0, -0.547210, 0.707107, 0, -0.707107, 0.547210, 0, -0.836996, 0.368095, 0, -0.929788, 0.181963, 0, -0.983305, 0, 0, -1, 0, 0.089854, -0.995955, -0.181227, 0.089854, -0.979328, -0.366606, 0.089854, -0.926027, -0.544996, 0.089854, -0.833610, -0.704247, 0.089854, -0.704247, -0.833610, 0.089854, -0.544996, -0.926027, 0.089854, -0.366606, -0.979328, 0.089854, -0.181227, -0.995955, 0.089854, 0, -0.979328, 0.089854, 0.181227, -0.926027, 0.089854, 0.366606, -0.833610, 0.089854, 0.544996, -0.704247, 0.089854, 0.704247, -0.544996, 0.089854, 0.833610, -0.366606, 0.089854, 0.926027, -0.181227, 0.089854, 0.979328, 0, 0.089854, 0.995955, 0.181227, 0.089854, 0.979328, 0.366606, 0.089854, 0.926027, 0.544996, 0.089854, 0.833610, 0.704247, 0.089854, 0.704247, 0.833610, 0.089854, 0.544996, 0.926027, 0.089854, 0.366606, 0.979328, 0.089854, 0.181227, 0.995955, 0.089854, 0, 0.979328, 0.089854, -0.181227, 0.926027, 0.089854, -0.366606, 0.833610, 0.089854, -0.544996, 0.704247, 0.089854, -0.704247, 0.544996, 0.089854, -0.833610, 0.366606, 0.089854, -0.926027, 0.181227, 0.089854, -0.979328, 0, 0.089854, -0.995955, 0, 0.181963, -0.983305, -0.178925, 0.181963, -0.966890, -0.361950, 0.181963, -0.914266, -0.538074, 0.181963, -0.823022, -0.695302, 0.181963, -0.695302, -0.823022, 0.181963, -0.538074, -0.914266, 0.181963, -0.361950, -0.966890, 0.181963, -0.178925, -0.983305, 0.181963, 0, -0.966890, 0.181963, 0.178925, -0.914266, 0.181963, 0.361950, -0.823022, 0.181963, 0.538074, -0.695302, 0.181963, 0.695302, -0.538074, 0.181963, 0.823022, -0.361950, 0.181963, 0.914266, -0.178925, 0.181963, 0.966890, 0, 0.181963, 0.983305, 0.178925, 0.181963, 0.966890, 0.361950, 0.181963, 0.914266, 0.538074, 0.181963, 0.823022, 0.695302, 0.181963, 0.695302, 0.823022, 0.181963, 0.538074, 0.914266, 0.181963, 0.361950, 0.966890, 0.181963, 0.178925, 0.983305, 0.181963, 0, 0.966890, 0.181963, -0.178925, 0.914266, 0.181963, -0.361950, 0.823022, 0.181963, -0.538074, 0.695302, 0.181963, -0.695302, 0.538074, 0.181963, -0.823022, 0.361950, 0.181963, -0.914266, 0.178925, 0.181963, -0.966890, 0, 0.181963, -0.983305, 0, 0.275158, -0.961399, -0.174939, 0.275158, -0.945349, -0.353886, 0.275158, -0.893898, -0.526087, 0.275158, -0.804687, -0.679812, 0.275158, -0.679812, -0.804687, 0.275158, -0.526087, -0.893898, 0.275158, -0.353886, -0.945349, 0.275158, -0.174939, -0.961399, 0.275158, 0, -0.945349, 0.275158, 0.174939, -0.893898, 0.275158, 0.353886, -0.804687, 0.275158, 0.526087, -0.679812, 0.275158, 0.679812, -0.526087, 0.275158, 0.804687, -0.353886, 0.275158, 0.893898, -0.174939, 0.275158, 0.945349, 0, 0.275158, 0.961399, 0.174939, 0.275158, 0.945349, 0.353886, 0.275158, 0.893898, 0.526087, 0.275158, 0.804687, 0.679812, 0.275158, 0.679812, 0.804687, 0.275158, 0.526087, 0.893898, 0.275158, 0.353886, 0.945349, 0.275158, 0.174939, 0.961399, 0.275158, 0, 0.945349, 0.275158, -0.174939, 0.893898, 0.275158, -0.353886, 0.804687, 0.275158, -0.526087, 0.679812, 0.275158, -0.679812, 0.526087, 0.275158, -0.804687, 0.353886, 0.275158, -0.893898, 0.174939, 0.275158, -0.945349, 0, 0.275158, -0.961399, 0, 0.368095, -0.929788, -0.169187, 0.368095, -0.914266, -0.342250, 0.368095, -0.864506, -0.508789, 0.368095, -0.778229, -0.657460, 0.368095, -0.657460, -0.778229, 0.368095, -0.508789, -0.864506, 0.368095, -0.342250, -0.914266, 0.368095, -0.169187, -0.929788, 0.368095, 0, -0.914266, 0.368095, 0.169187, -0.864506, 0.368095, 0.342250, -0.778229, 0.368095, 0.508789, -0.657460, 0.368095, 0.657460, -0.508789, 0.368095, 0.778229, -0.342250, 0.368095, 0.864506, -0.169187, 0.368095, 0.914266, 0, 0.368095, 0.929788, 0.169187, 0.368095, 0.914266, 0.342250, 0.368095, 0.864506, 0.508789, 0.368095, 0.778229, 0.657460, 0.368095, 0.657460, 0.778229, 0.368095, 0.508789, 0.864506, 0.368095, 0.342250, 0.914266, 0.368095, 0.169187, 0.929788, 0.368095, 0, 0.914266, 0.368095, -0.169187, 0.864506, 0.368095, -0.342250, 0.778229, 0.368095, -0.508789, 0.657460, 0.368095, -0.657460, 0.508789, 0.368095, -0.778229, 0.342250, 0.368095, -0.864506, 0.169187, 0.368095, -0.914266, 0, 0.368095, -0.929788, 0, 0.459295, -0.888284, -0.161635, 0.459295, -0.873454, -0.326973, 0.459295, -0.825916, -0.486078, 0.459295, -0.743490, -0.628112, 0.459295, -0.628112, -0.743490, 0.459295, -0.486078, -0.825916, 0.459295, -0.326973, -0.873455, 0.459295, -0.161635, -0.888284, 0.459295, 0, -0.873454, 0.459295, 0.161635, -0.825916, 0.459295, 0.326973, -0.743490, 0.459295, 0.486078, -0.628112, 0.459295, 0.628112, -0.486078, 0.459295, 0.743490, -0.326973, 0.459295, 0.825916, -0.161635, 0.459295, 0.873455, 0, 0.459295, 0.888284, 0.161635, 0.459295, 0.873454, 0.326973, 0.459295, 0.825916, 0.486078, 0.459295, 0.743490, 0.628112, 0.459295, 0.628112, 0.743490, 0.459295, 0.486078, 0.825916, 0.459295, 0.326973, 0.873455, 0.459295, 0.161635, 0.888284, 0.459295, 0, 0.873454, 0.459295, -0.161635, 0.825916, 0.459295, -0.326973, 0.743490, 0.459295, -0.486078, 0.628112, 0.459295, -0.628112, 0.486078, 0.459295, -0.743490, 0.326973, 0.459295, -0.825916, 0.161635, 0.459295, -0.873455, 0, 0.459295, -0.888284, 0, 0.547210, -0.836996, -0.152302, 0.547210, -0.823022, -0.308094, 0.547210, -0.778229, -0.458012, 0.547210, -0.700561, -0.591845, 0.547210, -0.591845, -0.700561, 0.547210, -0.458012, -0.778229, 0.547210, -0.308094, -0.823022, 0.547210, -0.152302, -0.836996, 0.547210, 0, -0.823022, 0.547210, 0.152302, -0.778229, 0.547210, 0.308094, -0.700561, 0.547210, 0.458012, -0.591845, 0.547210, 0.591845, -0.458012, 0.547210, 0.700561, -0.308094, 0.547210, 0.778229, -0.152302, 0.547210, 0.823022, 0, 0.547210, 0.836996, 0.152302, 0.547210, 0.823022, 0.308094, 0.547210, 0.778229, 0.458012, 0.547210, 0.700561, 0.591845, 0.547210, 0.591845, 0.700561, 0.547210, 0.458012, 0.778229, 0.547210, 0.308094, 0.823022, 0.547210, 0.152302, 0.836996, 0.547210, 0, 0.823022, 0.547210, -0.152302, 0.778229, 0.547210, -0.308094, 0.700561, 0.547210, -0.458012, 0.591845, 0.547210, -0.591845, 0.458012, 0.547210, -0.700561, 0.308094, 0.547210, -0.778229, 0.152302, 0.547210, -0.823022, 0, 0.547210, -0.836996, 0, 0.630298, -0.776353, -0.141268, 0.630298, -0.763392, -0.285771, 0.630298, -0.721844, -0.424828, 0.630298, -0.649804, -0.548965, 0.630298, -0.548965, -0.649804, 0.630298, -0.424828, -0.721844, 0.630298, -0.285771, -0.763392, 0.630298, -0.141268, -0.776353, 0.630298, 0, -0.763392, 0.630298, 0.141268, -0.721844, 0.630298, 0.285771, -0.649804, 0.630298, 0.424828, -0.548965, 0.630298, 0.548965, -0.424828, 0.630298, 0.649804, -0.285771, 0.630298, 0.721844, -0.141268, 0.630298, 0.763392, 0, 0.630298, 0.776353, 0.141268, 0.630298, 0.763392, 0.285771, 0.630298, 0.721844, 0.424828, 0.630298, 0.649804, 0.548965, 0.630298, 0.548965, 0.649804, 0.630298, 0.424828, 0.721844, 0.630298, 0.285771, 0.763392, 0.630298, 0.141268, 0.776353, 0.630298, 0, 0.763392, 0.630298, -0.141268, 0.721844, 0.630298, -0.285771, 0.649804, 0.630298, -0.424828, 0.548965, 0.630298, -0.548965, 0.424828, 0.630298, -0.649804, 0.285771, 0.630298, -0.721844, 0.141268, 0.630298, -0.763392, 0, 0.630298, -0.776353, 0, 0.707107, -0.707107, -0.128667, 0.707107, -0.695302, -0.260282, 0.707107, -0.657460, -0.386936, 0.707107, -0.591845, -0.500000, 0.707107, -0.500000, -0.591845, 0.707107, -0.386936, -0.657460, 0.707107, -0.260282, -0.695302, 0.707107, -0.128667, -0.707107, 0.707107, 0, -0.695302, 0.707107, 0.128667, -0.657460, 0.707107, 0.260282, -0.591845, 0.707107, 0.386936, -0.500000, 0.707107, 0.500000, -0.386936, 0.707107, 0.591845, -0.260282, 0.707107, 0.657460, -0.128667, 0.707107, 0.695302, 0, 0.707107, 0.707107, 0.128667, 0.707107, 0.695302, 0.260282, 0.707107, 0.657460, 0.386936, 0.707107, 0.591845, 0.500000, 0.707107, 0.500000, 0.591845, 0.707107, 0.386936, 0.657460, 0.707107, 0.260282, 0.695302, 0.707107, 0.128667, 0.707107, 0.707107, 0, 0.695302, 0.707107, -0.128667, 0.657460, 0.707107, -0.260282, 0.591845, 0.707107, -0.386936, 0.500000, 0.707107, -0.500000, 0.386936, 0.707107, -0.591845, 0.260282, 0.707107, -0.657460, 0.128667, 0.707107, -0.695302, 0, 0.707107, -0.707107, 0, 0.776353, -0.630298, -0.114691, 0.776353, -0.619776, -0.232009, 0.776353, -0.586044, -0.344905, 0.776353, -0.527557, -0.445688, 0.776353, -0.445688, -0.527557, 0.776353, -0.344905, -0.586044, 0.776353, -0.232009, -0.619776, 0.776353, -0.114691, -0.630298, 0.776353, 0, -0.619776, 0.776353, 0.114691, -0.586044, 0.776353, 0.232009, -0.527557, 0.776353, 0.344905, -0.445688, 0.776353, 0.445688, -0.344905, 0.776353, 0.527557, -0.232009, 0.776353, 0.586044, -0.114691, 0.776353, 0.619776, 0, 0.776353, 0.630298, 0.114691, 0.776353, 0.619776, 0.232009, 0.776353, 0.586044, 0.344905, 0.776353, 0.527557, 0.445688, 0.776353, 0.445688, 0.527557, 0.776353, 0.344905, 0.586044, 0.776353, 0.232009, 0.619776, 0.776353, 0.114691, 0.630298, 0.776353, 0, 0.619776, 0.776353, -0.114691, 0.586044, 0.776353, -0.232009, 0.527557, 0.776353, -0.344905, 0.445688, 0.776353, -0.445688, 0.344905, 0.776353, -0.527557, 0.232009, 0.776353, -0.586044, 0.114691, 0.776353, -0.619776, 0, 0.776353, -0.630298, 0, 0.836996, -0.547210, -0.099572, 0.836996, -0.538074, -0.201425, 0.836996, -0.508789, -0.299439, 0.836995, -0.458012, -0.386936, 0.836995, -0.386936, -0.458012, 0.836995, -0.299439, -0.508789, 0.836995, -0.201425, -0.538074, 0.836996, -0.099572, -0.547210, 0.836996, 0, -0.538074, 0.836996, 0.099572, -0.508789, 0.836996, 0.201425, -0.458012, 0.836995, 0.299439, -0.386936, 0.836995, 0.386936, -0.299439, 0.836995, 0.458012, -0.201425, 0.836995, 0.508789, -0.099572, 0.836996, 0.538074, 0, 0.836996, 0.547210, 0.099572, 0.836996, 0.538074, 0.201425, 0.836996, 0.508789, 0.299439, 0.836995, 0.458012, 0.386936, 0.836995, 0.386936, 0.458012, 0.836995, 0.299439, 0.508789, 0.836995, 0.201425, 0.538074, 0.836996, 0.099572, 0.547210, 0.836996, 0, 0.538074, 0.836996, -0.099572, 0.508789, 0.836996, -0.201425, 0.458012, 0.836995, -0.299439, 0.386936, 0.836995, -0.386936, 0.299439, 0.836995, -0.458012, 0.201425, 0.836995, -0.508789, 0.099572, 0.836996, -0.538074, 0, 0.836996, -0.547210, 0, 0.888284, -0.459295, -0.083575, 0.888284, -0.451627, -0.169064, 0.888284, -0.427047, -0.251330, 0.888284, -0.384428, -0.324770, 0.888284, -0.324770, -0.384428, 0.888284, -0.251330, -0.427047, 0.888284, -0.169064, -0.451627, 0.888284, -0.083575, -0.459295, 0.888284, 0, -0.451627, 0.888284, 0.083575, -0.427047, 0.888284, 0.169064, -0.384428, 0.888284, 0.251330, -0.324770, 0.888284, 0.324770, -0.251330, 0.888284, 0.384428, -0.169064, 0.888284, 0.427047, -0.083575, 0.888284, 0.451627, 0, 0.888284, 0.459295, 0.083575, 0.888284, 0.451627, 0.169064, 0.888284, 0.427047, 0.251330, 0.888284, 0.384428, 0.324770, 0.888284, 0.324770, 0.384428, 0.888284, 0.251330, 0.427047, 0.888284, 0.169064, 0.451627, 0.888284, 0.083575, 0.459295, 0.888284, 0, 0.451627, 0.888284, -0.083575, 0.427047, 0.888284, -0.169064, 0.384428, 0.888284, -0.251330, 0.324770, 0.888284, -0.324770, 0.251330, 0.888284, -0.384428, 0.169064, 0.888284, -0.427047, 0.083575, 0.888284, -0.451627, 0, 0.888284, -0.459295, 0, 0.929788, -0.368095, -0.066980, 0.929788, -0.361950, -0.135494, 0.929788, -0.342250, -0.201425, 0.929788, -0.308094, -0.260282, 0.929788, -0.260282, -0.308094, 0.929788, -0.201425, -0.342250, 0.929788, -0.135494, -0.361950, 0.929788, -0.066980, -0.368095, 0.929788, 0, -0.361950, 0.929788, 0.066980, -0.342250, 0.929788, 0.135494, -0.308094, 0.929788, 0.201425, -0.260282, 0.929788, 0.260282, -0.201425, 0.929788, 0.308094, -0.135494, 0.929788, 0.342250, -0.066980, 0.929788, 0.361950, 0, 0.929788, 0.368095, 0.066980, 0.929788, 0.361950, 0.135494, 0.929788, 0.342250, 0.201425, 0.929788, 0.308094, 0.260282, 0.929788, 0.260282, 0.308094, 0.929788, 0.201425, 0.342250, 0.929788, 0.135494, 0.361950, 0.929788, 0.066980, 0.368095, 0.929788, 0, 0.361950, 0.929788, -0.066980, 0.342250, 0.929788, -0.135494, 0.308094, 0.929788, -0.201425, 0.260282, 0.929788, -0.260282, 0.201425, 0.929788, -0.308094, 0.135494, 0.929788, -0.342250, 0.066980, 0.929788, -0.361950, 0, 0.929788, -0.368095, 0, 0.961399, -0.275158, -0.050069, 0.961399, -0.270565, -0.101284, 0.961399, -0.255839, -0.150569, 0.961399, -0.230306, -0.194566, 0.961399, -0.194566, -0.230306, 0.961399, -0.150569, -0.255839, 0.961399, -0.101284, -0.270565, 0.961399, -0.050069, -0.275158, 0.961399, 0, -0.270565, 0.961399, 0.050069, -0.255839, 0.961399, 0.101284, -0.230306, 0.961399, 0.150569, -0.194566, 0.961399, 0.194566, -0.150569, 0.961399, 0.230306, -0.101284, 0.961399, 0.255839, -0.050069, 0.961399, 0.270565, 0, 0.961399, 0.275158, 0.050069, 0.961399, 0.270565, 0.101284, 0.961399, 0.255839, 0.150569, 0.961399, 0.230306, 0.194566, 0.961399, 0.194566, 0.230306, 0.961399, 0.150569, 0.255839, 0.961399, 0.101284, 0.270565, 0.961399, 0.050069, 0.275158, 0.961399, 0, 0.270565, 0.961399, -0.050069, 0.255839, 0.961399, -0.101284, 0.230306, 0.961399, -0.150569, 0.194566, 0.961399, -0.194566, 0.150569, 0.961399, -0.230306, 0.101284, 0.961399, -0.255839, 0.050069, 0.961399, -0.270565, 0, 0.961399, -0.275158, 0, 0.983305, -0.181963, -0.033111, 0.983305, -0.178925, -0.066980, 0.983305, -0.169187, -0.099572, 0.983305, -0.152302, -0.128667, 0.983305, -0.128667, -0.152302, 0.983305, -0.099572, -0.169187, 0.983305, -0.066980, -0.178925, 0.983305, -0.033111, -0.181963, 0.983305, 0, -0.178925, 0.983305, 0.033111, -0.169187, 0.983305, 0.066980, -0.152302, 0.983305, 0.099572, -0.128667, 0.983305, 0.128667, -0.099572, 0.983305, 0.152302, -0.066980, 0.983305, 0.169187, -0.033111, 0.983305, 0.178925, 0, 0.983305, 0.181963, 0.033111, 0.983305, 0.178925, 0.066980, 0.983305, 0.169187, 0.099572, 0.983305, 0.152302, 0.128667, 0.983305, 0.128667, 0.152302, 0.983305, 0.099572, 0.169187, 0.983305, 0.066980, 0.178925, 0.983305, 0.033111, 0.181963, 0.983305, 0, 0.178925, 0.983305, -0.033111, 0.169187, 0.983305, -0.066980, 0.152302, 0.983305, -0.099572, 0.128667, 0.983305, -0.128667, 0.099572, 0.983305, -0.152302, 0.066980, 0.983305, -0.169187, 0.033111, 0.983305, -0.178925, 0, 0.983305, -0.181963, 0, 0.995955, -0.089854, -0.016350, 0.995955, -0.088354, -0.033075, 0.995955, -0.083546, -0.049169, 0.995955, -0.075208, -0.063537, 0.995955, -0.063537, -0.075208, 0.995955, -0.049169, -0.083546, 0.995955, -0.033075, -0.088354, 0.995955, -0.016350, -0.089854, 0.995955, 0, -0.088354, 0.995955, 0.016350, -0.083546, 0.995955, 0.033075, -0.075208, 0.995955, 0.049169, -0.063537, 0.995955, 0.063537, -0.049169, 0.995955, 0.075208, -0.033075, 0.995955, 0.083546, -0.016350, 0.995955, 0.088354, 0, 0.995955, 0.089854, 0.016350, 0.995955, 0.088354, 0.033075, 0.995955, 0.083546, 0.049169, 0.995955, 0.075208, 0.063537, 0.995955, 0.063537, 0.075208, 0.995955, 0.049169, 0.083546, 0.995955, 0.033075, 0.088354, 0.995955, 0.016350, 0.089854, 0.995955, 0, 0.088354, 0.995955, -0.016350, 0.083546, 0.995955, -0.033075, 0.075208, 0.995955, -0.049169, 0.063537, 0.995955, -0.063537, 0.049169, 0.995955, -0.075208, 0.033075, 0.995955, -0.083546, 0.016350, 0.995955, -0.088354, 0, 0.995955, -0.089854, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.641960, -0.106933, 0, -1.652970, -0.190984, -0.008952, -1.636925, -0.188915, -0.018108, -1.620512, -0.183523, -0.026920, -1.604718, -0.174625, -0.034786, -1.590618, -0.162454, -0.041176, -1.579165, -0.147680, -0.045741, -1.570983, -0.131295, -0.048373, -1.566264, -0.114403, -0.049195, -1.564792, -0.098000, -0.048373, -1.565286, -0.081692, -0.045741, -1.566869, -0.065101, -0.041176, -1.569615, -0.049239, -0.034786, -1.573458, -0.035196, -0.026920, -1.578189, -0.023925, -0.018108, -1.583489, -0.016035, -0.008952, -1.588996, -0.011692, 0, -1.594380, -0.010647, 0.008952, -1.588996, -0.011692, 0.018108, -1.583489, -0.016035, 0.026920, -1.578189, -0.023925, 0.034786, -1.573458, -0.035196, 0.041176, -1.569615, -0.049239, 0.045741, -1.566869, -0.065101, 0.048373, -1.565286, -0.081692, 0.049195, -1.564792, -0.098000, 0.048373, -1.566264, -0.114403, 0.045741, -1.570983, -0.131295, 0.041176, -1.579165, -0.147680, 0.034786, -1.590618, -0.162454, 0.026920, -1.604718, -0.174625, 0.018108, -1.620512, -0.183523, 0.008952, -1.636925, -0.188915, 0, -1.652970, -0.190984, 0, -1.648545, -0.276767, -0.018861, -1.617642, -0.272632, -0.038154, -1.586031, -0.261772, -0.056720, -1.555612, -0.243808, -0.073293, -1.528456, -0.219209, -0.086757, -1.506397, -0.189331, -0.096375, -1.490638, -0.156179, -0.101922, -1.481550, -0.121988, -0.103653, -1.478714, -0.088777, -0.101922, -1.479666, -0.055746, -0.096375, -1.482716, -0.022135, -0.086757, -1.488004, 0.010010, -0.073293, -1.495405, 0.038480, -0.056720, -1.504518, 0.061344, -0.038154, -1.514725, 0.077366, -0.018861, -1.525332, 0.086208, 0, -1.535702, 0.088369, 0.018861, -1.525332, 0.086208, 0.038154, -1.514725, 0.077366, 0.056720, -1.504518, 0.061344, 0.073293, -1.495405, 0.038480, 0.086757, -1.488004, 0.010010, 0.096375, -1.482716, -0.022135, 0.101922, -1.479666, -0.055746, 0.103653, -1.478714, -0.088777, 0.101922, -1.481550, -0.121988, 0.096375, -1.490639, -0.156179, 0.086757, -1.506397, -0.189331, 0.073293, -1.528456, -0.219209, 0.056720, -1.555612, -0.243808, 0.038154, -1.586031, -0.261772, 0.018861, -1.617642, -0.272632, 0, -1.648545, -0.276767, 0, -1.627240, -0.363158, -0.029672, -1.583007, -0.356994, -0.060025, -1.537761, -0.340663, -0.089233, -1.494220, -0.313585, -0.115307, -1.455351, -0.276465, -0.136488, -1.423777, -0.231348, -0.151619, -1.401220, -0.181262, -0.160346, -1.388211, -0.129585, -0.163069, -1.384153, -0.079372, -0.160346, -1.385515, -0.029419, -0.151619, -1.389880, 0.021428, -0.136488, -1.397449, 0.070073, -0.115307, -1.408044, 0.113174, -0.089233, -1.421087, 0.147812, -0.060025, -1.435697, 0.172109, -0.029672, -1.450879, 0.185552, 0, -1.465722, 0.188890, 0.029672, -1.450879, 0.185552, 0.060025, -1.435697, 0.172109, 0.089233, -1.421087, 0.147812, 0.115307, -1.408044, 0.113174, 0.136488, -1.397449, 0.070073, 0.151619, -1.389880, 0.021428, 0.160346, -1.385515, -0.029419, 0.163069, -1.384153, -0.079372, 0.160346, -1.388211, -0.129585, 0.151619, -1.401220, -0.181262, 0.136488, -1.423777, -0.231348, 0.115307, -1.455351, -0.276465, 0.089233, -1.494220, -0.313585, 0.060025, -1.537761, -0.340663, 0.029672, -1.583007, -0.356994, 0, -1.627240, -0.363158, 0, -1.587951, -0.448876, -0.041296, -1.532251, -0.440754, -0.083538, -1.475275, -0.419032, -0.124187, -1.420448, -0.382930, -0.160475, -1.371502, -0.333381, -0.189953, -1.331743, -0.273113, -0.211012, -1.303338, -0.206174, -0.223158, -1.286956, -0.137078, -0.226947, -1.281846, -0.069917, -0.223158, -1.283561, -0.003082, -0.211012, -1.289058, 0.064967, -0.189953, -1.298589, 0.130093, -0.160475, -1.311931, 0.187822, -0.124187, -1.328354, 0.234245, -0.083538, -1.346752, 0.266846, -0.041296, -1.365871, 0.284929, 0, -1.384561, 0.289494, 0.041296, -1.365871, 0.284929, 0.083538, -1.346752, 0.266846, 0.124187, -1.328354, 0.234245, 0.160475, -1.311931, 0.187822, 0.189953, -1.298589, 0.130093, 0.211012, -1.289058, 0.064967, 0.223158, -1.283561, -0.003082, 0.226947, -1.281846, -0.069917, 0.223158, -1.286956, -0.137078, 0.211012, -1.303338, -0.206174, 0.189953, -1.331743, -0.273113, 0.160475, -1.371502, -0.333381, 0.124187, -1.420448, -0.382930, 0.083538, -1.475276, -0.419032, 0.041296, -1.532252, -0.440754, 0, -1.587951, -0.448876, 0, -1.530026, -0.532527, -0.053606, -1.465033, -0.522552, -0.108440, -1.398552, -0.495613, -0.161207, -1.334577, -0.450723, -0.208313, -1.277467, -0.389039, -0.246578, -1.231074, -0.313953, -0.273914, -1.197931, -0.230510, -0.289681, -1.178816, -0.144342, -0.294599, -1.172853, -0.060556, -0.289680, -1.174854, 0.022849, -0.273914, -1.181268, 0.107796, -0.246578, -1.192389, 0.189123, -0.208313, -1.207957, 0.261247, -0.161207, -1.227120, 0.319284, -0.108440, -1.248587, 0.360088, -0.053606, -1.270895, 0.382783, 0, -1.292704, 0.388607, 0.053606, -1.270895, 0.382782, 0.108440, -1.248587, 0.360088, 0.161207, -1.227120, 0.319284, 0.208313, -1.207957, 0.261247, 0.246578, -1.192389, 0.189123, 0.273914, -1.181268, 0.107796, 0.289681, -1.174854, 0.022849, 0.294599, -1.172853, -0.060556, 0.289680, -1.178816, -0.144342, 0.273914, -1.197931, -0.230510, 0.246578, -1.231074, -0.313953, 0.208313, -1.277467, -0.389039, 0.161207, -1.334577, -0.450723, 0.108440, -1.398552, -0.495613, 0.053606, -1.465033, -0.522553, 0, -1.530026, -0.532527, 0, -1.453346, -0.612665, -0.066445, -1.381505, -0.600980, -0.134413, -1.308019, -0.569087, -0.199818, -1.237302, -0.515800, -0.258206, -1.174173, -0.442483, -0.305636, -1.122892, -0.353166, -0.339520, -1.086256, -0.253852, -0.359063, -1.065127, -0.151249, -0.365159, -1.058536, -0.051444, -0.359063, -1.060748, 0.047941, -0.339520, -1.067838, 0.149195, -0.305636, -1.080131, 0.246169, -0.258206, -1.097339, 0.332212, -0.199818, -1.118522, 0.401498, -0.134413, -1.142251, 0.450269, -0.066445, -1.166910, 0.477469, 0, -1.191016, 0.484567, 0.066445, -1.166910, 0.477469, 0.134413, -1.142251, 0.450269, 0.199818, -1.118522, 0.401498, 0.258206, -1.097339, 0.332212, 0.305636, -1.080131, 0.246169, 0.339520, -1.067838, 0.149195, 0.359063, -1.060748, 0.047941, 0.365159, -1.058536, -0.051444, 0.359063, -1.065127, -0.151249, 0.339520, -1.086256, -0.253852, 0.305636, -1.122892, -0.353166, 0.258206, -1.174173, -0.442483, 0.199818, -1.237302, -0.515800, 0.134413, -1.308019, -0.569087, 0.066445, -1.381505, -0.600980, 0, -1.453346, -0.612665, 0, -1.358391, -0.687864, -0.079629, -1.282353, -0.674643, -0.161082, -1.204573, -0.638151, -0.239465, -1.129726, -0.577007, -0.309438, -1.062909, -0.492767, -0.366279, -1.008631, -0.390058, -0.406886, -0.969855, -0.275786, -0.430306, -0.947492, -0.157674, -0.437611, -0.940515, -0.042735, -0.430306, -0.942856, 0.071758, -0.406886, -0.950360, 0.188442, -0.366279, -0.963372, 0.300238, -0.309438, -0.981585, 0.399481, -0.239465, -1.004006, 0.479454, -0.161082, -1.029121, 0.535818, -0.079629, -1.055220, 0.567343, 0, -1.080735, 0.575709, 0.079629, -1.055220, 0.567343, 0.161082, -1.029121, 0.535818, 0.239465, -1.004006, 0.479454, 0.309438, -0.981585, 0.399481, 0.366279, -0.963372, 0.300238, 0.406886, -0.950360, 0.188442, 0.430306, -0.942856, 0.071758, 0.437611, -0.940515, -0.042735, 0.430306, -0.947492, -0.157674, 0.406886, -0.969855, -0.275786, 0.366279, -1.008631, -0.390058, 0.309438, -1.062908, -0.492767, 0.239465, -1.129725, -0.577007, 0.161082, -1.204573, -0.638151, 0.079629, -1.282353, -0.674643, 0, -1.358391, -0.687864, 0, -1.246247, -0.756795, -0.092953, -1.168795, -0.742241, -0.188036, -1.089569, -0.701587, -0.279535, -1.013329, -0.633267, -0.361216, -0.945269, -0.539006, -0.427568, -0.889983, -0.423980, -0.474970, -0.850486, -0.295924, -0.502308, -0.827706, -0.163501, -0.510837, -0.820600, -0.034582, -0.502308, -0.822985, 0.093884, -0.474970, -0.830628, 0.224853, -0.427568, -0.843882, 0.350386, -0.361216, -0.862433, 0.461882, -0.279535, -0.885271, 0.551797, -0.188036, -0.910854, 0.615248, -0.092953, -0.937438, 0.650843, 0, -0.963428, 0.660451, 0.092953, -0.937438, 0.650843, 0.188036, -0.910854, 0.615248, 0.279535, -0.885271, 0.551797, 0.361216, -0.862433, 0.461882, 0.427568, -0.843882, 0.350386, 0.474970, -0.830628, 0.224853, 0.502308, -0.822984, 0.093884, 0.510837, -0.820600, -0.034582, 0.502308, -0.827706, -0.163501, 0.474970, -0.850486, -0.295924, 0.427568, -0.889983, -0.423980, 0.361216, -0.945269, -0.539006, 0.279535, -1.013329, -0.633267, 0.188036, -1.089569, -0.701587, 0.092953, -1.168795, -0.742241, 0, -1.246247, -0.756795, 0, -1.118575, -0.818301, -0.106206, -1.042537, -0.802641, -0.214845, -0.964757, -0.758333, -0.319388, -0.889909, -0.683637, -0.412715, -0.823092, -0.580426, -0.488526, -0.768815, -0.454363, -0.542686, -0.730039, -0.313930, -0.573922, -0.707675, -0.168632, -0.583666, -0.700699, -0.027117, -0.573922, -0.703040, 0.113952, -0.542686, -0.710544, 0.257822, -0.488526, -0.723555, 0.395779, -0.412715, -0.741768, 0.518375, -0.319388, -0.764189, 0.617320, -0.214845, -0.789305, 0.687236, -0.106206, -0.815404, 0.726578, 0, -0.840919, 0.737382, 0.106206, -0.815404, 0.726578, 0.214845, -0.789305, 0.687236, 0.319388, -0.764189, 0.617320, 0.412715, -0.741768, 0.518375, 0.488526, -0.723555, 0.395779, 0.542686, -0.710544, 0.257822, 0.573922, -0.703040, 0.113952, 0.583666, -0.700699, -0.027117, 0.573922, -0.707675, -0.168633, 0.542686, -0.730039, -0.313930, 0.488526, -0.768815, -0.454363, 0.412715, -0.823092, -0.580426, 0.319388, -0.889909, -0.683637, 0.214845, -0.964757, -0.758333, 0.106206, -1.042537, -0.802641, 0, -1.118575, -0.818301, 0, -0.977530, -0.871463, -0.119176, -0.905689, -0.854940, -0.241082, -0.832202, -0.807539, -0.358392, -0.761486, -0.727362, -0.463116, -0.698357, -0.616405, -0.548186, -0.647075, -0.480752, -0.608960, -0.610440, -0.329533, -0.644010, -0.589311, -0.172992, -0.654945, -0.582719, -0.020456, -0.644010, -0.584931, 0.131659, -0.608960, -0.592021, 0.286851, -0.548186, -0.604314, 0.435731, -0.463116, -0.621522, 0.568109, -0.358392, -0.642705, 0.675035, -0.241082, -0.666434, 0.750696, -0.119176, -0.691093, 0.793405, 0, -0.715199, 0.805340, 0.119176, -0.691093, 0.793405, 0.241082, -0.666434, 0.750696, 0.358392, -0.642705, 0.675035, 0.463116, -0.621522, 0.568109, 0.548186, -0.604314, 0.435731, 0.608960, -0.592021, 0.286851, 0.644010, -0.584931, 0.131659, 0.654945, -0.582719, -0.020456, 0.644010, -0.589311, -0.172992, 0.608960, -0.610440, -0.329533, 0.548186, -0.647075, -0.480752, 0.463116, -0.698357, -0.616405, 0.358392, -0.761486, -0.727362, 0.241082, -0.832202, -0.807539, 0.119176, -0.905689, -0.854940, 0, -0.977530, -0.871463, 0, -0.825642, -0.915643, -0.131666, -0.760650, -0.898507, -0.266349, -0.694169, -0.848609, -0.395954, -0.630194, -0.763912, -0.511654, -0.573083, -0.646507, -0.605640, -0.526690, -0.502827, -0.672784, -0.493547, -0.342546, -0.711508, -0.474432, -0.176530, -0.723588, -0.468469, -0.014683, -0.711508, -0.470470, 0.146783, -0.672784, -0.476884, 0.311578, -0.605640, -0.488006, 0.469743, -0.511654, -0.503573, 0.610461, -0.395954, -0.522737, 0.724219, -0.266349, -0.544204, 0.804831, -0.131666, -0.566512, 0.850483, 0, -0.588320, 0.863469, 0.131666, -0.566512, 0.850483, 0.266349, -0.544204, 0.804831, 0.395954, -0.522737, 0.724219, 0.511654, -0.503573, 0.610461, 0.605640, -0.488006, 0.469743, 0.672784, -0.476885, 0.311578, 0.711508, -0.470470, 0.146783, 0.723588, -0.468469, -0.014683, 0.711508, -0.474432, -0.176530, 0.672784, -0.493547, -0.342546, 0.605640, -0.526690, -0.502827, 0.511654, -0.573083, -0.646507, 0.395954, -0.630194, -0.763912, 0.266349, -0.694169, -0.848609, 0.131666, -0.760650, -0.898507, 0, -0.825642, -0.915643, 0, -0.665673, -0.950506, -0.143503, -0.609973, -0.933006, -0.290294, -0.552997, -0.881225, -0.431552, -0.498169, -0.793001, -0.557653, -0.449224, -0.670495, -0.660088, -0.409464, -0.520414, -0.733268, -0.381060, -0.352866, -0.775474, -0.364678, -0.179222, -0.788640, -0.359568, -0.009854, -0.775474, -0.361282, 0.159189, -0.733268, -0.366779, 0.331787, -0.660088, -0.376311, 0.497520, -0.557653, -0.389652, 0.645063, -0.431552, -0.406076, 0.764443, -0.290294, -0.424474, 0.849166, -0.143503, -0.443592, 0.897309, 0, -0.462283, 0.911251, 0.143503, -0.443592, 0.897309, 0.290294, -0.424474, 0.849166, 0.431552, -0.406076, 0.764443, 0.557653, -0.389652, 0.645063, 0.660088, -0.376311, 0.497520, 0.733268, -0.366779, 0.331787, 0.775474, -0.361282, 0.159189, 0.788640, -0.359568, -0.009854, 0.775474, -0.364678, -0.179222, 0.733268, -0.381060, -0.352867, 0.660088, -0.409464, -0.520414, 0.557653, -0.449224, -0.670495, 0.431552, -0.498169, -0.793001, 0.290294, -0.552997, -0.881225, 0.143503, -0.609973, -0.933006, 0, -0.665673, -0.950506, 0, -0.500460, -0.976017, -0.154543, -0.456227, -0.958396, -0.312626, -0.410981, -0.905340, -0.464750, -0.367441, -0.814583, -0.600552, -0.328572, -0.688329, -0.710868, -0.296997, -0.533484, -0.789678, -0.274441, -0.360482, -0.835130, -0.261431, -0.181074, -0.849309, -0.257373, -0.005990, -0.835130, -0.258735, 0.168834, -0.789678, -0.263100, 0.347411, -0.710868, -0.270669, 0.518972, -0.600552, -0.281264, 0.671802, -0.464750, -0.294307, 0.795574, -0.312626, -0.308917, 0.883550, -0.154543, -0.324099, 0.933717, 0, -0.338942, 0.948513, 0.154543, -0.324099, 0.933717, 0.312626, -0.308917, 0.883550, 0.464750, -0.294307, 0.795574, 0.600552, -0.281264, 0.671802, 0.710868, -0.270669, 0.518972, 0.789678, -0.263100, 0.347411, 0.835130, -0.258735, 0.168834, 0.849309, -0.257373, -0.005990, 0.835130, -0.261431, -0.181074, 0.789678, -0.274441, -0.360482, 0.710868, -0.296997, -0.533484, 0.600552, -0.328572, -0.688329, 0.464750, -0.367441, -0.814583, 0.312626, -0.410981, -0.905339, 0.154543, -0.456227, -0.958396, 0, -0.500460, -0.976017, 0, -0.332773, -0.992419, -0.164676, -0.301870, -0.974907, -0.333124, -0.270259, -0.921161, -0.495222, -0.239840, -0.828838, -0.639928, -0.212685, -0.700154, -0.757477, -0.190626, -0.542143, -0.841454, -0.174867, -0.365459, -0.889886, -0.165778, -0.182112, -0.904995, -0.162942, -0.003087, -0.889886, -0.163894, 0.175758, -0.841454, -0.166944, 0.358525, -0.757477, -0.172232, 0.534202, -0.639928, -0.179634, 0.690804, -0.495222, -0.188746, 0.817754, -0.333124, -0.198953, 0.908135, -0.164676, -0.209560, 0.959862, 0, -0.219930, 0.975401, 0.164676, -0.209560, 0.959862, 0.333124, -0.198953, 0.908135, 0.495222, -0.188746, 0.817754, 0.639928, -0.179634, 0.690804, 0.757477, -0.172232, 0.534202, 0.841454, -0.166944, 0.358525, 0.889886, -0.163894, 0.175758, 0.904995, -0.162942, -0.003087, 0.889886, -0.165778, -0.182112, 0.841454, -0.174867, -0.365459, 0.757477, -0.190626, -0.542143, 0.639928, -0.212685, -0.700154, 0.495222, -0.239840, -0.828838, 0.333124, -0.270259, -0.921161, 0.164676, -0.301870, -0.974907, 0, -0.332773, -0.992419, 0, -0.165189, -1.000193, -0.173828, -0.149144, -0.982996, -0.351639, -0.132731, -0.929113, -0.522747, -0.116937, -0.836135, -0.675496, -0.102838, -0.706271, -0.799578, -0.091384, -0.546615, -0.888222, -0.083202, -0.367934, -0.939347, -0.078483, -0.182388, -0.955295, -0.077011, -0.001108, -0.939347, -0.077505, 0.180077, -0.888222, -0.079088, 0.365322, -0.799578, -0.081834, 0.543480, -0.675496, -0.085677, 0.702406, -0.522747, -0.090408, 0.831369, -0.351639, -0.095708, 0.923338, -0.173828, -0.101215, 0.976173, 0, -0.106599, 0.992345, 0.173828, -0.101215, 0.976173, 0.351639, -0.095708, 0.923338, 0.522747, -0.090408, 0.831369, 0.675496, -0.085677, 0.702406, 0.799578, -0.081834, 0.543480, 0.888222, -0.079088, 0.365322, 0.939347, -0.077505, 0.180077, 0.955295, -0.077011, -0.001108, 0.939347, -0.078483, -0.182388, 0.888222, -0.083202, -0.367934, 0.799578, -0.091384, -0.546615, 0.675496, -0.102838, -0.706271, 0.522747, -0.116937, -0.836135, 0.351639, -0.132731, -0.929113, 0.173828, -0.149144, -0.982996, 0, -0.165189, -1.000193, 0, 0, -1, -0.181963, 0, -0.983305, -0.368095, 0, -0.929788, -0.547210, 0, -0.836996, -0.707107, 0, -0.707107, -0.836996, 0, -0.547210, -0.929788, 0, -0.368095, -0.983305, 0, -0.181963, -1, 0, 0, -0.983305, 0, 0.181963, -0.929788, 0, 0.368095, -0.836996, 0, 0.547210, -0.707107, 0, 0.707107, -0.547210, 0, 0.836996, -0.368095, 0, 0.929788, -0.181963, 0, 0.983305, 0, 0, 1, 0.181963, 0, 0.983305, 0.368095, 0, 0.929788, 0.547210, 0, 0.836996, 0.707107, 0, 0.707107, 0.836996, 0, 0.547210, 0.929788, 0, 0.368095, 0.983305, 0, 0.181963, 1, 0, 0, 0.983305, 0, -0.181963, 0.929788, 0, -0.368095, 0.836996, 0, -0.547210, 0.707107, 0, -0.707107, 0.547210, 0, -0.836996, 0.368095, 0, -0.929788, 0.181963, 0, -0.983305, 0, 0, -1, 0, 0.089854, -0.995955, -0.206431, 0.111571, -0.979328, -0.417591, 0.133786, -0.926027, -0.620790, 0.155163, -0.833610, -0.802188, 0.174246, -0.704247, -0.949542, 0.189748, -0.544996, -1.054813, 0.200822, -0.366606, -1.115526, 0.207210, -0.181227, -1.134465, 0.209202, 0, -1.115526, 0.207210, 0.181227, -1.054813, 0.200822, 0.366606, -0.949542, 0.189748, 0.544996, -0.802188, 0.174246, 0.704247, -0.620790, 0.155163, 0.833610, -0.417591, 0.133786, 0.926027, -0.206431, 0.111571, 0.979328, 0, 0.089854, 0.995955, 0.206431, 0.111571, 0.979328, 0.417591, 0.133786, 0.926027, 0.620790, 0.155163, 0.833610, 0.802188, 0.174246, 0.704247, 0.949542, 0.189748, 0.544996, 1.054813, 0.200822, 0.366606, 1.115526, 0.207210, 0.181227, 1.134465, 0.209202, 0, 1.115526, 0.207210, -0.181227, 1.054813, 0.200822, -0.366606, 0.949542, 0.189748, -0.544996, 0.802188, 0.174246, -0.704247, 0.620790, 0.155163, -0.833610, 0.417591, 0.133786, -0.926027, 0.206431, 0.111571, -0.979328, 0, 0.089854, -0.995955, 0, 0.181963, -0.983305, -0.227468, 0.223790, -0.966890, -0.460146, 0.266575, -0.914266, -0.684054, 0.307746, -0.823022, -0.883937, 0.344501, -0.695302, -1.046308, 0.374357, -0.538074, -1.162306, 0.395687, -0.361950, -1.229206, 0.407989, -0.178925, -1.250076, 0.411826, 0, -1.229206, 0.407989, 0.178925, -1.162306, 0.395687, 0.361950, -1.046308, 0.374357, 0.538074, -0.883937, 0.344501, 0.695302, -0.684054, 0.307746, 0.823022, -0.460146, 0.266575, 0.914266, -0.227468, 0.223790, 0.966890, 0, 0.181963, 0.983305, 0.227468, 0.223790, 0.966890, 0.460146, 0.266575, 0.914266, 0.684054, 0.307746, 0.823022, 0.883937, 0.344501, 0.695302, 1.046308, 0.374357, 0.538074, 1.162306, 0.395687, 0.361950, 1.229206, 0.407989, 0.178925, 1.250076, 0.411826, 0, 1.229206, 0.407989, -0.178925, 1.162306, 0.395687, -0.361950, 1.046308, 0.374357, -0.538074, 0.883937, 0.344501, -0.695302, 0.684054, 0.307746, -0.823022, 0.460146, 0.266575, -0.914266, 0.227468, 0.223790, -0.966890, 0, 0.181963, -0.983305, 0, 0.275158, -0.961399, -0.244420, 0.335027, -0.945349, -0.494440, 0.396267, -0.893898, -0.735035, 0.455198, -0.804687, -0.949815, 0.507807, -0.679812, -1.124287, 0.550542, -0.526087, -1.248930, 0.581072, -0.353886, -1.320816, 0.598680, -0.174939, -1.343241, 0.604173, 0, -1.320816, 0.598680, 0.174939, -1.248930, 0.581072, 0.353886, -1.124287, 0.550542, 0.526087, -0.949815, 0.507807, 0.679812, -0.735035, 0.455198, 0.804687, -0.494440, 0.396267, 0.893898, -0.244420, 0.335027, 0.945349, 0, 0.275158, 0.961399, 0.244420, 0.335027, 0.945349, 0.494440, 0.396267, 0.893898, 0.735035, 0.455198, 0.804687, 0.949815, 0.507807, 0.679812, 1.124287, 0.550542, 0.526087, 1.248930, 0.581072, 0.353886, 1.320816, 0.598680, 0.174939, 1.343241, 0.604173, 0, 1.320816, 0.598680, -0.174939, 1.248930, 0.581072, -0.353886, 1.124287, 0.550542, -0.526087, 0.949815, 0.507807, -0.679812, 0.735035, 0.455198, -0.804687, 0.494440, 0.396267, -0.893898, 0.244420, 0.335027, -0.945349, 0, 0.275158, -0.961399, 0, 0.368095, -0.929788, -0.256681, 0.443484, -0.914266, -0.519242, 0.520600, -0.864506, -0.771905, 0.594809, -0.778229, -0.997459, 0.661056, -0.657460, -1.180683, 0.714870, -0.508789, -1.311579, 0.753315, -0.342250, -1.387071, 0.775488, -0.169187, -1.410621, 0.782404, 0, -1.387071, 0.775488, 0.169187, -1.311578, 0.753315, 0.342250, -1.180683, 0.714870, 0.508789, -0.997459, 0.661056, 0.657460, -0.771905, 0.594809, 0.778229, -0.519242, 0.520600, 0.864506, -0.256681, 0.443484, 0.914266, 0, 0.368095, 0.929788, 0.256681, 0.443484, 0.914266, 0.519242, 0.520600, 0.864506, 0.771905, 0.594809, 0.778229, 0.997459, 0.661056, 0.657460, 1.180683, 0.714870, 0.508789, 1.311579, 0.753315, 0.342250, 1.387071, 0.775488, 0.169187, 1.410621, 0.782404, 0, 1.387071, 0.775488, -0.169187, 1.311578, 0.753315, -0.342250, 1.180683, 0.714870, -0.508789, 0.997459, 0.661056, -0.657460, 0.771905, 0.594809, -0.778229, 0.519242, 0.520600, -0.864506, 0.256681, 0.443484, -0.914266, 0, 0.368095, -0.929788, 0, 0.459295, -0.888284, -0.263725, 0.547261, -0.873454, -0.533492, 0.637242, -0.825916, -0.793089, 0.723832, -0.743490, -1.024833, 0.801130, -0.628112, -1.213085, 0.863922, -0.486078, -1.347573, 0.908781, -0.326973, -1.425137, 0.934652, -0.161635, -1.449333, 0.942723, 0, -1.425137, 0.934652, 0.161635, -1.347573, 0.908781, 0.326973, -1.213085, 0.863922, 0.486078, -1.024833, 0.801130, 0.628112, -0.793089, 0.723832, 0.743490, -0.533492, 0.637242, 0.825916, -0.263725, 0.547261, 0.873455, 0, 0.459295, 0.888284, 0.263725, 0.547261, 0.873454, 0.533492, 0.637242, 0.825916, 0.793089, 0.723832, 0.743490, 1.024833, 0.801130, 0.628112, 1.213085, 0.863922, 0.486078, 1.347573, 0.908781, 0.326973, 1.425137, 0.934652, 0.161635, 1.449333, 0.942723, 0, 1.425137, 0.934652, -0.161635, 1.347573, 0.908781, -0.326973, 1.213085, 0.863922, -0.486078, 1.024833, 0.801130, -0.628112, 0.793089, 0.723832, -0.743490, 0.533492, 0.637242, -0.825916, 0.263725, 0.547261, -0.873455, 0, 0.459295, -0.888284, 0, 0.547210, -0.836996, -0.265150, 0.644446, -0.823022, -0.536375, 0.743909, -0.778229, -0.797375, 0.839623, -0.700561, -1.030372, 0.925067, -0.591845, -1.219641, 0.994476, -0.458012, -1.354856, 1.044061, -0.308094, -1.432839, 1.072659, -0.152302, -1.457166, 1.081580, 0, -1.432840, 1.072659, 0.152302, -1.354856, 1.044061, 0.308094, -1.219641, 0.994476, 0.458012, -1.030372, 0.925067, 0.591845, -0.797375, 0.839623, 0.700561, -0.536375, 0.743909, 0.778229, -0.265150, 0.644446, 0.823022, 0, 0.547210, 0.836996, 0.265150, 0.644446, 0.823022, 0.536375, 0.743909, 0.778229, 0.797375, 0.839623, 0.700561, 1.030372, 0.925067, 0.591845, 1.219641, 0.994476, 0.458012, 1.354856, 1.044061, 0.308094, 1.432839, 1.072659, 0.152302, 1.457166, 1.081580, 0, 1.432840, 1.072659, -0.152302, 1.354856, 1.044061, -0.308094, 1.219641, 0.994476, -0.458012, 1.030372, 0.925067, -0.591845, 0.797375, 0.839623, -0.700561, 0.536375, 0.743909, -0.778229, 0.265150, 0.644446, -0.823022, 0, 0.547210, -0.836996, 0, 0.630298, -0.776353, -0.260708, 0.733215, -0.763392, -0.527390, 0.838489, -0.721844, -0.784018, 0.939794, -0.649804, -1.013111, 1.030231, -0.548965, -1.199210, 1.103694, -0.424828, -1.332159, 1.156177, -0.285771, -1.408836, 1.186445, -0.141268, -1.432755, 1.195888, 0, -1.408836, 1.186445, 0.141268, -1.332159, 1.156177, 0.285771, -1.199210, 1.103694, 0.424828, -1.013111, 1.030230, 0.548965, -0.784018, 0.939794, 0.649804, -0.527390, 0.838489, 0.721844, -0.260708, 0.733215, 0.763392, 0, 0.630298, 0.776353, 0.260708, 0.733215, 0.763392, 0.527390, 0.838489, 0.721844, 0.784018, 0.939794, 0.649804, 1.013111, 1.030231, 0.548965, 1.199210, 1.103694, 0.424828, 1.332159, 1.156177, 0.285771, 1.408836, 1.186445, 0.141268, 1.432755, 1.195888, 0, 1.408836, 1.186445, -0.141268, 1.332159, 1.156177, -0.285771, 1.199210, 1.103694, -0.424828, 1.013111, 1.030230, -0.548965, 0.784018, 0.939794, -0.649804, 0.527390, 0.838489, -0.721844, 0.260708, 0.733215, -0.763392, 0, 0.630298, -0.776353, 0, 0.707107, -0.707107, -0.250329, 0.811937, -0.695302, -0.506394, 0.919169, -0.657460, -0.752805, 1.022359, -0.591845, -0.972778, 1.114476, -0.500000, -1.151468, 1.189306, -0.386936, -1.279124, 1.242765, -0.260282, -1.352749, 1.273596, -0.128667, -1.375716, 1.283214, 0, -1.352749, 1.273596, 0.128667, -1.279124, 1.242765, 0.260282, -1.151468, 1.189306, 0.386936, -0.972778, 1.114476, 0.500000, -0.752805, 1.022359, 0.591845, -0.506394, 0.919169, 0.657460, -0.250329, 0.811937, 0.695302, 0, 0.707107, 0.707107, 0.250329, 0.811937, 0.695302, 0.506394, 0.919169, 0.657460, 0.752805, 1.022359, 0.591845, 0.972778, 1.114476, 0.500000, 1.151468, 1.189306, 0.386936, 1.279124, 1.242765, 0.260282, 1.352749, 1.273596, 0.128667, 1.375716, 1.283214, 0, 1.352749, 1.273596, -0.128667, 1.279124, 1.242765, -0.260282, 1.151468, 1.189306, -0.386936, 0.972778, 1.114476, -0.500000, 0.752805, 1.022359, -0.591845, 0.506394, 0.919169, -0.657460, 0.250329, 0.811937, -0.695302, 0, 0.707107, -0.707107, 0, 0.776353, -0.630298, -0.234132, 0.879270, -0.619776, -0.473627, 0.984544, -0.586044, -0.704095, 1.085850, -0.527557, -0.909834, 1.176286, -0.445688, -1.076962, 1.249749, -0.344905, -1.196359, 1.302232, -0.232009, -1.265219, 1.332500, -0.114691, -1.286700, 1.341943, 0, -1.265219, 1.332500, 0.114691, -1.196359, 1.302232, 0.232009, -1.076962, 1.249749, 0.344905, -0.909834, 1.176286, 0.445688, -0.704095, 1.085850, 0.527557, -0.473627, 0.984544, 0.586044, -0.234132, 0.879270, 0.619776, 0, 0.776353, 0.630298, 0.234132, 0.879270, 0.619776, 0.473627, 0.984544, 0.586044, 0.704095, 1.085850, 0.527557, 0.909834, 1.176286, 0.445688, 1.076962, 1.249749, 0.344905, 1.196359, 1.302232, 0.232009, 1.265219, 1.332500, 0.114691, 1.286700, 1.341943, 0, 1.265219, 1.332500, -0.114691, 1.196359, 1.302232, -0.232009, 1.076962, 1.249749, -0.344905, 0.909834, 1.176286, -0.445688, 0.704095, 1.085850, -0.527557, 0.473627, 0.984544, -0.586044, 0.234132, 0.879270, -0.619776, 0, 0.776353, -0.630298, 0, 0.836996, -0.547210, -0.212420, 0.934231, -0.538074, -0.429706, 1.033695, -0.508789, -0.638802, 1.129409, -0.458012, -0.825462, 1.214853, -0.386936, -0.977092, 1.284261, -0.299439, -1.085416, 1.333847, -0.201425, -1.147891, 1.362445, -0.099572, -1.167380, 1.371366, 0, -1.147891, 1.362445, 0.099572, -1.085417, 1.333847, 0.201425, -0.977092, 1.284261, 0.299439, -0.825462, 1.214853, 0.386936, -0.638802, 1.129408, 0.458012, -0.429706, 1.033695, 0.508789, -0.212420, 0.934231, 0.538074, 0, 0.836996, 0.547210, 0.212420, 0.934231, 0.538074, 0.429706, 1.033695, 0.508789, 0.638802, 1.129409, 0.458012, 0.825462, 1.214853, 0.386936, 0.977092, 1.284261, 0.299439, 1.085416, 1.333847, 0.201425, 1.147891, 1.362445, 0.099572, 1.167380, 1.371366, 0, 1.147891, 1.362445, -0.099572, 1.085417, 1.333847, -0.201425, 0.977092, 1.284261, -0.299439, 0.825462, 1.214853, -0.386936, 0.638802, 1.129408, -0.458012, 0.429706, 1.033695, -0.508789, 0.212420, 0.934231, -0.538074, 0, 0.836996, -0.547210, 0, 0.888284, -0.459295, -0.185665, 0.976250, -0.451627, -0.375583, 1.066232, -0.427047, -0.558342, 1.152821, -0.384428, -0.721492, 1.230120, -0.324770, -0.854023, 1.292912, -0.251330, -0.948704, 1.337770, -0.169064, -1.003309, 1.363642, -0.083575, -1.020344, 1.371712, 0, -1.003309, 1.363642, 0.083575, -0.948704, 1.337770, 0.169064, -0.854023, 1.292912, 0.251330, -0.721492, 1.230120, 0.324770, -0.558342, 1.152821, 0.384428, -0.375583, 1.066232, 0.427047, -0.185665, 0.976250, 0.451627, 0, 0.888284, 0.459295, 0.185665, 0.976250, 0.451627, 0.375583, 1.066232, 0.427047, 0.558342, 1.152821, 0.384428, 0.721492, 1.230120, 0.324770, 0.854023, 1.292912, 0.251330, 0.948704, 1.337770, 0.169064, 1.003309, 1.363642, 0.083575, 1.020344, 1.371712, 0, 1.003309, 1.363642, -0.083575, 0.948704, 1.337770, -0.169064, 0.854023, 1.292912, -0.251330, 0.721492, 1.230120, -0.324770, 0.558342, 1.152821, -0.384428, 0.375583, 1.066232, -0.427047, 0.185665, 0.976250, -0.451627, 0, 0.888284, -0.459295, 0, 0.929788, -0.368095, -0.154473, 1.005177, -0.361950, -0.312485, 1.082294, -0.342250, -0.464541, 1.156503, -0.308094, -0.600282, 1.222749, -0.260282, -0.710548, 1.276564, -0.201425, -0.789322, 1.315009, -0.135494, -0.834755, 1.337181, -0.066980, -0.848927, 1.344098, 0, -0.834754, 1.337181, 0.066980, -0.789322, 1.315009, 0.135494, -0.710548, 1.276564, 0.201425, -0.600282, 1.222749, 0.260282, -0.464541, 1.156503, 0.308094, -0.312485, 1.082294, 0.342250, -0.154473, 1.005177, 0.361950, 0, 0.929788, 0.368095, 0.154473, 1.005177, 0.361950, 0.312485, 1.082294, 0.342250, 0.464541, 1.156503, 0.308094, 0.600282, 1.222749, 0.260282, 0.710548, 1.276564, 0.201425, 0.789322, 1.315009, 0.135494, 0.834755, 1.337181, 0.066980, 0.848927, 1.344098, 0, 0.834754, 1.337181, -0.066980, 0.789322, 1.315009, -0.135494, 0.710548, 1.276564, -0.201425, 0.600282, 1.222749, -0.260282, 0.464541, 1.156503, -0.308094, 0.312485, 1.082294, -0.342250, 0.154473, 1.005177, -0.361950, 0, 0.929788, -0.368095, 0, 0.961399, -0.275158, -0.119550, 1.021268, -0.270565, -0.241838, 1.082508, -0.255839, -0.359517, 1.141439, -0.230306, -0.464569, 1.194048, -0.194566, -0.549906, 1.236783, -0.150569, -0.610871, 1.267313, -0.101284, -0.646032, 1.284921, -0.050069, -0.657001, 1.290414, 0, -0.646032, 1.284921, 0.050069, -0.610871, 1.267313, 0.101284, -0.549906, 1.236783, 0.150569, -0.464569, 1.194048, 0.194566, -0.359517, 1.141439, 0.230306, -0.241838, 1.082508, 0.255839, -0.119550, 1.021268, 0.270565, 0, 0.961399, 0.275158, 0.119550, 1.021268, 0.270565, 0.241838, 1.082508, 0.255839, 0.359517, 1.141439, 0.230306, 0.464569, 1.194048, 0.194566, 0.549906, 1.236783, 0.150569, 0.610871, 1.267313, 0.101284, 0.646032, 1.284921, 0.050069, 0.657001, 1.290414, 0, 0.646032, 1.284921, -0.050069, 0.610871, 1.267313, -0.101284, 0.549906, 1.236783, -0.150569, 0.464569, 1.194048, -0.194566, 0.359517, 1.141439, -0.230306, 0.241838, 1.082508, -0.255839, 0.119550, 1.021268, -0.270565, 0, 0.961399, -0.275158, 0, 0.983305, -0.181963, -0.081653, 1.025132, -0.178925, -0.165176, 1.067917, -0.169187, -0.245551, 1.109089, -0.152302, -0.317302, 1.145843, -0.128667, -0.375588, 1.175700, -0.099572, -0.417227, 1.197029, -0.066980, -0.441242, 1.209331, -0.033111, -0.448734, 1.213168, 0, -0.441242, 1.209331, 0.033111, -0.417227, 1.197029, 0.066980, -0.375588, 1.175700, 0.099572, -0.317302, 1.145843, 0.128667, -0.245551, 1.109089, 0.152302, -0.165176, 1.067917, 0.169187, -0.081653, 1.025132, 0.178925, 0, 0.983305, 0.181963, 0.081653, 1.025132, 0.178925, 0.165176, 1.067917, 0.169187, 0.245551, 1.109089, 0.152302, 0.317302, 1.145843, 0.128667, 0.375588, 1.175700, 0.099572, 0.417227, 1.197029, 0.066980, 0.441242, 1.209331, 0.033111, 0.448734, 1.213168, 0, 0.441242, 1.209331, -0.033111, 0.417227, 1.197029, -0.066980, 0.375588, 1.175700, -0.099572, 0.317302, 1.145843, -0.128667, 0.245551, 1.109089, -0.152302, 0.165176, 1.067917, -0.169187, 0.081653, 1.025132, -0.178925, 0, 0.983305, -0.181963, 0, 0.995955, -0.089854, -0.041554, 1.017672, -0.088354, -0.084060, 1.039886, -0.083546, -0.124963, 1.061263, -0.075208, -0.161478, 1.080346, -0.063537, -0.191140, 1.095848, -0.049169, -0.212331, 1.106923, -0.033075, -0.224552, 1.113310, -0.016350, -0.228365, 1.115303, 0, -0.224552, 1.113310, 0.016350, -0.212331, 1.106923, 0.033075, -0.191140, 1.095848, 0.049169, -0.161478, 1.080346, 0.063537, -0.124963, 1.061263, 0.075208, -0.084060, 1.039886, 0.083546, -0.041554, 1.017672, 0.088354, 0, 0.995955, 0.089854, 0.041554, 1.017672, 0.088354, 0.084060, 1.039886, 0.083546, 0.124963, 1.061263, 0.075208, 0.161478, 1.080346, 0.063537, 0.191140, 1.095848, 0.049169, 0.212331, 1.106923, 0.033075, 0.224552, 1.113310, 0.016350, 0.228365, 1.115303, 0, 0.224552, 1.113310, -0.016350, 0.212331, 1.106923, -0.033075, 0.191140, 1.095848, -0.049169, 0.161478, 1.080346, -0.063537, 0.124963, 1.061263, -0.075208, 0.084060, 1.039886, -0.083546, 0.041554, 1.017672, -0.088354, 0, 0.995955, -0.089854, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 };
    self->CoordinateInterpolator_8.keyValue = m_keyValue;
    self->CoordinateInterpolator_8.keyValue_length = sizeof(m_keyValue) / sizeof(float);
    }
    self->CoordinateInterpolator_8.set_fraction = 0;
    {
    static float m_value_changed[1];
    self->CoordinateInterpolator_8.value_changed = NULL;
    self->CoordinateInterpolator_8.value_changed_length = 0;
    }
    self->CoordinateInterpolator_8.m_type = 57;
    self->CoordinateInterpolator_8.m_data = NULL;
    X3dNormalInterpolatorInit(&self->NormalInterpolator_9);
    self->NormalInterpolator_9.m_parent = (X3dNode *)&self->Shape_5;
    {
    static float m_key[] = { 0, 1 };
    self->NormalInterpolator_9.key = m_key;
    self->NormalInterpolator_9.key_length = sizeof(m_key) / sizeof(float);
    }
    {
    static float m_keyValue[] = { -0.004126, -0.998980, -0.044972, -0.012489, -0.998979, -0.043424, -0.020790, -0.998978, -0.040138, -0.028507, -0.998977, -0.035093, -0.035093, -0.998977, -0.028507, -0.040138, -0.998978, -0.020790, -0.043424, -0.998979, -0.012489, -0.044972, -0.998980, -0.004126, -0.044972, -0.998980, 0.004126, -0.043424, -0.998979, 0.012489, -0.040138, -0.998978, 0.020790, -0.035093, -0.998977, 0.028507, -0.028507, -0.998977, 0.035093, -0.020790, -0.998978, 0.040138, -0.012489, -0.998979, 0.043424, -0.004126, -0.998980, 0.044972, 0.004126, -0.998980, 0.044972, 0.012489, -0.998979, 0.043424, 0.020790, -0.998978, 0.040138, 0.028507, -0.998977, 0.035093, 0.035093, -0.998977, 0.028507, 0.040138, -0.998978, 0.020790, 0.043424, -0.998979, 0.012489, 0.044972, -0.998980, 0.004126, 0.044972, -0.998980, -0.004126, 0.043424, -0.998979, -0.012489, 0.040138, -0.998978, -0.020790, 0.035093, -0.998977, -0.028507, 0.028507, -0.998977, -0.035093, 0.020790, -0.998978, -0.040138, 0.012489, -0.998979, -0.043424, 0.004126, -0.998980, -0.044972, 0.004126, -0.998980, -0.044972, -0, -0.995955, -0.089854, -0.016350, -0.995955, -0.088354, -0.033075, -0.995955, -0.083546, -0.049169, -0.995955, -0.075208, -0.063537, -0.995955, -0.063537, -0.075208, -0.995955, -0.049169, -0.083546, -0.995955, -0.033075, -0.088354, -0.995955, -0.016350, -0.089854, -0.995955, 0, -0.088354, -0.995955, 0.016350, -0.083546, -0.995955, 0.033075, -0.075208, -0.995955, 0.049169, -0.063537, -0.995955, 0.063537, -0.049169, -0.995955, 0.075208, -0.033075, -0.995955, 0.083546, -0.016350, -0.995955, 0.088354, 0, -0.995955, 0.089854, 0.016350, -0.995955, 0.088354, 0.033075, -0.995955, 0.083546, 0.049169, -0.995955, 0.075208, 0.063537, -0.995955, 0.063537, 0.075208, -0.995955, 0.049169, 0.083546, -0.995955, 0.033075, 0.088354, -0.995955, 0.016350, 0.089854, -0.995955, -0, 0.088354, -0.995955, -0.016350, 0.083546, -0.995955, -0.033075, 0.075208, -0.995955, -0.049169, 0.063537, -0.995955, -0.063537, 0.049169, -0.995955, -0.075208, 0.033075, -0.995955, -0.083546, 0.016350, -0.995955, -0.088354, 0, -0.995955, -0.089854, -0, -0.983305, -0.181963, -0.033111, -0.983305, -0.178925, -0.066980, -0.983305, -0.169187, -0.099572, -0.983305, -0.152302, -0.128667, -0.983305, -0.128667, -0.152302, -0.983305, -0.099572, -0.169187, -0.983305, -0.066980, -0.178925, -0.983305, -0.033111, -0.181963, -0.983305, 0, -0.178925, -0.983305, 0.033111, -0.169187, -0.983305, 0.066980, -0.152302, -0.983305, 0.099572, -0.128667, -0.983305, 0.128667, -0.099572, -0.983305, 0.152302, -0.066980, -0.983305, 0.169187, -0.033111, -0.983305, 0.178925, 0, -0.983305, 0.181963, 0.033111, -0.983305, 0.178925, 0.066980, -0.983305, 0.169187, 0.099572, -0.983305, 0.152302, 0.128667, -0.983305, 0.128667, 0.152302, -0.983305, 0.099572, 0.169187, -0.983305, 0.066980, 0.178925, -0.983305, 0.033111, 0.181963, -0.983305, -0, 0.178925, -0.983305, -0.033111, 0.169187, -0.983305, -0.066980, 0.152302, -0.983305, -0.099572, 0.128667, -0.983305, -0.128667, 0.099572, -0.983305, -0.152302, 0.066980, -0.983305, -0.169187, 0.033111, -0.983305, -0.178925, 0, -0.983305, -0.181963, -0, -0.961399, -0.275158, -0.050069, -0.961399, -0.270564, -0.101284, -0.961399, -0.255839, -0.150569, -0.961399, -0.230306, -0.194566, -0.961399, -0.194566, -0.230306, -0.961399, -0.150569, -0.255839, -0.961399, -0.101284, -0.270564, -0.961399, -0.050069, -0.275158, -0.961399, 0, -0.270564, -0.961399, 0.050069, -0.255839, -0.961399, 0.101284, -0.230306, -0.961399, 0.150569, -0.194566, -0.961399, 0.194566, -0.150569, -0.961399, 0.230306, -0.101284, -0.961399, 0.255839, -0.050069, -0.961399, 0.270564, 0, -0.961399, 0.275158, 0.050069, -0.961399, 0.270564, 0.101284, -0.961399, 0.255839, 0.150569, -0.961399, 0.230306, 0.194566, -0.961399, 0.194566, 0.230306, -0.961399, 0.150569, 0.255839, -0.961399, 0.101284, 0.270564, -0.961399, 0.050069, 0.275158, -0.961399, -0, 0.270564, -0.961399, -0.050069, 0.255839, -0.961399, -0.101284, 0.230306, -0.961399, -0.150569, 0.194566, -0.961399, -0.194566, 0.150569, -0.961399, -0.230306, 0.101284, -0.961399, -0.255839, 0.050069, -0.961399, -0.270564, 0, -0.961399, -0.275158, -0, -0.929788, -0.368095, -0.066980, -0.929788, -0.361949, -0.135494, -0.929788, -0.342250, -0.201425, -0.929788, -0.308094, -0.260282, -0.929788, -0.260282, -0.308094, -0.929788, -0.201425, -0.342250, -0.929788, -0.135494, -0.361949, -0.929788, -0.066980, -0.368095, -0.929788, 0, -0.361949, -0.929788, 0.066980, -0.342250, -0.929788, 0.135494, -0.308094, -0.929788, 0.201425, -0.260282, -0.929788, 0.260282, -0.201425, -0.929788, 0.308094, -0.135494, -0.929788, 0.342250, -0.066980, -0.929788, 0.361949, 0, -0.929788, 0.368095, 0.066980, -0.929788, 0.361949, 0.135494, -0.929788, 0.342250, 0.201425, -0.929788, 0.308094, 0.260282, -0.929788, 0.260282, 0.308094, -0.929788, 0.201425, 0.342250, -0.929788, 0.135494, 0.361949, -0.929788, 0.066980, 0.368095, -0.929788, -0, 0.361949, -0.929788, -0.066980, 0.342250, -0.929788, -0.135494, 0.308094, -0.929788, -0.201425, 0.260282, -0.929788, -0.260282, 0.201425, -0.929788, -0.308094, 0.135494, -0.929788, -0.342250, 0.066980, -0.929788, -0.361949, 0, -0.929788, -0.368095, -0, -0.888284, -0.459295, -0.083575, -0.888284, -0.451627, -0.169064, -0.888284, -0.427047, -0.251330, -0.888284, -0.384427, -0.324770, -0.888284, -0.324770, -0.384427, -0.888284, -0.251330, -0.427047, -0.888284, -0.169064, -0.451627, -0.888284, -0.083575, -0.459295, -0.888284, 0, -0.451627, -0.888284, 0.083575, -0.427047, -0.888284, 0.169064, -0.384427, -0.888284, 0.251330, -0.324770, -0.888284, 0.324770, -0.251330, -0.888284, 0.384427, -0.169064, -0.888284, 0.427047, -0.083575, -0.888284, 0.451627, 0, -0.888284, 0.459295, 0.083575, -0.888284, 0.451627, 0.169064, -0.888284, 0.427047, 0.251330, -0.888284, 0.384427, 0.324770, -0.888284, 0.324770, 0.384427, -0.888284, 0.251330, 0.427047, -0.888284, 0.169064, 0.451627, -0.888284, 0.083575, 0.459295, -0.888284, -0, 0.451627, -0.888284, -0.083575, 0.427047, -0.888284, -0.169064, 0.384427, -0.888284, -0.251330, 0.324770, -0.888284, -0.324770, 0.251330, -0.888284, -0.384427, 0.169064, -0.888284, -0.427047, 0.083575, -0.888284, -0.451627, 0, -0.888284, -0.459295, -0, -0.836995, -0.547210, -0.099572, -0.836996, -0.538074, -0.201425, -0.836996, -0.508789, -0.299439, -0.836996, -0.458012, -0.386936, -0.836996, -0.386936, -0.458012, -0.836996, -0.299439, -0.508789, -0.836995, -0.201425, -0.538074, -0.836996, -0.099572, -0.547210, -0.836995, 0, -0.538074, -0.836996, 0.099572, -0.508789, -0.836996, 0.201425, -0.458012, -0.836996, 0.299439, -0.386936, -0.836996, 0.386936, -0.299439, -0.836996, 0.458012, -0.201425, -0.836995, 0.508789, -0.099572, -0.836996, 0.538074, 0, -0.836995, 0.547210, 0.099572, -0.836996, 0.538074, 0.201425, -0.836996, 0.508789, 0.299439, -0.836996, 0.458012, 0.386936, -0.836996, 0.386936, 0.458012, -0.836996, 0.299439, 0.508789, -0.836995, 0.201425, 0.538074, -0.836996, 0.099572, 0.547210, -0.836995, -0, 0.538074, -0.836996, -0.099572, 0.508789, -0.836996, -0.201425, 0.458012, -0.836996, -0.299439, 0.386936, -0.836996, -0.386936, 0.299439, -0.836996, -0.458012, 0.201425, -0.836995, -0.508789, 0.099572, -0.836996, -0.538074, 0, -0.836995, -0.547210, -0, -0.776353, -0.630298, -0.114691, -0.776353, -0.619775, -0.232009, -0.776353, -0.586044, -0.344905, -0.776353, -0.527557, -0.445688, -0.776353, -0.445688, -0.527557, -0.776353, -0.344905, -0.586044, -0.776353, -0.232009, -0.619775, -0.776353, -0.114691, -0.630298, -0.776353, 0, -0.619775, -0.776353, 0.114691, -0.586044, -0.776353, 0.232010, -0.527557, -0.776353, 0.344905, -0.445688, -0.776353, 0.445688, -0.344905, -0.776353, 0.527557, -0.232009, -0.776353, 0.586044, -0.114691, -0.776353, 0.619775, 0, -0.776353, 0.630298, 0.114691, -0.776353, 0.619775, 0.232009, -0.776353, 0.586044, 0.344905, -0.776353, 0.527557, 0.445688, -0.776353, 0.445688, 0.527557, -0.776353, 0.344905, 0.586044, -0.776353, 0.232009, 0.619775, -0.776353, 0.114691, 0.630298, -0.776353, -0, 0.619775, -0.776353, -0.114691, 0.586044, -0.776353, -0.232010, 0.527557, -0.776353, -0.344905, 0.445688, -0.776353, -0.445688, 0.344905, -0.776353, -0.527557, 0.232009, -0.776353, -0.586044, 0.114691, -0.776353, -0.619775, 0, -0.776353, -0.630298, -0, -0.707107, -0.707107, -0.128667, -0.707107, -0.695302, -0.260282, -0.707107, -0.657460, -0.386936, -0.707107, -0.591845, -0.500000, -0.707107, -0.500000, -0.591845, -0.707107, -0.386936, -0.657460, -0.707107, -0.260282, -0.695302, -0.707107, -0.128667, -0.707107, -0.707107, 0, -0.695302, -0.707107, 0.128667, -0.657460, -0.707107, 0.260282, -0.591845, -0.707107, 0.386936, -0.500000, -0.707107, 0.500000, -0.386936, -0.707107, 0.591845, -0.260282, -0.707107, 0.657460, -0.128667, -0.707107, 0.695302, 0, -0.707107, 0.707107, 0.128667, -0.707107, 0.695302, 0.260282, -0.707107, 0.657460, 0.386936, -0.707107, 0.591845, 0.500000, -0.707107, 0.500000, 0.591845, -0.707107, 0.386936, 0.657460, -0.707107, 0.260282, 0.695302, -0.707107, 0.128667, 0.707107, -0.707107, -0, 0.695302, -0.707107, -0.128667, 0.657460, -0.707107, -0.260282, 0.591845, -0.707107, -0.386936, 0.500000, -0.707107, -0.500000, 0.386936, -0.707107, -0.591845, 0.260282, -0.707107, -0.657460, 0.128667, -0.707107, -0.695302, 0, -0.707107, -0.707107, -0, -0.630298, -0.776353, -0.141268, -0.630298, -0.763392, -0.285772, -0.630298, -0.721844, -0.424828, -0.630298, -0.649804, -0.548965, -0.630298, -0.548965, -0.649804, -0.630298, -0.424828, -0.721844, -0.630298, -0.285772, -0.763392, -0.630298, -0.141268, -0.776353, -0.630298, 0, -0.763392, -0.630298, 0.141268, -0.721844, -0.630298, 0.285772, -0.649804, -0.630298, 0.424828, -0.548965, -0.630298, 0.548965, -0.424828, -0.630298, 0.649804, -0.285772, -0.630298, 0.721844, -0.141268, -0.630298, 0.763392, 0, -0.630298, 0.776353, 0.141268, -0.630298, 0.763392, 0.285772, -0.630298, 0.721844, 0.424828, -0.630298, 0.649804, 0.548965, -0.630298, 0.548965, 0.649804, -0.630298, 0.424828, 0.721844, -0.630298, 0.285772, 0.763392, -0.630298, 0.141268, 0.776353, -0.630298, -0, 0.763392, -0.630298, -0.141268, 0.721844, -0.630298, -0.285772, 0.649804, -0.630298, -0.424828, 0.548965, -0.630298, -0.548965, 0.424828, -0.630298, -0.649804, 0.285772, -0.630298, -0.721844, 0.141268, -0.630298, -0.763392, 0, -0.630298, -0.776353, -0, -0.547210, -0.836996, -0.152302, -0.547210, -0.823022, -0.308094, -0.547210, -0.778229, -0.458012, -0.547210, -0.700561, -0.591845, -0.547210, -0.591845, -0.700561, -0.547210, -0.458012, -0.778229, -0.547210, -0.308094, -0.823022, -0.547210, -0.152302, -0.836996, -0.547210, 0, -0.823022, -0.547210, 0.152302, -0.778229, -0.547210, 0.308094, -0.700561, -0.547210, 0.458012, -0.591845, -0.547210, 0.591845, -0.458012, -0.547210, 0.700561, -0.308094, -0.547210, 0.778229, -0.152302, -0.547210, 0.823022, 0, -0.547210, 0.836996, 0.152302, -0.547210, 0.823022, 0.308094, -0.547210, 0.778229, 0.458012, -0.547210, 0.700561, 0.591845, -0.547210, 0.591845, 0.700561, -0.547210, 0.458012, 0.778229, -0.547210, 0.308094, 0.823022, -0.547210, 0.152302, 0.836996, -0.547210, -0, 0.823022, -0.547210, -0.152302, 0.778229, -0.547210, -0.308094, 0.700561, -0.547210, -0.458012, 0.591845, -0.547210, -0.591845, 0.458012, -0.547210, -0.700561, 0.308094, -0.547210, -0.778229, 0.152302, -0.547210, -0.823022, 0, -0.547210, -0.836996, -0, -0.459295, -0.888284, -0.161635, -0.459295, -0.873454, -0.326973, -0.459295, -0.825916, -0.486078, -0.459295, -0.743490, -0.628112, -0.459295, -0.628112, -0.743490, -0.459295, -0.486078, -0.825916, -0.459295, -0.326973, -0.873454, -0.459295, -0.161635, -0.888284, -0.459295, 0, -0.873454, -0.459295, 0.161635, -0.825916, -0.459295, 0.326973, -0.743490, -0.459295, 0.486078, -0.628112, -0.459295, 0.628112, -0.486078, -0.459295, 0.743490, -0.326973, -0.459295, 0.825916, -0.161635, -0.459295, 0.873454, 0, -0.459295, 0.888284, 0.161635, -0.459295, 0.873454, 0.326973, -0.459295, 0.825916, 0.486078, -0.459295, 0.743490, 0.628112, -0.459295, 0.628112, 0.743490, -0.459295, 0.486078, 0.825916, -0.459295, 0.326973, 0.873454, -0.459295, 0.161635, 0.888284, -0.459295, -0, 0.873454, -0.459295, -0.161635, 0.825916, -0.459295, -0.326973, 0.743490, -0.459295, -0.486078, 0.628112, -0.459295, -0.628112, 0.486078, -0.459295, -0.743490, 0.326973, -0.459295, -0.825916, 0.161635, -0.459295, -0.873454, 0, -0.459295, -0.888284, -0, -0.368095, -0.929788, -0.169187, -0.368095, -0.914266, -0.342250, -0.368095, -0.864506, -0.508789, -0.368095, -0.778229, -0.657460, -0.368095, -0.657460, -0.778229, -0.368095, -0.508789, -0.864506, -0.368095, -0.342250, -0.914266, -0.368095, -0.169187, -0.929788, -0.368095, 0, -0.914266, -0.368095, 0.169187, -0.864506, -0.368095, 0.342250, -0.778229, -0.368095, 0.508789, -0.657460, -0.368095, 0.657460, -0.508789, -0.368095, 0.778229, -0.342250, -0.368095, 0.864506, -0.169187, -0.368095, 0.914266, 0, -0.368095, 0.929788, 0.169187, -0.368095, 0.914266, 0.342250, -0.368095, 0.864506, 0.508789, -0.368095, 0.778229, 0.657460, -0.368095, 0.657460, 0.778229, -0.368095, 0.508789, 0.864506, -0.368095, 0.342250, 0.914266, -0.368095, 0.169187, 0.929788, -0.368095, -0, 0.914266, -0.368095, -0.169187, 0.864506, -0.368095, -0.342250, 0.778229, -0.368095, -0.508789, 0.657460, -0.368095, -0.657460, 0.508789, -0.368095, -0.778229, 0.342250, -0.368095, -0.864506, 0.169187, -0.368095, -0.914266, 0, -0.368095, -0.929788, -0, -0.275158, -0.961399, -0.174939, -0.275158, -0.945349, -0.353886, -0.275158, -0.893897, -0.526087, -0.275158, -0.804687, -0.679812, -0.275158, -0.679812, -0.804687, -0.275158, -0.526087, -0.893897, -0.275158, -0.353886, -0.945349, -0.275158, -0.174939, -0.961399, -0.275158, 0, -0.945349, -0.275158, 0.174939, -0.893897, -0.275158, 0.353886, -0.804687, -0.275158, 0.526087, -0.679812, -0.275158, 0.679812, -0.526087, -0.275158, 0.804687, -0.353886, -0.275158, 0.893897, -0.174939, -0.275158, 0.945349, 0, -0.275158, 0.961399, 0.174939, -0.275158, 0.945349, 0.353886, -0.275158, 0.893897, 0.526087, -0.275158, 0.804687, 0.679812, -0.275158, 0.679812, 0.804687, -0.275158, 0.526087, 0.893897, -0.275158, 0.353886, 0.945349, -0.275158, 0.174939, 0.961399, -0.275158, -0, 0.945349, -0.275158, -0.174939, 0.893897, -0.275158, -0.353886, 0.804687, -0.275158, -0.526087, 0.679812, -0.275158, -0.679812, 0.526087, -0.275158, -0.804687, 0.353886, -0.275158, -0.893897, 0.174939, -0.275158, -0.945349, 0, -0.275158, -0.961399, -0, -0.181963, -0.983305, -0.178925, -0.181963, -0.966890, -0.361949, -0.181963, -0.914266, -0.538074, -0.181963, -0.823022, -0.695302, -0.181963, -0.695302, -0.823022, -0.181963, -0.538074, -0.914266, -0.181963, -0.361950, -0.966890, -0.181963, -0.178925, -0.983305, -0.181963, 0, -0.966890, -0.181963, 0.178925, -0.914266, -0.181963, 0.361949, -0.823022, -0.181963, 0.538074, -0.695302, -0.181963, 0.695302, -0.538074, -0.181963, 0.823022, -0.361949, -0.181963, 0.914266, -0.178925, -0.181963, 0.966890, 0, -0.181963, 0.983305, 0.178925, -0.181963, 0.966890, 0.361949, -0.181963, 0.914266, 0.538074, -0.181963, 0.823022, 0.695302, -0.181963, 0.695302, 0.823022, -0.181963, 0.538074, 0.914266, -0.181963, 0.361950, 0.966890, -0.181963, 0.178925, 0.983305, -0.181963, -0, 0.966890, -0.181963, -0.178925, 0.914266, -0.181963, -0.361949, 0.823022, -0.181963, -0.538074, 0.695302, -0.181963, -0.695302, 0.538074, -0.181963, -0.823022, 0.361949, -0.181963, -0.914266, 0.178925, -0.181963, -0.966890, 0, -0.181963, -0.983305, -0, -0.089854, -0.995955, -0.181227, -0.089854, -0.979328, -0.366606, -0.089854, -0.926027, -0.544996, -0.089855, -0.833610, -0.704246, -0.089855, -0.704246, -0.833610, -0.089855, -0.544996, -0.926027, -0.089854, -0.366606, -0.979328, -0.089854, -0.181227, -0.995955, -0.089854, 0, -0.979328, -0.089854, 0.181227, -0.926027, -0.089854, 0.366606, -0.833610, -0.089855, 0.544996, -0.704246, -0.089855, 0.704246, -0.544996, -0.089855, 0.833610, -0.366606, -0.089854, 0.926027, -0.181227, -0.089854, 0.979328, 0, -0.089854, 0.995955, 0.181227, -0.089854, 0.979328, 0.366606, -0.089854, 0.926027, 0.544996, -0.089855, 0.833610, 0.704246, -0.089855, 0.704246, 0.833610, -0.089855, 0.544996, 0.926027, -0.089854, 0.366606, 0.979328, -0.089854, 0.181227, 0.995955, -0.089854, -0, 0.979328, -0.089854, -0.181227, 0.926027, -0.089854, -0.366606, 0.833610, -0.089855, -0.544996, 0.704246, -0.089855, -0.704246, 0.544996, -0.089855, -0.833610, 0.366606, -0.089854, -0.926027, 0.181227, -0.089854, -0.979328, 0, -0.089854, -0.995955, 0, 0, -1, -0.181963, 0, -0.983305, -0.368095, 0, -0.929788, -0.547210, 0, -0.836996, -0.707107, 0, -0.707107, -0.836995, 0, -0.547210, -0.929788, 0, -0.368095, -0.983305, 0, -0.181963, -1, 0, 0, -0.983305, 0, 0.181963, -0.929788, 0, 0.368095, -0.836996, 0, 0.547210, -0.707107, 0, 0.707107, -0.547210, 0, 0.836995, -0.368095, 0, 0.929788, -0.181963, 0, 0.983305, 0, 0, 1, 0.181963, 0, 0.983305, 0.368095, 0, 0.929788, 0.547210, 0, 0.836996, 0.707107, 0, 0.707107, 0.836995, 0, 0.547210, 0.929788, 0, 0.368095, 0.983305, 0, 0.181963, 1, 0, 0, 0.983305, 0, -0.181963, 0.929788, 0, -0.368095, 0.836996, 0, -0.547210, 0.707107, 0, -0.707107, 0.547210, 0, -0.836995, 0.368095, 0, -0.929788, 0.181963, 0, -0.983305, 0, 0, -1, -0, 0.089854, -0.995955, -0.181227, 0.089854, -0.979328, -0.366606, 0.089854, -0.926027, -0.544996, 0.089854, -0.833610, -0.704247, 0.089855, -0.704247, -0.833610, 0.089854, -0.544996, -0.926027, 0.089854, -0.366606, -0.979328, 0.089854, -0.181227, -0.995955, 0.089854, 0, -0.979328, 0.089854, 0.181227, -0.926027, 0.089854, 0.366606, -0.833610, 0.089854, 0.544996, -0.704247, 0.089855, 0.704247, -0.544996, 0.089854, 0.833610, -0.366606, 0.089854, 0.926027, -0.181227, 0.089854, 0.979328, 0, 0.089854, 0.995955, 0.181227, 0.089854, 0.979328, 0.366606, 0.089854, 0.926027, 0.544996, 0.089854, 0.833610, 0.704247, 0.089855, 0.704247, 0.833610, 0.089854, 0.544996, 0.926027, 0.089854, 0.366606, 0.979328, 0.089854, 0.181227, 0.995955, 0.089854, -0, 0.979328, 0.089854, -0.181227, 0.926027, 0.089854, -0.366606, 0.833610, 0.089854, -0.544996, 0.704247, 0.089855, -0.704247, 0.544996, 0.089854, -0.833610, 0.366606, 0.089854, -0.926027, 0.181227, 0.089854, -0.979328, 0, 0.089854, -0.995955, -0, 0.181963, -0.983305, -0.178925, 0.181963, -0.966890, -0.361949, 0.181963, -0.914266, -0.538074, 0.181963, -0.823022, -0.695302, 0.181963, -0.695302, -0.823022, 0.181963, -0.538074, -0.914266, 0.181963, -0.361949, -0.966890, 0.181963, -0.178925, -0.983305, 0.181963, 0, -0.966890, 0.181963, 0.178925, -0.914266, 0.181963, 0.361949, -0.823022, 0.181963, 0.538074, -0.695302, 0.181963, 0.695302, -0.538074, 0.181963, 0.823022, -0.361949, 0.181963, 0.914266, -0.178925, 0.181963, 0.966890, 0, 0.181963, 0.983305, 0.178925, 0.181963, 0.966890, 0.361949, 0.181963, 0.914266, 0.538074, 0.181963, 0.823022, 0.695302, 0.181963, 0.695302, 0.823022, 0.181963, 0.538074, 0.914266, 0.181963, 0.361949, 0.966890, 0.181963, 0.178925, 0.983305, 0.181963, -0, 0.966890, 0.181963, -0.178925, 0.914266, 0.181963, -0.361949, 0.823022, 0.181963, -0.538074, 0.695302, 0.181963, -0.695302, 0.538074, 0.181963, -0.823022, 0.361949, 0.181963, -0.914266, 0.178925, 0.181963, -0.966890, 0, 0.181963, -0.983305, -0, 0.275158, -0.961399, -0.174939, 0.275158, -0.945349, -0.353886, 0.275158, -0.893897, -0.526087, 0.275158, -0.804687, -0.679812, 0.275158, -0.679812, -0.804687, 0.275158, -0.526087, -0.893897, 0.275158, -0.353886, -0.945349, 0.275158, -0.174939, -0.961399, 0.275158, 0, -0.945349, 0.275158, 0.174939, -0.893897, 0.275158, 0.353886, -0.804687, 0.275158, 0.526087, -0.679812, 0.275158, 0.679812, -0.526087, 0.275158, 0.804687, -0.353886, 0.275158, 0.893897, -0.174939, 0.275158, 0.945349, 0, 0.275158, 0.961399, 0.174939, 0.275158, 0.945349, 0.353886, 0.275158, 0.893897, 0.526087, 0.275158, 0.804687, 0.679812, 0.275158, 0.679812, 0.804687, 0.275158, 0.526087, 0.893897, 0.275158, 0.353886, 0.945349, 0.275158, 0.174939, 0.961399, 0.275158, -0, 0.945349, 0.275158, -0.174939, 0.893897, 0.275158, -0.353886, 0.804687, 0.275158, -0.526087, 0.679812, 0.275158, -0.679812, 0.526087, 0.275158, -0.804687, 0.353886, 0.275158, -0.893897, 0.174939, 0.275158, -0.945349, 0, 0.275158, -0.961399, -0, 0.368095, -0.929788, -0.169187, 0.368095, -0.914266, -0.342250, 0.368095, -0.864506, -0.508789, 0.368095, -0.778229, -0.657460, 0.368095, -0.657460, -0.778229, 0.368095, -0.508789, -0.864506, 0.368095, -0.342250, -0.914266, 0.368095, -0.169187, -0.929788, 0.368095, 0, -0.914266, 0.368095, 0.169187, -0.864506, 0.368095, 0.342250, -0.778229, 0.368095, 0.508789, -0.657460, 0.368095, 0.657460, -0.508789, 0.368095, 0.778229, -0.342250, 0.368095, 0.864506, -0.169187, 0.368095, 0.914266, 0, 0.368095, 0.929788, 0.169187, 0.368095, 0.914266, 0.342250, 0.368095, 0.864506, 0.508789, 0.368095, 0.778229, 0.657460, 0.368095, 0.657460, 0.778229, 0.368095, 0.508789, 0.864506, 0.368095, 0.342250, 0.914266, 0.368095, 0.169187, 0.929788, 0.368095, -0, 0.914266, 0.368095, -0.169187, 0.864506, 0.368095, -0.342250, 0.778229, 0.368095, -0.508789, 0.657460, 0.368095, -0.657460, 0.508789, 0.368095, -0.778229, 0.342250, 0.368095, -0.864506, 0.169187, 0.368095, -0.914266, 0, 0.368095, -0.929788, -0, 0.459295, -0.888284, -0.161635, 0.459295, -0.873454, -0.326973, 0.459295, -0.825916, -0.486078, 0.459295, -0.743490, -0.628112, 0.459295, -0.628112, -0.743490, 0.459295, -0.486078, -0.825916, 0.459295, -0.326973, -0.873454, 0.459295, -0.161635, -0.888284, 0.459295, 0, -0.873454, 0.459295, 0.161635, -0.825916, 0.459295, 0.326973, -0.743490, 0.459295, 0.486078, -0.628112, 0.459295, 0.628112, -0.486078, 0.459295, 0.743490, -0.326973, 0.459295, 0.825916, -0.161635, 0.459295, 0.873454, 0, 0.459295, 0.888284, 0.161635, 0.459295, 0.873454, 0.326973, 0.459295, 0.825916, 0.486078, 0.459295, 0.743490, 0.628112, 0.459295, 0.628112, 0.743490, 0.459295, 0.486078, 0.825916, 0.459295, 0.326973, 0.873454, 0.459295, 0.161635, 0.888284, 0.459295, -0, 0.873454, 0.459295, -0.161635, 0.825916, 0.459295, -0.326973, 0.743490, 0.459295, -0.486078, 0.628112, 0.459295, -0.628112, 0.486078, 0.459295, -0.743490, 0.326973, 0.459295, -0.825916, 0.161635, 0.459295, -0.873454, 0, 0.459295, -0.888284, -0, 0.547210, -0.836996, -0.152302, 0.547210, -0.823022, -0.308094, 0.547210, -0.778229, -0.458012, 0.547210, -0.700561, -0.591845, 0.547210, -0.591845, -0.700561, 0.547210, -0.458012, -0.778229, 0.547210, -0.308094, -0.823022, 0.547210, -0.152302, -0.836996, 0.547210, 0, -0.823022, 0.547210, 0.152302, -0.778229, 0.547210, 0.308094, -0.700561, 0.547210, 0.458012, -0.591845, 0.547210, 0.591845, -0.458012, 0.547210, 0.700561, -0.308094, 0.547210, 0.778229, -0.152302, 0.547210, 0.823022, 0, 0.547210, 0.836996, 0.152302, 0.547210, 0.823022, 0.308094, 0.547210, 0.778229, 0.458012, 0.547210, 0.700561, 0.591845, 0.547210, 0.591845, 0.700561, 0.547210, 0.458012, 0.778229, 0.547210, 0.308094, 0.823022, 0.547210, 0.152302, 0.836996, 0.547210, -0, 0.823022, 0.547210, -0.152302, 0.778229, 0.547210, -0.308094, 0.700561, 0.547210, -0.458012, 0.591845, 0.547210, -0.591845, 0.458012, 0.547210, -0.700561, 0.308094, 0.547210, -0.778229, 0.152302, 0.547210, -0.823022, 0, 0.547210, -0.836996, -0, 0.630298, -0.776353, -0.141268, 0.630298, -0.763392, -0.285772, 0.630298, -0.721844, -0.424828, 0.630298, -0.649804, -0.548965, 0.630298, -0.548965, -0.649804, 0.630298, -0.424828, -0.721844, 0.630298, -0.285772, -0.763392, 0.630298, -0.141268, -0.776353, 0.630298, 0, -0.763392, 0.630298, 0.141268, -0.721844, 0.630298, 0.285772, -0.649804, 0.630298, 0.424828, -0.548965, 0.630298, 0.548965, -0.424828, 0.630298, 0.649804, -0.285772, 0.630298, 0.721844, -0.141268, 0.630298, 0.763392, 0, 0.630298, 0.776353, 0.141268, 0.630298, 0.763392, 0.285772, 0.630298, 0.721844, 0.424828, 0.630298, 0.649804, 0.548965, 0.630298, 0.548965, 0.649804, 0.630298, 0.424828, 0.721844, 0.630298, 0.285772, 0.763392, 0.630298, 0.141268, 0.776353, 0.630298, -0, 0.763392, 0.630298, -0.141268, 0.721844, 0.630298, -0.285772, 0.649804, 0.630298, -0.424828, 0.548965, 0.630298, -0.548965, 0.424828, 0.630298, -0.649804, 0.285772, 0.630298, -0.721844, 0.141268, 0.630298, -0.763392, 0, 0.630298, -0.776353, -0, 0.707107, -0.707107, -0.128667, 0.707107, -0.695302, -0.260282, 0.707107, -0.657460, -0.386936, 0.707107, -0.591845, -0.500000, 0.707107, -0.500000, -0.591845, 0.707107, -0.386936, -0.657460, 0.707107, -0.260282, -0.695302, 0.707107, -0.128667, -0.707107, 0.707107, 0, -0.695302, 0.707107, 0.128667, -0.657460, 0.707107, 0.260282, -0.591845, 0.707107, 0.386936, -0.500000, 0.707107, 0.500000, -0.386936, 0.707107, 0.591845, -0.260282, 0.707107, 0.657460, -0.128667, 0.707107, 0.695302, 0, 0.707107, 0.707107, 0.128667, 0.707107, 0.695302, 0.260282, 0.707107, 0.657460, 0.386936, 0.707107, 0.591845, 0.500000, 0.707107, 0.500000, 0.591845, 0.707107, 0.386936, 0.657460, 0.707107, 0.260282, 0.695302, 0.707107, 0.128667, 0.707107, 0.707107, -0, 0.695302, 0.707107, -0.128667, 0.657460, 0.707107, -0.260282, 0.591845, 0.707107, -0.386936, 0.500000, 0.707107, -0.500000, 0.386936, 0.707107, -0.591845, 0.260282, 0.707107, -0.657460, 0.128667, 0.707107, -0.695302, 0, 0.707107, -0.707107, -0, 0.776353, -0.630298, -0.114691, 0.776353, -0.619775, -0.232009, 0.776353, -0.586044, -0.344905, 0.776353, -0.527557, -0.445688, 0.776353, -0.445688, -0.527557, 0.776353, -0.344905, -0.586044, 0.776353, -0.232009, -0.619775, 0.776353, -0.114691, -0.630298, 0.776353, 0, -0.619775, 0.776353, 0.114691, -0.586044, 0.776353, 0.232009, -0.527557, 0.776353, 0.344905, -0.445688, 0.776353, 0.445688, -0.344905, 0.776353, 0.527557, -0.232009, 0.776353, 0.586044, -0.114691, 0.776353, 0.619775, 0, 0.776353, 0.630298, 0.114691, 0.776353, 0.619775, 0.232009, 0.776353, 0.586044, 0.344905, 0.776353, 0.527557, 0.445688, 0.776353, 0.445688, 0.527557, 0.776353, 0.344905, 0.586044, 0.776353, 0.232009, 0.619775, 0.776353, 0.114691, 0.630298, 0.776353, -0, 0.619775, 0.776353, -0.114691, 0.586044, 0.776353, -0.232009, 0.527557, 0.776353, -0.344905, 0.445688, 0.776353, -0.445688, 0.344905, 0.776353, -0.527557, 0.232009, 0.776353, -0.586044, 0.114691, 0.776353, -0.619775, 0, 0.776353, -0.630298, -0, 0.836995, -0.547210, -0.099572, 0.836996, -0.538074, -0.201425, 0.836995, -0.508789, -0.299439, 0.836996, -0.458012, -0.386936, 0.836996, -0.386936, -0.458012, 0.836996, -0.299439, -0.508789, 0.836995, -0.201425, -0.538074, 0.836996, -0.099572, -0.547210, 0.836995, 0, -0.538074, 0.836996, 0.099572, -0.508789, 0.836996, 0.201425, -0.458012, 0.836996, 0.299439, -0.386936, 0.836996, 0.386936, -0.299439, 0.836996, 0.458012, -0.201425, 0.836995, 0.508789, -0.099572, 0.836996, 0.538074, 0, 0.836995, 0.547210, 0.099572, 0.836996, 0.538074, 0.201425, 0.836995, 0.508789, 0.299439, 0.836996, 0.458012, 0.386936, 0.836996, 0.386936, 0.458012, 0.836996, 0.299439, 0.508789, 0.836995, 0.201425, 0.538074, 0.836996, 0.099572, 0.547210, 0.836995, -0, 0.538074, 0.836996, -0.099572, 0.508789, 0.836996, -0.201425, 0.458012, 0.836996, -0.299439, 0.386936, 0.836996, -0.386936, 0.299439, 0.836996, -0.458012, 0.201425, 0.836995, -0.508789, 0.099572, 0.836996, -0.538074, 0, 0.836995, -0.547210, -0, 0.888284, -0.459295, -0.083575, 0.888284, -0.451627, -0.169064, 0.888284, -0.427047, -0.251330, 0.888284, -0.384427, -0.324770, 0.888284, -0.324770, -0.384427, 0.888284, -0.251330, -0.427047, 0.888284, -0.169064, -0.451627, 0.888284, -0.083575, -0.459295, 0.888284, 0, -0.451627, 0.888284, 0.083575, -0.427047, 0.888284, 0.169064, -0.384427, 0.888284, 0.251330, -0.324770, 0.888284, 0.324770, -0.251330, 0.888284, 0.384427, -0.169064, 0.888284, 0.427047, -0.083575, 0.888284, 0.451627, 0, 0.888284, 0.459295, 0.083575, 0.888284, 0.451627, 0.169064, 0.888284, 0.427047, 0.251330, 0.888284, 0.384427, 0.324770, 0.888284, 0.324770, 0.384427, 0.888284, 0.251330, 0.427047, 0.888284, 0.169064, 0.451627, 0.888284, 0.083575, 0.459295, 0.888284, -0, 0.451627, 0.888284, -0.083575, 0.427047, 0.888284, -0.169064, 0.384427, 0.888284, -0.251330, 0.324770, 0.888284, -0.324770, 0.251330, 0.888284, -0.384427, 0.169064, 0.888284, -0.427047, 0.083575, 0.888284, -0.451627, 0, 0.888284, -0.459295, -0, 0.929788, -0.368095, -0.066980, 0.929788, -0.361949, -0.135494, 0.929788, -0.342250, -0.201425, 0.929788, -0.308094, -0.260282, 0.929788, -0.260282, -0.308094, 0.929788, -0.201425, -0.342250, 0.929788, -0.135494, -0.361949, 0.929788, -0.066980, -0.368095, 0.929788, 0, -0.361949, 0.929788, 0.066980, -0.342250, 0.929788, 0.135494, -0.308094, 0.929788, 0.201425, -0.260282, 0.929788, 0.260282, -0.201425, 0.929788, 0.308094, -0.135494, 0.929788, 0.342250, -0.066980, 0.929788, 0.361949, 0, 0.929788, 0.368095, 0.066980, 0.929788, 0.361949, 0.135494, 0.929788, 0.342250, 0.201425, 0.929788, 0.308094, 0.260282, 0.929788, 0.260282, 0.308094, 0.929788, 0.201425, 0.342250, 0.929788, 0.135494, 0.361949, 0.929788, 0.066980, 0.368095, 0.929788, -0, 0.361949, 0.929788, -0.066980, 0.342250, 0.929788, -0.135494, 0.308094, 0.929788, -0.201425, 0.260282, 0.929788, -0.260282, 0.201425, 0.929788, -0.308094, 0.135494, 0.929788, -0.342250, 0.066980, 0.929788, -0.361949, 0, 0.929788, -0.368095, -0, 0.961399, -0.275158, -0.050069, 0.961399, -0.270564, -0.101285, 0.961399, -0.255839, -0.150569, 0.961399, -0.230306, -0.194566, 0.961399, -0.194566, -0.230306, 0.961399, -0.150569, -0.255839, 0.961399, -0.101284, -0.270564, 0.961399, -0.050069, -0.275158, 0.961399, 0, -0.270564, 0.961399, 0.050069, -0.255839, 0.961399, 0.101285, -0.230306, 0.961399, 0.150569, -0.194566, 0.961399, 0.194566, -0.150569, 0.961399, 0.230306, -0.101284, 0.961399, 0.255839, -0.050069, 0.961399, 0.270564, 0, 0.961399, 0.275158, 0.050069, 0.961399, 0.270564, 0.101285, 0.961399, 0.255839, 0.150569, 0.961399, 0.230306, 0.194566, 0.961399, 0.194566, 0.230306, 0.961399, 0.150569, 0.255839, 0.961399, 0.101284, 0.270564, 0.961399, 0.050069, 0.275158, 0.961399, -0, 0.270564, 0.961399, -0.050069, 0.255839, 0.961399, -0.101285, 0.230306, 0.961399, -0.150569, 0.194566, 0.961399, -0.194566, 0.150569, 0.961399, -0.230306, 0.101284, 0.961399, -0.255839, 0.050069, 0.961399, -0.270564, 0, 0.961399, -0.275158, -0, 0.983305, -0.181963, -0.033110, 0.983305, -0.178925, -0.066980, 0.983305, -0.169187, -0.099572, 0.983305, -0.152302, -0.128667, 0.983305, -0.128667, -0.152302, 0.983305, -0.099572, -0.169187, 0.983305, -0.066980, -0.178925, 0.983305, -0.033111, -0.181963, 0.983305, 0, -0.178925, 0.983305, 0.033110, -0.169187, 0.983305, 0.066980, -0.152302, 0.983305, 0.099572, -0.128667, 0.983305, 0.128667, -0.099572, 0.983305, 0.152302, -0.066980, 0.983305, 0.169187, -0.033111, 0.983305, 0.178925, 0, 0.983305, 0.181963, 0.033110, 0.983305, 0.178925, 0.066980, 0.983305, 0.169187, 0.099572, 0.983305, 0.152302, 0.128667, 0.983305, 0.128667, 0.152302, 0.983305, 0.099572, 0.169187, 0.983305, 0.066980, 0.178925, 0.983305, 0.033111, 0.181963, 0.983305, -0, 0.178925, 0.983305, -0.033110, 0.169187, 0.983305, -0.066980, 0.152302, 0.983305, -0.099572, 0.128667, 0.983305, -0.128667, 0.099572, 0.983305, -0.152302, 0.066980, 0.983305, -0.169187, 0.033111, 0.983305, -0.178925, 0, 0.983305, -0.181963, -0, 0.995955, -0.089854, -0.016351, 0.995955, -0.088354, -0.033074, 0.995955, -0.083546, -0.049169, 0.995955, -0.075208, -0.063537, 0.995955, -0.063537, -0.075208, 0.995955, -0.049169, -0.083546, 0.995955, -0.033074, -0.088354, 0.995955, -0.016351, -0.089854, 0.995955, 0, -0.088354, 0.995955, 0.016351, -0.083546, 0.995955, 0.033074, -0.075208, 0.995955, 0.049169, -0.063537, 0.995955, 0.063537, -0.049169, 0.995955, 0.075208, -0.033074, 0.995955, 0.083546, -0.016351, 0.995955, 0.088354, 0, 0.995955, 0.089854, 0.016351, 0.995955, 0.088354, 0.033074, 0.995955, 0.083546, 0.049169, 0.995955, 0.075208, 0.063537, 0.995955, 0.063537, 0.075208, 0.995955, 0.049169, 0.083546, 0.995955, 0.033074, 0.088354, 0.995955, 0.016351, 0.089854, 0.995955, -0, 0.088354, 0.995955, -0.016351, 0.083546, 0.995955, -0.033074, 0.075208, 0.995955, -0.049169, 0.063537, 0.995955, -0.063537, 0.049169, 0.995955, -0.075208, 0.033074, 0.995955, -0.083546, 0.016351, 0.995955, -0.088354, 0, 0.995955, -0.089854, -0.004130, 0.998980, -0.044972, -0.012486, 0.998979, -0.043426, -0.020793, 0.998978, -0.040137, -0.028507, 0.998977, -0.035094, -0.035094, 0.998977, -0.028507, -0.040137, 0.998978, -0.020793, -0.043426, 0.998979, -0.012486, -0.044972, 0.998980, -0.004130, -0.044972, 0.998980, 0.004130, -0.043426, 0.998979, 0.012486, -0.040137, 0.998978, 0.020793, -0.035094, 0.998977, 0.028507, -0.028507, 0.998977, 0.035094, -0.020793, 0.998978, 0.040137, -0.012486, 0.998979, 0.043426, -0.004130, 0.998980, 0.044972, 0.004130, 0.998980, 0.044972, 0.012486, 0.998979, 0.043426, 0.020793, 0.998978, 0.040137, 0.028507, 0.998977, 0.035094, 0.035094, 0.998977, 0.028507, 0.040137, 0.998978, 0.020793, 0.043426, 0.998979, 0.012486, 0.044972, 0.998980, 0.004130, 0.044972, 0.998980, -0.004130, 0.043426, 0.998979, -0.012486, 0.040137, 0.998978, -0.020793, 0.035094, 0.998977, -0.028507, 0.028507, 0.998977, -0.035094, 0.020793, 0.998978, -0.040137, 0.012486, 0.998979, -0.043426, 0.004130, 0.998980, -0.044972, 0.004130, 0.998980, -0.044972, -0.867902, -0.492527, 0.064514, -0.862536, -0.502015, 0.063346, -0.857139, -0.511652, 0.059371, -0.852146, -0.520672, 0.052425, -0.847991, -0.528282, 0.042784, -0.845002, -0.533854, 0.031178, -0.843321, -0.537088, 0.018597, -0.842892, -0.538048, 0.006089, -0.841573, -0.539515, 0.026035, -0.831087, -0.550452, 0.079351, -0.811062, -0.569195, 0.134894, -0.779527, -0.596381, 0.191487, -0.734473, -0.631968, 0.247318, -0.674314, -0.674859, 0.299777, -0.598596, -0.722659, 0.345610, -0.508739, -0.771829, 0.381399, 0.508738, -0.771828, 0.381401, 0.598596, -0.722659, 0.345611, 0.674305, -0.674864, 0.299785, 0.734479, -0.631964, 0.247310, 0.779527, -0.596381, 0.191487, 0.811061, -0.569196, 0.134893, 0.831087, -0.550452, 0.079351, 0.841573, -0.539516, 0.026035, 0.842893, -0.538047, 0.006089, 0.843321, -0.537088, 0.018597, 0.845003, -0.533852, 0.031177, 0.847991, -0.528282, 0.042784, 0.852146, -0.520672, 0.052425, 0.857138, -0.511653, 0.059373, 0.862536, -0.502015, 0.063347, 0.867902, -0.492528, 0.064516, 0.867902, -0.492528, 0.064514, -0.872797, -0.487657, 0.020381, -0.870247, -0.491812, 0.028121, -0.866255, -0.498412, 0.034466, -0.861118, -0.506993, 0.037870, -0.855519, -0.516439, 0.037119, -0.850369, -0.525220, 0.031864, -0.846509, -0.531884, 0.022844, -0.844429, -0.535541, 0.011624, -0.844171, -0.536074, 0.000003, -0.838172, -0.542912, 0.052107, -0.824151, -0.556110, 0.107320, -0.800074, -0.576698, 0.165232, -0.763438, -0.605476, 0.224858, -0.711518, -0.642588, 0.284294, -0.642032, -0.686946, 0.340440, -0.554277, -0.735786, 0.389096, 0.450386, -0.784806, 0.425712, 0.554277, -0.735786, 0.389096, 0.642032, -0.686946, 0.340440, 0.711518, -0.642588, 0.284293, 0.763438, -0.605476, 0.224858, 0.800074, -0.576698, 0.165232, 0.824151, -0.556110, 0.107320, 0.838172, -0.542912, 0.052107, 0.844172, -0.536073, -0.000003, 0.844429, -0.535541, 0.011624, 0.846509, -0.531884, 0.022844, 0.850369, -0.525220, 0.031864, 0.855519, -0.516439, 0.037119, 0.861118, -0.506993, 0.037870, 0.866255, -0.498413, 0.034466, 0.870247, -0.491812, 0.028121, 0.872797, -0.487657, 0.020381, -0.852314, -0.517500, -0.075859, -0.858046, -0.510429, -0.056735, -0.860476, -0.508142, -0.037055, -0.859730, -0.510376, -0.019488, -0.856658, -0.515846, -0.006322, -0.852599, -0.522564, 0.001312, -0.848924, -0.528501, 0.003784, -0.846586, -0.532245, 0.002668, -0.845917, -0.533315, 0.000001, -0.839780, -0.539872, 0.057517, -0.825312, -0.552012, 0.118924, -0.800077, -0.570898, 0.184259, -0.760812, -0.597665, 0.252905, -0.703649, -0.632895, 0.322990, -0.624975, -0.675788, 0.390791, -0.523147, -0.723385, 0.450590, 0.400621, -0.770581, 0.495690, 0.523147, -0.723385, 0.450590, 0.624975, -0.675788, 0.390790, 0.703649, -0.632895, 0.322990, 0.760812, -0.597665, 0.252905, 0.800077, -0.570898, 0.184259, 0.825312, -0.552012, 0.118924, 0.839780, -0.539872, 0.057517, 0.845917, -0.533315, -0.000001, 0.846586, -0.532245, 0.002668, 0.848924, -0.528501, 0.003784, 0.852599, -0.522565, 0.001312, 0.856658, -0.515846, -0.006322, 0.859730, -0.510376, -0.019488, 0.860476, -0.508142, -0.037055, 0.858046, -0.510429, -0.056735, 0.852314, -0.517500, -0.075859, -0.818504, -0.542347, -0.189502, -0.837600, -0.524316, -0.153359, -0.849876, -0.514092, -0.115848, -0.855638, -0.511205, -0.080949, -0.856310, -0.513849, -0.051896, -0.854010, -0.519374, -0.030289, -0.850883, -0.525118, -0.015779, -0.848481, -0.529185, -0.006501, -0.847493, -0.530806, 0, -0.841192, -0.537044, 0.063084, -0.826172, -0.548020, 0.130818, -0.799591, -0.564963, 0.203646, -0.757434, -0.589225, 0.281259, -0.694733, -0.621687, 0.361733, -0.606668, -0.661711, 0.440560, -0.490957, -0.706096, 0.510283, 0.350941, -0.749086, 0.561882, 0.490957, -0.706096, 0.510283, 0.606668, -0.661711, 0.440560, 0.694733, -0.621687, 0.361733, 0.757435, -0.589225, 0.281259, 0.799591, -0.564962, 0.203646, 0.826172, -0.548020, 0.130819, 0.841192, -0.537044, 0.063084, 0.847493, -0.530806, -0, 0.848481, -0.529185, -0.006501, 0.850883, -0.525118, -0.015779, 0.854010, -0.519374, -0.030289, 0.856310, -0.513849, -0.051896, 0.855638, -0.511205, -0.080949, 0.849876, -0.514092, -0.115848, 0.837600, -0.524316, -0.153359, 0.818504, -0.542346, -0.189502, -0.766843, -0.557233, -0.318502, -0.806510, -0.530728, -0.260517, -0.833315, -0.514845, -0.201299, -0.848379, -0.508770, -0.146310, -0.854339, -0.510079, -0.099619, -0.854605, -0.515440, -0.063027, -0.852431, -0.521605, -0.035922, -0.850164, -0.526278, -0.015923, -0.848944, -0.528483, 0, -0.842457, -0.534349, 0.068826, -0.826793, -0.544014, 0.143045, -0.798695, -0.558706, 0.223460, -0.753399, -0.579908, 0.309996, -0.684889, -0.608684, 0.400537, -0.587326, -0.644479, 0.489587, -0.458211, -0.683904, 0.567730, 0.302402, -0.720871, 0.623617, 0.458211, -0.683904, 0.567730, 0.587326, -0.644478, 0.489587, 0.684889, -0.608684, 0.400537, 0.753399, -0.579908, 0.309996, 0.798695, -0.558706, 0.223460, 0.826793, -0.544014, 0.143045, 0.842457, -0.534349, 0.068826, 0.848944, -0.528483, -0, 0.850164, -0.526277, -0.015923, 0.852431, -0.521605, -0.035922, 0.854605, -0.515440, -0.063027, 0.854339, -0.510079, -0.099619, 0.848379, -0.508770, -0.146310, 0.833315, -0.514845, -0.201299, 0.806510, -0.530728, -0.260517, 0.766843, -0.557233, -0.318502, -0.694367, -0.556528, -0.456213, -0.762898, -0.526728, -0.374892, -0.809787, -0.508919, -0.291970, -0.837503, -0.502322, -0.215086, -0.850597, -0.504142, -0.149414, -0.854368, -0.510544, -0.096956, -0.853596, -0.517839, -0.056709, -0.851670, -0.523451, -0.025630, -0.850301, -0.526296, -0, -0.843614, -0.531720, 0.074762, -0.827229, -0.539877, 0.155646, -0.797456, -0.551945, 0.243762, -0.748788, -0.569456, 0.339170, -0.674235, -0.593585, 0.439391, -0.567181, -0.623848, 0.537699, -0.425421, -0.656842, 0.622555, 0.255922, -0.686597, 0.680506, 0.425421, -0.656842, 0.622555, 0.567181, -0.623848, 0.537699, 0.674235, -0.593585, 0.439391, 0.748788, -0.569456, 0.339170, 0.797456, -0.551945, 0.243762, 0.827229, -0.539877, 0.155645, 0.843614, -0.531720, 0.074762, 0.850301, -0.526296, 0, 0.851670, -0.523452, -0.025630, 0.853596, -0.517839, -0.056709, 0.854368, -0.510544, -0.096956, 0.850597, -0.504142, -0.149414, 0.837503, -0.502322, -0.215086, 0.809787, -0.508919, -0.291970, 0.762898, -0.526728, -0.374892, 0.694367, -0.556528, -0.456213, -0.602313, -0.536087, -0.591464, -0.706341, -0.509946, -0.490955, -0.778693, -0.495003, -0.385499, -0.822642, -0.491128, -0.286450, -0.844937, -0.495624, -0.201094, -0.853273, -0.504455, -0.132098, -0.854400, -0.513699, -0.078195, -0.853029, -0.520645, -0.035655, -0.851593, -0.524203, -0, -0.844697, -0.529094, 0.080912, -0.827525, -0.535497, 0.168659, -0.795938, -0.544487, 0.264605, -0.743682, -0.557592, 0.368821, -0.662887, -0.576066, 0.478256, -0.546476, -0.599570, 0.584705, -0.393089, -0.624974, 0.674455, 0.212247, -0.646941, 0.732406, 0.393089, -0.624974, 0.674455, 0.546476, -0.599570, 0.584705, 0.662887, -0.576066, 0.478256, 0.743682, -0.557592, 0.368821, 0.795938, -0.544487, 0.264605, 0.827525, -0.535497, 0.168659, 0.844697, -0.529094, 0.080912, 0.851593, -0.524203, 0, 0.853029, -0.520645, -0.035655, 0.854400, -0.513699, -0.078195, 0.853273, -0.504455, -0.132098, 0.844937, -0.495624, -0.201094, 0.822642, -0.491128, -0.286450, 0.778693, -0.495003, -0.385499, 0.706341, -0.509947, -0.490955, 0.602314, -0.536087, -0.591464, -0.497508, -0.495740, -0.711848, -0.638678, -0.479509, -0.601798, -0.740142, -0.472245, -0.478722, -0.803590, -0.474551, -0.359229, -0.837229, -0.484102, -0.254347, -0.851291, -0.496924, -0.168433, -0.854855, -0.509056, -0.100422, -0.854263, -0.517799, -0.046029, -0.852843, -0.522167, -0, -0.845736, -0.526413, 0.087293, -0.827726, -0.530756, 0.182123, -0.794199, -0.536125, 0.286039, -0.738155, -0.544009, 0.398975, -0.650969, -0.555771, 0.517067, -0.525467, -0.571382, 0.630402, -0.361690, -0.588368, 0.723190, 0.171949, -0.602520, 0.779361, 0.361690, -0.588368, 0.723190, 0.525467, -0.571382, 0.630402, 0.650969, -0.555771, 0.517067, 0.738155, -0.544009, 0.398975, 0.794199, -0.536125, 0.286039, 0.827726, -0.530755, 0.182123, 0.845736, -0.526413, 0.087293, 0.852843, -0.522167, 0, 0.854263, -0.517799, -0.046029, 0.854855, -0.509056, -0.100422, 0.851291, -0.496924, -0.168433, 0.837229, -0.484102, -0.254347, 0.803590, -0.474551, -0.359229, 0.740142, -0.472245, -0.478722, 0.638678, -0.479509, -0.601798, 0.497508, -0.495740, -0.711848, -0.390438, -0.439878, -0.808743, -0.564045, -0.436595, -0.700884, -0.695156, -0.440522, -0.568066, -0.780391, -0.452129, -0.431936, -0.827392, -0.469161, -0.308725, -0.848392, -0.487683, -0.205904, -0.854972, -0.503774, -0.123428, -0.855394, -0.514857, -0.056780, -0.854072, -0.520154, -0, -0.846760, -0.523617, 0.093926, -0.827875, -0.525525, 0.196077, -0.792299, -0.526624, 0.308107, -0.732286, -0.528362, 0.429640, -0.638609, -0.532303, 0.555727, -0.504419, -0.538998, 0.674569, -0.331665, -0.547077, 0.768573, 0.135433, -0.553840, 0.821535, 0.331665, -0.547077, 0.768573, 0.504419, -0.538998, 0.674569, 0.638609, -0.532303, 0.555727, 0.732286, -0.528362, 0.429640, 0.792299, -0.526624, 0.308107, 0.827875, -0.525525, 0.196077, 0.846760, -0.523617, 0.093926, 0.854072, -0.520154, 0, 0.855394, -0.514856, -0.056780, 0.854972, -0.503774, -0.123428, 0.848392, -0.487683, -0.205904, 0.827392, -0.469161, -0.308725, 0.780391, -0.452129, -0.431936, 0.695156, -0.440522, -0.568066, 0.564045, -0.436595, -0.700884, 0.390438, -0.439878, -0.808743, -0.291047, -0.375286, -0.880030, -0.487889, -0.384158, -0.783829, -0.645653, -0.400551, -0.650147, -0.753408, -0.423665, -0.502876, -0.815407, -0.450417, -0.363642, -0.844555, -0.476440, -0.244399, -0.854760, -0.497702, -0.147236, -0.856439, -0.511759, -0.067936, -0.855300, -0.518132, -0, -0.847800, -0.520642, 0.100832, -0.828021, -0.519659, 0.210562, -0.790301, -0.515715, 0.330851, -0.726156, -0.510251, 0.460805, -0.625943, -0.505212, 0.594101, -0.483602, -0.502106, 0.716951, -0.303415, -0.501122, 0.810442, 0.102977, -0.501274, 0.859139, 0.303415, -0.501122, 0.810442, 0.483602, -0.502106, 0.716951, 0.625943, -0.505212, 0.594101, 0.726156, -0.510251, 0.460805, 0.790301, -0.515715, 0.330851, 0.828021, -0.519659, 0.210562, 0.847800, -0.520642, 0.100832, 0.855301, -0.518132, 0, 0.856439, -0.511759, -0.067936, 0.854760, -0.497702, -0.147236, 0.844555, -0.476440, -0.244399, 0.815407, -0.450417, -0.363642, 0.753408, -0.423665, -0.502876, 0.645653, -0.400551, -0.650147, 0.487889, -0.384158, -0.783829, 0.291047, -0.375286, -0.880030, -0.205674, -0.308225, -0.928814, -0.415478, -0.325941, -0.849200, -0.594177, -0.353770, -0.722358, -0.723346, -0.389269, -0.570298, -0.801354, -0.427540, -0.418381, -0.839774, -0.462884, -0.283757, -0.854231, -0.490667, -0.171859, -0.857415, -0.508443, -0.079528, -0.856548, -0.516068, -0, -0.848887, -0.517417, 0.108033, -0.828216, -0.512986, 0.225617, -0.788278, -0.503076, 0.354307, -0.719849, -0.489208, 0.492435, -0.613112, -0.473990, 0.632003, -0.463291, -0.460357, 0.757253, -0.277302, -0.450475, 0.848632, 0.074763, -0.445051, 0.892379, 0.277302, -0.450476, 0.848632, 0.463291, -0.460357, 0.757253, 0.613112, -0.473990, 0.632003, 0.719849, -0.489208, 0.492435, 0.788278, -0.503076, 0.354307, 0.828216, -0.512986, 0.225617, 0.848887, -0.517417, 0.108033, 0.856548, -0.516068, 0, 0.857415, -0.508443, -0.079528, 0.854231, -0.490667, -0.171859, 0.839774, -0.462884, -0.283757, 0.801354, -0.427540, -0.418381, 0.723346, -0.389269, -0.570298, 0.594177, -0.353770, -0.722358, 0.415478, -0.325941, -0.849200, 0.205674, -0.308225, -0.928814, -0.136707, -0.242867, -0.960379, -0.350760, -0.265414, -0.898066, -0.543452, -0.302027, -0.783224, -0.691227, -0.349361, -0.632576, -0.785423, -0.400271, -0.472115, -0.834067, -0.446674, -0.323750, -0.853403, -0.482471, -0.197296, -0.858342, -0.504838, -0.091582, -0.857835, -0.513926, -0, -0.850058, -0.513856, 0.115553, -0.828524, -0.505300, 0.241289, -0.786307, -0.488320, 0.378505, -0.713455, -0.464676, 0.524460, -0.600259, -0.438050, 0.669179, -0.443759, -0.413366, 0.795114, -0.253652, -0.395062, 0.882942, 0.050912, -0.385273, 0.921397, 0.253652, -0.395062, 0.882942, 0.443759, -0.413366, 0.795114, 0.600259, -0.438050, 0.669179, 0.713455, -0.464676, 0.524460, 0.786307, -0.488320, 0.378505, 0.828524, -0.505300, 0.241289, 0.850058, -0.513856, 0.115553, 0.857835, -0.513926, 0, 0.858342, -0.504838, -0.091582, 0.853403, -0.482471, -0.197296, 0.834067, -0.446674, -0.323750, 0.785423, -0.400271, -0.472115, 0.691227, -0.349361, -0.632576, 0.543452, -0.302027, -0.783224, 0.350760, -0.265414, -0.898066, 0.136707, -0.242867, -0.960379, -0.083861, -0.181281, -0.979849, -0.296008, -0.205143, -0.932896, -0.495950, -0.247216, -0.832417, -0.658302, -0.304614, -0.688367, -0.767941, -0.368449, -0.523940, -0.827486, -0.427449, -0.364082, -0.852301, -0.472882, -0.223529, -0.859242, -0.500860, -0.104128, -0.859185, -0.511666, -0, -0.851358, -0.509860, 0.123419, -0.829019, -0.496345, 0.257623, -0.784478, -0.470968, 0.403465, -0.707061, -0.435984, 0.556760, -0.587528, -0.396725, 0.705280, -0.425276, -0.360712, 0.830077, -0.232761, -0.334763, 0.913102, 0.031512, -0.321941, 0.946235, 0.232761, -0.334763, 0.913102, 0.425276, -0.360712, 0.830077, 0.587528, -0.396725, 0.705280, 0.707061, -0.435984, 0.556760, 0.784478, -0.470968, 0.403465, 0.829019, -0.496345, 0.257623, 0.851358, -0.509860, 0.123419, 0.859185, -0.511666, 0, 0.859242, -0.500860, -0.104128, 0.852301, -0.472882, -0.223529, 0.827485, -0.427449, -0.364082, 0.767941, -0.368449, -0.523939, 0.658302, -0.304614, -0.688367, 0.495950, -0.247216, -0.832417, 0.296008, -0.205143, -0.932896, 0.083861, -0.181281, -0.979849, -0.045587, -0.124097, -0.991222, -0.252069, -0.146687, -0.956527, -0.453608, -0.190978, -0.870498, -0.625930, -0.255862, -0.736713, -0.749364, -0.332009, -0.572908, -0.820125, -0.404815, -0.404376, -0.850969, -0.461621, -0.250514, -0.860142, -0.496410, -0.117192, -0.860624, -0.509240, -0, -0.852840, -0.505302, 0.131661, -0.829794, -0.485798, 0.274669, -0.782891, -0.450418, 0.429191, -0.700751, -0.402320, 0.589141, -0.575051, -0.349254, 0.739823, -0.408102, -0.301951, 0.861556, -0.214897, -0.269439, 0.938734, 0.016639, -0.254985, 0.966802, 0.214897, -0.269439, 0.938734, 0.408102, -0.301951, 0.861556, 0.575051, -0.349254, 0.739823, 0.700751, -0.402320, 0.589141, 0.782892, -0.450418, 0.429191, 0.829794, -0.485798, 0.274669, 0.852840, -0.505302, 0.131661, 0.860624, -0.509240, 0, 0.860142, -0.496410, -0.117192, 0.850969, -0.461621, -0.250514, 0.820125, -0.404815, -0.404376, 0.749364, -0.332009, -0.572907, 0.625930, -0.255862, -0.736713, 0.453608, -0.190978, -0.870498, 0.252069, -0.146687, -0.956527, 0.045587, -0.124097, -0.991222, -0.019996, -0.071161, -0.997264, -0.218847, -0.090784, -0.971527, -0.417743, -0.134556, -0.898546, -0.595446, -0.203987, -0.777067, -0.730280, -0.290989, -0.618074, -0.812135, -0.378352, -0.444169, -0.849468, -0.448352, -0.278182, -0.861077, -0.491364, -0.130801, -0.862187, -0.506591, -0, -0.854572, -0.500020, 0.140311, -0.830963, -0.473239, 0.292481, -0.781656, -0.425902, 0.455654, -0.694585, -0.362694, 0.621293, -0.562941, -0.294792, 0.772137, -0.392483, -0.236648, 0.888794, -0.200307, -0.198965, 0.959318, 0.006375, -0.184319, 0.982846, 0.200307, -0.198964, 0.959318, 0.392483, -0.236648, 0.888794, 0.562941, -0.294792, 0.772137, 0.694585, -0.362694, 0.621293, 0.781656, -0.425902, 0.455654, 0.830963, -0.473239, 0.292481, 0.854572, -0.500020, 0.140311, 0.862187, -0.506591, 0, 0.861077, -0.491364, -0.130801, 0.849468, -0.448352, -0.278182, 0.812135, -0.378352, -0.444169, 0.730280, -0.290989, -0.618074, 0.595446, -0.203987, -0.777067, 0.417743, -0.134556, -0.898546, 0.218847, -0.090784, -0.971527, 0.019996, -0.071161, -0.997264, -0.005305, -0.021988, -0.999744, -0.195741, -0.037631, -0.979933, -0.389100, -0.078778, -0.917821, -0.568059, -0.149822, -0.809236, -0.711379, -0.245514, -0.658531, -0.803730, -0.347603, -0.482897, -0.847888, -0.432656, -0.306421, -0.862095, -0.485564, -0.144980, -0.863912, -0.503643, -0, -0.856643, -0.493801, 0.149407, -0.832672, -0.458114, 0.311111, -0.780881, -0.396426, 0.482774, -0.688586, -0.315903, 0.652729, -0.551269, -0.232432, 0.801297, -0.378641, -0.164436, 0.910820, -0.189212, -0.123285, 0.974166, 0.000801, -0.109893, 0.993943, 0.189212, -0.123285, 0.974166, 0.378641, -0.164436, 0.910820, 0.551269, -0.232432, 0.801297, 0.688586, -0.315903, 0.652729, 0.780881, -0.396426, 0.482774, 0.832672, -0.458114, 0.311110, 0.856643, -0.493801, 0.149407, 0.863912, -0.503643, 0, 0.862095, -0.485564, -0.144980, 0.847888, -0.432656, -0.306421, 0.803730, -0.347603, -0.482897, 0.711379, -0.245514, -0.658531, 0.568059, -0.149822, -0.809236, 0.389100, -0.078778, -0.917821, 0.195741, -0.037631, -0.979933, 0.005305, -0.021988, -0.999744, 0, 0, -1, -0.181798, -0.042613, -0.982412, -0.364303, -0.143162, -0.920211, -0.527696, -0.264670, -0.807147, -0.654962, -0.376896, -0.654962, -0.741827, -0.463116, -0.484991, -0.794286, -0.519838, -0.314450, -0.820981, -0.550372, -0.151925, -0.828793, -0.559555, 0, -0.820981, -0.550372, 0.151925, -0.794286, -0.519838, 0.314450, -0.741827, -0.463116, 0.484991, -0.654962, -0.376896, 0.654962, -0.527696, -0.264670, 0.807148, -0.364303, -0.143162, 0.920211, -0.181798, -0.042613, 0.982412, 0, 0, 1, 0.181798, -0.042613, 0.982412, 0.364303, -0.143162, 0.920211, 0.527696, -0.264670, 0.807147, 0.654962, -0.376896, 0.654962, 0.741827, -0.463116, 0.484991, 0.794286, -0.519838, 0.314450, 0.820981, -0.550372, 0.151925, 0.828793, -0.559555, 0, 0.820981, -0.550372, -0.151925, 0.794286, -0.519838, -0.314450, 0.741827, -0.463116, -0.484991, 0.654962, -0.376896, -0.654962, 0.527696, -0.264670, -0.807148, 0.364303, -0.143162, -0.920211, 0.181798, -0.042613, -0.982412, 0, 0, -1, 0.009452, 0.089850, -0.995910, -0.156200, 0.039325, -0.986942, -0.333443, -0.061576, -0.940757, -0.503736, -0.186859, -0.843406, -0.645668, -0.308600, -0.698483, -0.747790, -0.406372, -0.525044, -0.811554, -0.472604, -0.343549, -0.844571, -0.508820, -0.166742, -0.854299, -0.519782, 0, -0.844571, -0.508820, 0.166742, -0.811554, -0.472603, 0.343549, -0.747790, -0.406372, 0.525044, -0.645668, -0.308600, 0.698483, -0.503736, -0.186859, 0.843406, -0.333443, -0.061576, 0.940757, -0.156200, 0.039325, 0.986942, -0.009452, 0.089850, 0.995910, 0.156200, 0.039325, 0.986942, 0.333443, -0.061576, 0.940757, 0.503736, -0.186859, 0.843406, 0.645668, -0.308600, 0.698483, 0.747790, -0.406372, 0.525044, 0.811554, -0.472604, 0.343549, 0.844571, -0.508820, 0.166742, 0.854299, -0.519782, -0, 0.844571, -0.508820, -0.166742, 0.811554, -0.472603, -0.343549, 0.747790, -0.406372, -0.525044, 0.645668, -0.308600, -0.698483, 0.503736, -0.186859, -0.843406, 0.333443, -0.061576, -0.940757, 0.156200, 0.039325, -0.986942, -0.009452, 0.089850, -0.995910, 0.033441, 0.181861, -0.982755, -0.119753, 0.128092, -0.984506, -0.292105, 0.030291, -0.955906, -0.469034, -0.095129, -0.878042, -0.627642, -0.224337, -0.745479, -0.749325, -0.334106, -0.571739, -0.828817, -0.411561, -0.379052, -0.871049, -0.454928, -0.185241, -0.883630, -0.468187, 0, -0.871049, -0.454928, 0.185241, -0.828817, -0.411561, 0.379052, -0.749325, -0.334106, 0.571739, -0.627642, -0.224337, 0.745479, -0.469034, -0.095129, 0.878042, -0.292105, 0.030291, 0.955906, -0.119753, 0.128092, 0.984506, -0.033441, 0.181861, 0.982755, 0.119753, 0.128092, 0.984506, 0.292105, 0.030291, 0.955906, 0.469034, -0.095129, 0.878042, 0.627642, -0.224337, 0.745479, 0.749325, -0.334106, 0.571739, 0.828817, -0.411561, 0.379052, 0.871049, -0.454928, 0.185241, 0.883630, -0.468187, -0, 0.871049, -0.454928, -0.185241, 0.828817, -0.411561, -0.379052, 0.749325, -0.334106, -0.571739, 0.627642, -0.224337, -0.745479, 0.469034, -0.095129, -0.878042, 0.292105, 0.030291, -0.955906, 0.119753, 0.128092, -0.984506, -0.033441, 0.181861, -0.982755, 0.067245, 0.274535, -0.959223, -0.074440, 0.221816, -0.972243, -0.240348, 0.131329, -0.961762, -0.421521, 0.011319, -0.906748, -0.597126, -0.120534, -0.793040, -0.742852, -0.240636, -0.624713, -0.844183, -0.330323, -0.422188, -0.900171, -0.382375, -0.208524, -0.917146, -0.398552, 0, -0.900170, -0.382375, 0.208524, -0.844183, -0.330323, 0.422188, -0.742852, -0.240636, 0.624713, -0.597126, -0.120534, 0.793040, -0.421521, 0.011319, 0.906748, -0.240348, 0.131329, 0.961762, -0.074440, 0.221816, 0.972243, -0.067245, 0.274535, 0.959223, 0.074440, 0.221816, 0.972243, 0.240348, 0.131329, 0.961762, 0.421521, 0.011319, 0.906748, 0.597126, -0.120534, 0.793040, 0.742852, -0.240636, 0.624713, 0.844183, -0.330323, 0.422188, 0.900171, -0.382375, 0.208524, 0.917146, -0.398552, -0, 0.900170, -0.382375, -0.208524, 0.844183, -0.330323, -0.422188, 0.742852, -0.240636, -0.624713, 0.597126, -0.120534, -0.793040, 0.421521, 0.011319, -0.906748, 0.240348, 0.131329, -0.961762, 0.074440, 0.221816, -0.972243, -0.067245, 0.274535, -0.959223, 0.107486, 0.365962, -0.924402, -0.022209, 0.318010, -0.947827, -0.178784, 0.239199, -0.954369, -0.359437, 0.131658, -0.923835, -0.549172, 0.005651, -0.835690, -0.722048, -0.118839, -0.681560, -0.852999, -0.219160, -0.473669, -0.929861, -0.280628, -0.237919, -0.953862, -0.300244, 0, -0.929861, -0.280628, 0.237919, -0.852999, -0.219160, 0.473669, -0.722048, -0.118839, 0.681561, -0.549172, 0.005651, 0.835690, -0.359437, 0.131658, 0.923835, -0.178784, 0.239199, 0.954369, -0.022209, 0.318010, 0.947827, -0.107486, 0.365962, 0.924402, 0.022209, 0.318010, 0.947827, 0.178784, 0.239199, 0.954369, 0.359437, 0.131658, 0.923835, 0.549172, 0.005651, 0.835690, 0.722048, -0.118839, 0.681560, 0.852999, -0.219160, 0.473669, 0.929861, -0.280628, 0.237919, 0.953862, -0.300244, -0, 0.929861, -0.280628, -0.237919, 0.852999, -0.219160, -0.473669, 0.722048, -0.118839, -0.681561, 0.549172, 0.005651, -0.835690, 0.359437, 0.131658, -0.923835, 0.178784, 0.239199, -0.954369, 0.022209, 0.318010, -0.947827, -0.107486, 0.365962, -0.924402, 0.151432, 0.453998, -0.878040, 0.034792, 0.413654, -0.909769, -0.108938, 0.350160, -0.930333, -0.282234, 0.262375, -0.922770, -0.478445, 0.154085, -0.864493, -0.676653, 0.038016, -0.735320, -0.844530, -0.064596, -0.531598, -0.952487, -0.132516, -0.274242, -0.987896, -0.155119, 0.000001, -0.952487, -0.132516, 0.274242, -0.844530, -0.064596, 0.531598, -0.676653, 0.038016, 0.735320, -0.478445, 0.154085, 0.864493, -0.282234, 0.262375, 0.922770, -0.108938, 0.350160, 0.930333, 0.034792, 0.413654, 0.909769, -0.151432, 0.453998, 0.878040, -0.034792, 0.413654, 0.909769, 0.108938, 0.350160, 0.930333, 0.282234, 0.262375, 0.922770, 0.478445, 0.154085, 0.864493, 0.676653, 0.038016, 0.735320, 0.844530, -0.064596, 0.531598, 0.952487, -0.132516, 0.274242, 0.987896, -0.155119, -0.000001, 0.952487, -0.132516, -0.274242, 0.844530, -0.064596, -0.531598, 0.676653, 0.038016, -0.735320, 0.478445, 0.154085, -0.864493, 0.282234, 0.262375, -0.922770, 0.108938, 0.350160, -0.930333, -0.034792, 0.413654, -0.909769, -0.151432, 0.453998, -0.878040, 0.196750, 0.536514, -0.820635, 0.094195, 0.505462, -0.857692, -0.033406, 0.459325, -0.887640, -0.191656, 0.396675, -0.897729, -0.381678, 0.318362, -0.867737, -0.593264, 0.230280, -0.771368, -0.796923, 0.146019, -0.586167, -0.945371, 0.085285, -0.314643, -0.997954, 0.063938, 0, -0.945371, 0.085285, 0.314643, -0.796923, 0.146019, 0.586167, -0.593264, 0.230280, 0.771368, -0.381678, 0.318362, 0.867737, -0.191656, 0.396675, 0.897729, -0.033406, 0.459325, 0.887640, 0.094195, 0.505462, 0.857692, -0.196750, 0.536514, 0.820635, -0.094195, 0.505462, 0.857692, 0.033406, 0.459325, 0.887640, 0.191656, 0.396675, 0.897729, 0.381678, 0.318362, 0.867737, 0.593264, 0.230280, 0.771368, 0.796923, 0.146019, 0.586167, 0.945371, 0.085285, 0.314643, 0.997954, 0.063938, -0, 0.945371, 0.085285, -0.314643, 0.796923, 0.146019, -0.586167, 0.593264, 0.230280, -0.771368, 0.381678, 0.318362, -0.867737, 0.191656, 0.396675, -0.897729, 0.033406, 0.459325, -0.887640, -0.094195, 0.505462, -0.857692, -0.196750, 0.536514, -0.820635, 0.241453, 0.611649, -0.753383, 0.153568, 0.590307, -0.792436, 0.044355, 0.561412, -0.826347, -0.092310, 0.525281, -0.845907, -0.261515, 0.483885, -0.835144, -0.462750, 0.441609, -0.768664, -0.678601, 0.405166, -0.612651, -0.857854, 0.381422, -0.344390, -0.927578, 0.373630, 0, -0.857854, 0.381422, 0.344390, -0.678601, 0.405166, 0.612651, -0.462750, 0.441609, 0.768664, -0.261515, 0.483885, 0.835144, -0.092310, 0.525281, 0.845907, 0.044355, 0.561412, 0.826347, 0.153568, 0.590307, 0.792436, -0.241453, 0.611649, 0.753383, -0.153568, 0.590307, 0.792436, -0.044355, 0.561412, 0.826347, 0.092310, 0.525281, 0.845907, 0.261515, 0.483885, 0.835144, 0.462750, 0.441609, 0.768664, 0.678601, 0.405166, 0.612651, 0.857854, 0.381422, 0.344390, 0.927578, 0.373630, -0, 0.857854, 0.381422, -0.344390, 0.678601, 0.405166, -0.612651, 0.462750, 0.441609, -0.768664, 0.261515, 0.483885, -0.835144, 0.092310, 0.525281, -0.845907, -0.044355, 0.561412, -0.826347, -0.153568, 0.590307, -0.792436, -0.241453, 0.611649, -0.753383, 0.283928, 0.678006, -0.678006, 0.210655, 0.665641, -0.715924, 0.120591, 0.651790, -0.748750, 0.009056, 0.638895, -0.769240, -0.128531, 0.631546, -0.764610, -0.294123, 0.636390, -0.713092, -0.478364, 0.658596, -0.580878, -0.640699, 0.690931, -0.334842, -0.707107, 0.707107, 0, -0.640699, 0.690931, 0.334842, -0.478364, 0.658596, 0.580878, -0.294123, 0.636390, 0.713092, -0.128531, 0.631546, 0.764610, 0.009056, 0.638895, 0.769241, 0.120591, 0.651790, 0.748750, 0.210655, 0.665641, 0.715924, -0.283928, 0.678006, 0.678006, -0.210655, 0.665641, 0.715924, -0.120591, 0.651790, 0.748750, -0.009056, 0.638895, 0.769240, 0.128531, 0.631546, 0.764610, 0.294123, 0.636390, 0.713092, 0.478364, 0.658596, 0.580878, 0.640699, 0.690931, 0.334842, 0.707107, 0.707107, 0, 0.640699, 0.690931, -0.334842, 0.478364, 0.658596, -0.580878, 0.294123, 0.636390, -0.713092, 0.128531, 0.631546, -0.764610, -0.009056, 0.638895, -0.769241, -0.120591, 0.651790, -0.748750, -0.210655, 0.665641, -0.715924, -0.283928, 0.678006, -0.678006, 0.322970, 0.734748, -0.596520, 0.263608, 0.729787, -0.630810, 0.191958, 0.727372, -0.658849, 0.105513, 0.731125, -0.674036, 0.002419, 0.746727, -0.665126, -0.116542, 0.780913, -0.613671, -0.242374, 0.835723, -0.492770, -0.347451, 0.894959, -0.279868, -0.388835, 0.921307, -0, -0.347451, 0.894959, 0.279867, -0.242374, 0.835723, 0.492770, -0.116542, 0.780913, 0.613671, 0.002419, 0.746727, 0.665126, 0.105513, 0.731125, 0.674036, 0.191958, 0.727372, 0.658849, 0.263608, 0.729787, 0.630810, -0.322970, 0.734748, 0.596520, -0.263608, 0.729787, 0.630810, -0.191958, 0.727372, 0.658849, -0.105513, 0.731125, 0.674036, -0.002419, 0.746727, 0.665126, 0.116542, 0.780913, 0.613671, 0.242374, 0.835723, 0.492770, 0.347451, 0.894959, 0.279868, 0.388835, 0.921307, 0, 0.347451, 0.894959, -0.279867, 0.242374, 0.835723, -0.492770, 0.116542, 0.780913, -0.613671, -0.002419, 0.746727, -0.665126, -0.105513, 0.731125, -0.674036, -0.191958, 0.727372, -0.658849, -0.263608, 0.729787, -0.630810, -0.322970, 0.734748, -0.596520, 0.357776, 0.781593, -0.510989, 0.311133, 0.782031, -0.540021, 0.256062, 0.786965, -0.561353, 0.191920, 0.799925, -0.568584, 0.119278, 0.825493, -0.551665, 0.041366, 0.867317, -0.496035, -0.033401, 0.922392, -0.384807, -0.089405, 0.973348, -0.211189, -0.109821, 0.993951, -0.000001, -0.089405, 0.973348, 0.211189, -0.033401, 0.922392, 0.384807, 0.041366, 0.867317, 0.496035, 0.119278, 0.825493, 0.551665, 0.191920, 0.799925, 0.568584, 0.256062, 0.786965, 0.561353, 0.311133, 0.782031, 0.540021, -0.357776, 0.781593, 0.510989, -0.311133, 0.782031, 0.540021, -0.256062, 0.786965, 0.561353, -0.191920, 0.799925, 0.568584, -0.119278, 0.825493, 0.551665, -0.041366, 0.867317, 0.496035, 0.033401, 0.922392, 0.384807, 0.089405, 0.973348, 0.211189, 0.109821, 0.993951, 0.000001, 0.089405, 0.973348, -0.211189, 0.033401, 0.922392, -0.384807, -0.041366, 0.867317, -0.496035, -0.119278, 0.825493, -0.551665, -0.191920, 0.799925, -0.568584, -0.256062, 0.786965, -0.561353, -0.311133, 0.782031, -0.540021, -0.357776, 0.781593, -0.510989, 0.387907, 0.818730, -0.423331, 0.352512, 0.822500, -0.446350, 0.311639, 0.831042, -0.460707, 0.265765, 0.846954, -0.460476, 0.216610, 0.872776, -0.437427, 0.167797, 0.908910, -0.381741, 0.125278, 0.950091, -0.285715, 0.096428, 0.983673, -0.151953, 0.086572, 0.996246, -0.000001, 0.096428, 0.983673, 0.151953, 0.125278, 0.950091, 0.285715, 0.167797, 0.908910, 0.381741, 0.216610, 0.872776, 0.437427, 0.265765, 0.846954, 0.460476, 0.311639, 0.831042, 0.460707, 0.352512, 0.822500, 0.446350, -0.387907, 0.818730, 0.423331, -0.352512, 0.822500, 0.446350, -0.311639, 0.831042, 0.460707, -0.265765, 0.846954, 0.460476, -0.216610, 0.872776, 0.437427, -0.167797, 0.908910, 0.381741, -0.125278, 0.950091, 0.285715, -0.096428, 0.983673, 0.151953, -0.086572, 0.996246, 0.000001, -0.096428, 0.983673, -0.151953, -0.125278, 0.950091, -0.285715, -0.167797, 0.908910, -0.381741, -0.216610, 0.872776, -0.437427, -0.265765, 0.846954, -0.460476, -0.311639, 0.831042, -0.460707, -0.352512, 0.822500, -0.446350, -0.387906, 0.818730, -0.423331, 0.413220, 0.846694, -0.335198, 0.387521, 0.851938, -0.352177, 0.358406, 0.861167, -0.360468, 0.326780, 0.875847, -0.355117, 0.294482, 0.896789, -0.330226, 0.264379, 0.922759, -0.280394, 0.240005, 0.949138, -0.203799, 0.224548, 0.968688, -0.105930, 0.219478, 0.975617, -0.000001, 0.224548, 0.968688, 0.105930, 0.240005, 0.949138, 0.203799, 0.264379, 0.922759, 0.280394, 0.294482, 0.896789, 0.330226, 0.326780, 0.875847, 0.355117, 0.358406, 0.861167, 0.360468, 0.387521, 0.851938, 0.352177, -0.413220, 0.846694, 0.335198, -0.387521, 0.851938, 0.352177, -0.358406, 0.861167, 0.360468, -0.326780, 0.875847, 0.355117, -0.294482, 0.896789, 0.330226, -0.264379, 0.922759, 0.280394, -0.240005, 0.949138, 0.203799, -0.224548, 0.968688, 0.105930, -0.219478, 0.975617, 0.000001, -0.224548, 0.968688, -0.105930, -0.240005, 0.949138, -0.203799, -0.264379, 0.922759, -0.280394, -0.294482, 0.896789, -0.330226, -0.326780, 0.875847, -0.355117, -0.358406, 0.861167, -0.360468, -0.387521, 0.851938, -0.352177, -0.413220, 0.846694, -0.335198, 0.433795, 0.866232, -0.247921, 0.416308, 0.871450, -0.259351, 0.396764, 0.879402, -0.263118, 0.376045, 0.890656, -0.255582, 0.355614, 0.905089, -0.233134, 0.337382, 0.921261, -0.193521, 0.323284, 0.936244, -0.137604, 0.314684, 0.946582, -0.070407, 0.311925, 0.950107, -0.000001, 0.314684, 0.946582, 0.070407, 0.323284, 0.936244, 0.137604, 0.337382, 0.921262, 0.193521, 0.355614, 0.905089, 0.233134, 0.376045, 0.890656, 0.255582, 0.396764, 0.879402, 0.263118, 0.416308, 0.871450, 0.259351, -0.433795, 0.866232, 0.247921, -0.416308, 0.871450, 0.259351, -0.396764, 0.879402, 0.263118, -0.376045, 0.890656, 0.255582, -0.355614, 0.905089, 0.233134, -0.337382, 0.921261, 0.193521, -0.323284, 0.936244, 0.137604, -0.314684, 0.946582, 0.070407, -0.311925, 0.950107, 0.000001, -0.314684, 0.946582, -0.070407, -0.323284, 0.936244, -0.137604, -0.337382, 0.921262, -0.193521, -0.355614, 0.905089, -0.233134, -0.376045, 0.890656, -0.255582, -0.396764, 0.879402, -0.263118, -0.416308, 0.871450, -0.259351, -0.433795, 0.866232, -0.247921, 0.449853, 0.878192, -0.162512, 0.439254, 0.882287, -0.169193, 0.427488, 0.887861, -0.170164, 0.415192, 0.894980, -0.163176, 0.403318, 0.903267, -0.146432, 0.392983, 0.911760, -0.119411, 0.385185, 0.919048, -0.083566, 0.380519, 0.923805, -0.042302, 0.379037, 0.925382, -0.000002, 0.380519, 0.923805, 0.042302, 0.385184, 0.919048, 0.083566, 0.392983, 0.911760, 0.119411, 0.403318, 0.903267, 0.146432, 0.415192, 0.894980, 0.163176, 0.427489, 0.887861, 0.170164, 0.439254, 0.882287, 0.169193, -0.449853, 0.878192, 0.162512, -0.439254, 0.882287, 0.169193, -0.427488, 0.887861, 0.170164, -0.415192, 0.894980, 0.163176, -0.403318, 0.903267, 0.146432, -0.392983, 0.911760, 0.119411, -0.385185, 0.919048, 0.083566, -0.380519, 0.923805, 0.042302, -0.379037, 0.925382, 0.000002, -0.380519, 0.923805, -0.042302, -0.385184, 0.919048, -0.083566, -0.392983, 0.911760, -0.119411, -0.403318, 0.903267, -0.146432, -0.415192, 0.894980, -0.163176, -0.427489, 0.887861, -0.170164, -0.439254, 0.882287, -0.169193, -0.449853, 0.878192, -0.162512, 0.461705, 0.883445, -0.079704, 0.456868, 0.885694, -0.082571, 0.451496, 0.888463, -0.082371, 0.445908, 0.891664, -0.078106, 0.440559, 0.895056, -0.069162, 0.435953, 0.898248, -0.055641, 0.432515, 0.900804, -0.038495, 0.430475, 0.902395, -0.019344, 0.429830, 0.902910, -0.000002, 0.430475, 0.902395, 0.019344, 0.432516, 0.900804, 0.038496, 0.435953, 0.898248, 0.055641, 0.440559, 0.895056, 0.069162, 0.445908, 0.891664, 0.078106, 0.451496, 0.888463, 0.082371, 0.456868, 0.885694, 0.082571, -0.461705, 0.883445, 0.079704, -0.456868, 0.885694, 0.082571, -0.451496, 0.888463, 0.082371, -0.445908, 0.891664, 0.078106, -0.440559, 0.895056, 0.069162, -0.435953, 0.898248, 0.055641, -0.432515, 0.900804, 0.038495, -0.430475, 0.902395, 0.019344, -0.429830, 0.902910, 0.000002, -0.430475, 0.902395, -0.019344, -0.432516, 0.900804, -0.038496, -0.435953, 0.898248, -0.055641, -0.440559, 0.895056, -0.069162, -0.445908, 0.891664, -0.078106, -0.451496, 0.888463, -0.082371, -0.456868, 0.885694, -0.082571, -0.461705, 0.883445, -0.079704, 0.461679, 0.886150, -0.039893, 0.459401, 0.887391, -0.038573, 0.457158, 0.888668, -0.035707, 0.455085, 0.889899, -0.031259, 0.453328, 0.890981, -0.025427, 0.451988, 0.891831, -0.018560, 0.451117, 0.892395, -0.011146, 0.450710, 0.892663, -0.003693, 0.450710, 0.892663, 0.003693, 0.451117, 0.892395, 0.011146, 0.451988, 0.891831, 0.018560, 0.453328, 0.890981, 0.025427, 0.455086, 0.889899, 0.031263, 0.457157, 0.888669, 0.035705, 0.459401, 0.887391, 0.038573, 0.461679, 0.886150, 0.039893, -0.461679, 0.886150, 0.039893, -0.459401, 0.887391, 0.038573, -0.457158, 0.888668, 0.035707, -0.455085, 0.889899, 0.031259, -0.453328, 0.890981, 0.025427, -0.451988, 0.891831, 0.018560, -0.451117, 0.892395, 0.011146, -0.450710, 0.892663, 0.003693, -0.450710, 0.892663, -0.003693, -0.451117, 0.892395, -0.011146, -0.451988, 0.891831, -0.018560, -0.453328, 0.890981, -0.025427, -0.455086, 0.889899, -0.031263, -0.457157, 0.888669, -0.035705, -0.459401, 0.887391, -0.038573, -0.461679, 0.886150, -0.039893, -0.461679, 0.886150, -0.039893 };
    self->NormalInterpolator_9.keyValue = m_keyValue;
    self->NormalInterpolator_9.keyValue_length = sizeof(m_keyValue) / sizeof(float);
    }
    self->NormalInterpolator_9.set_fraction = 0;
    {
    static float m_value_changed[1];
    self->NormalInterpolator_9.value_changed = NULL;
    self->NormalInterpolator_9.value_changed_length = 0;
    }
    self->NormalInterpolator_9.m_type = 168;
    self->NormalInterpolator_9.m_data = NULL;
    X3dSetGlName(&self->NurbsSurface1, 0);
    X3dIndexedFaceSetInit(&self->NurbsSurface1);
    self->NurbsSurface1.m_parent = (X3dNode *)&self->Shape_5;
    X3dCoordinateInit(&self->Coordinate_4);
    self->Coordinate_4.m_parent = (X3dNode *)&self->NurbsSurface1;
    {
    static float m_point[] = {};
    self->Coordinate_4.point = m_point;
    self->Coordinate_4.point_length = sizeof(m_point) / sizeof(float);
    }
    self->Coordinate_4.m_type = 52;
    self->Coordinate_4.m_data = NULL;
    X3dNormalInit(&self->Normal1);
    self->Normal1.m_parent = (X3dNode *)&self->NurbsSurface1;
    {
    static float m_vector[] = { -0.214428, -0.976677, -0.011037, -0.216582, -0.976206, -0.010646, -0.218695, -0.975744, -0.009830, -0.220663, -0.975313, -0.008574, -0.222323, -0.974948, -0.006947, -0.223567, -0.974675, -0.005063, -0.224366, -0.974500, -0.003030, -0.224715, -0.974424, -0.001005, -0.224409, -0.974411, 0.012773, -0.218724, -0.975025, 0.038546, -0.207281, -0.976180, 0.064085, -0.190052, -0.977840, 0.087799, -0.167747, -0.979887, 0.108084, -0.141721, -0.982147, 0.123700, -0.113705, -0.984436, 0.134006, -0.085448, -0.986596, 0.139019, 0.085448, -0.986596, 0.139020, 0.113705, -0.984436, 0.134006, 0.141721, -0.982147, 0.123701, 0.167747, -0.979887, 0.108085, 0.190057, -0.977840, 0.087795, 0.207274, -0.976181, 0.064096, 0.218726, -0.975025, 0.038540, 0.224408, -0.974412, 0.012773, 0.224717, -0.974424, -0.001005, 0.224365, -0.974500, -0.003036, 0.223573, -0.974674, -0.005052, 0.222318, -0.974949, -0.006951, 0.220663, -0.975312, -0.008574, 0.218695, -0.975744, -0.009830, 0.216582, -0.976206, -0.010646, 0.214428, -0.976678, -0.011036, 0.214428, -0.976677, -0.011037, -0.213337, -0.974923, -0.063344, -0.225057, -0.972479, -0.060280, -0.236208, -0.970143, -0.055034, -0.246124, -0.968058, -0.047817, -0.254283, -0.966340, -0.039078, -0.260404, -0.965052, -0.029397, -0.264459, -0.964203, -0.019355, -0.266614, -0.963757, -0.009441, -0.267140, -0.963658, 0.000003, -0.263375, -0.964148, 0.032443, -0.252751, -0.965303, 0.065624, -0.234772, -0.967125, 0.097729, -0.209722, -0.969514, 0.126727, -0.178759, -0.972278, 0.150732, -0.143774, -0.975178, 0.168394, -0.107027, -0.977983, 0.179148, 0.070700, -0.980521, 0.183247, 0.107027, -0.977983, 0.179148, 0.143774, -0.975178, 0.168394, 0.178760, -0.972278, 0.150732, 0.209722, -0.969514, 0.126727, 0.234772, -0.967125, 0.097729, 0.252751, -0.965303, 0.065623, 0.263375, -0.964148, 0.032443, 0.267140, -0.963658, -0.000003, 0.266614, -0.963757, -0.009441, 0.264459, -0.964203, -0.019356, 0.260404, -0.965052, -0.029397, 0.254283, -0.966340, -0.039078, 0.246124, -0.968058, -0.047817, 0.236207, -0.970143, -0.055034, 0.225057, -0.972479, -0.060280, 0.213337, -0.974923, -0.063344, -0.200555, -0.964568, -0.171426, -0.232476, -0.958721, -0.163732, -0.263083, -0.953031, -0.150065, -0.290542, -0.947866, -0.130904, -0.313355, -0.943545, -0.107385, -0.330643, -0.940270, -0.081045, -0.342209, -0.938100, -0.053493, -0.348419, -0.936975, -0.026128, -0.349977, -0.936758, 0.000002, -0.344680, -0.937528, 0.047303, -0.329649, -0.939228, 0.095820, -0.304066, -0.941853, 0.143024, -0.268165, -0.945247, 0.186000, -0.223427, -0.949117, 0.221942, -0.172468, -0.953097, 0.248717, -0.118561, -0.956845, 0.265315, 0.064974, -0.960114, 0.271955, 0.118561, -0.956845, 0.265315, 0.172468, -0.953097, 0.248717, 0.223427, -0.949117, 0.221941, 0.268165, -0.945247, 0.186000, 0.304066, -0.941853, 0.143024, 0.329649, -0.939229, 0.095821, 0.344680, -0.937528, 0.047303, 0.349977, -0.936758, -0.000002, 0.348419, -0.936975, -0.026128, 0.342209, -0.938100, -0.053493, 0.330643, -0.940270, -0.081045, 0.313355, -0.943545, -0.107385, 0.290542, -0.947866, -0.130905, 0.263083, -0.953031, -0.150065, 0.232476, -0.958721, -0.163732, 0.200555, -0.964568, -0.171426, -0.185185, -0.941724, -0.280824, -0.237560, -0.933695, -0.267915, -0.287623, -0.925826, -0.245192, -0.332363, -0.918660, -0.213537, -0.369385, -0.912670, -0.174894, -0.397341, -0.908154, -0.131820, -0.416004, -0.905199, -0.086925, -0.426026, -0.903715, -0.042436, -0.428575, -0.903506, 0.000001, -0.421905, -0.904540, 0.061676, -0.402833, -0.906685, 0.125092, -0.370190, -0.909925, 0.187071, -0.324078, -0.914059, 0.243863, -0.266210, -0.918711, 0.291722, -0.199849, -0.923411, 0.327679, -0.129260, -0.927717, 0.350190, 0.058827, -0.931330, 0.359394, 0.129260, -0.927717, 0.350190, 0.199849, -0.923411, 0.327679, 0.266209, -0.918711, 0.291722, 0.324078, -0.914059, 0.243863, 0.370189, -0.909925, 0.187071, 0.402833, -0.906685, 0.125092, 0.421905, -0.904540, 0.061676, 0.428575, -0.903506, -0.000001, 0.426026, -0.903715, -0.042436, 0.416004, -0.905199, -0.086925, 0.397341, -0.908154, -0.131820, 0.369385, -0.912670, -0.174894, 0.332364, -0.918660, -0.213537, 0.287624, -0.925826, -0.245192, 0.237560, -0.933695, -0.267915, 0.185185, -0.941724, -0.280824, -0.167587, -0.905975, -0.388747, -0.240205, -0.897216, -0.370546, -0.309427, -0.888577, -0.338654, -0.371043, -0.880700, -0.294440, -0.421796, -0.874146, -0.240740, -0.459959, -0.869260, -0.181177, -0.485361, -0.866130, -0.119342, -0.499002, -0.864642, -0.058227, -0.502522, -0.864564, 0.000001, -0.494637, -0.865817, 0.075470, -0.471880, -0.868244, 0.153238, -0.432712, -0.871820, 0.229542, -0.377048, -0.876320, 0.299830, -0.306749, -0.881318, 0.359421, -0.225668, -0.886279, 0.404454, -0.139040, -0.890704, 0.432797, 0.052378, -0.894264, 0.444464, 0.139039, -0.890705, 0.432797, 0.225668, -0.886279, 0.404454, 0.306749, -0.881318, 0.359421, 0.377048, -0.876320, 0.299830, 0.432712, -0.871820, 0.229542, 0.471880, -0.868244, 0.153238, 0.494637, -0.865817, 0.075470, 0.502522, -0.864564, -0.000001, 0.499002, -0.864642, -0.058227, 0.485361, -0.866130, -0.119342, 0.459959, -0.869260, -0.181177, 0.421796, -0.874146, -0.240740, 0.371043, -0.880700, -0.294440, 0.309427, -0.888576, -0.338654, 0.240205, -0.897216, -0.370546, 0.167587, -0.905975, -0.388747, -0.148308, -0.857694, -0.492307, -0.240442, -0.849671, -0.469304, -0.328204, -0.841716, -0.428714, -0.406148, -0.834481, -0.372405, -0.470148, -0.828526, -0.304148, -0.518114, -0.824181, -0.228654, -0.549974, -0.821510, -0.150498, -0.567093, -0.820377, -0.073399, -0.571586, -0.820543, 0.000001, -0.562630, -0.821945, 0.088622, -0.536518, -0.824444, 0.180113, -0.491328, -0.828011, 0.270175, -0.426751, -0.832421, 0.353495, -0.344749, -0.837251, 0.424451, -0.249717, -0.841960, 0.478273, -0.147839, -0.846043, 0.512206, 0.045759, -0.849177, 0.526121, 0.147839, -0.846043, 0.512206, 0.249717, -0.841960, 0.478273, 0.344749, -0.837251, 0.424451, 0.426751, -0.832421, 0.353495, 0.491328, -0.828011, 0.270176, 0.536518, -0.824444, 0.180112, 0.562630, -0.821945, 0.088622, 0.571585, -0.820543, -0.000001, 0.567093, -0.820377, -0.073399, 0.549974, -0.821510, -0.150498, 0.518114, -0.824181, -0.228654, 0.470148, -0.828526, -0.304148, 0.406149, -0.834481, -0.372405, 0.328204, -0.841716, -0.428714, 0.240442, -0.849671, -0.469304, 0.148308, -0.857694, -0.492307, -0.128035, -0.798038, -0.588849, -0.238446, -0.791997, -0.562036, -0.343801, -0.786030, -0.513769, -0.437379, -0.780689, -0.446345, -0.514129, -0.776436, -0.364443, -0.571559, -0.773508, -0.273873, -0.609668, -0.771903, -0.180199, -0.630178, -0.771462, -0.087872, -0.635660, -0.771969, 0.000001, -0.625766, -0.773433, 0.101087, -0.596585, -0.775765, 0.205610, -0.545823, -0.778935, 0.308768, -0.472938, -0.782754, 0.404507, -0.379967, -0.786860, 0.486288, -0.271823, -0.790784, 0.548428, -0.155619, -0.794083, 0.587550, 0.039109, -0.796479, 0.603400, 0.155619, -0.794083, 0.587550, 0.271823, -0.790784, 0.548427, 0.379967, -0.786860, 0.486288, 0.472938, -0.782754, 0.404507, 0.545823, -0.778935, 0.308768, 0.596585, -0.775765, 0.205610, 0.625766, -0.773433, 0.101087, 0.635660, -0.771969, -0.000001, 0.630178, -0.771462, -0.087872, 0.609667, -0.771903, -0.180199, 0.571559, -0.773508, -0.273873, 0.514128, -0.776436, -0.364443, 0.437380, -0.780689, -0.446345, 0.343801, -0.786029, -0.513769, 0.238446, -0.791997, -0.562036, 0.128035, -0.798038, -0.588849, -0.107521, -0.728796, -0.676236, -0.234516, -0.725579, -0.646945, -0.356201, -0.722580, -0.592452, -0.464566, -0.720153, -0.515324, -0.553545, -0.718542, -0.421053, -0.620147, -0.717798, -0.316518, -0.664363, -0.717800, -0.208292, -0.688223, -0.718351, -0.101586, -0.694725, -0.719275, 0.000001, -0.684003, -0.720699, 0.112838, -0.651994, -0.722609, 0.229652, -0.596050, -0.724979, 0.345153, -0.515412, -0.727692, 0.452565, -0.412201, -0.730519, 0.544456, -0.291846, -0.733147, 0.614265, -0.162364, -0.735271, 0.658038, 0.032571, -0.736703, 0.675431, 0.162364, -0.735271, 0.658038, 0.291846, -0.733147, 0.614265, 0.412201, -0.730519, 0.544456, 0.515412, -0.727692, 0.452565, 0.596050, -0.724979, 0.345153, 0.651994, -0.722609, 0.229652, 0.684003, -0.720699, 0.112838, 0.694725, -0.719275, -0.000001, 0.688224, -0.718351, -0.101586, 0.664363, -0.717800, -0.208292, 0.620147, -0.717798, -0.316518, 0.553545, -0.718542, -0.421053, 0.464566, -0.720153, -0.515324, 0.356201, -0.722580, -0.592452, 0.234516, -0.725579, -0.646945, 0.107521, -0.728796, -0.676236, -0.087506, -0.652139, -0.753032, -0.229049, -0.652093, -0.722711, -0.365524, -0.652616, -0.663690, -0.487663, -0.653785, -0.578576, -0.588302, -0.655516, -0.473497, -0.663807, -0.657566, -0.356325, -0.714035, -0.659616, -0.234648, -0.741240, -0.661404, -0.114490, -0.748798, -0.662798, 0.000001, -0.737336, -0.664075, 0.123854, -0.702693, -0.665305, 0.252175, -0.641897, -0.666475, 0.379182, -0.554012, -0.667585, 0.497393, -0.441286, -0.668614, 0.598517, -0.309676, -0.669495, 0.675187, -0.168078, -0.670141, 0.722953, 0.026289, -0.670485, 0.741457, 0.168078, -0.670141, 0.722953, 0.309676, -0.669495, 0.675187, 0.441286, -0.668613, 0.598517, 0.554012, -0.667585, 0.497393, 0.641897, -0.666475, 0.379182, 0.702693, -0.665305, 0.252175, 0.737336, -0.664075, 0.123854, 0.748798, -0.662798, -0.000001, 0.741240, -0.661404, -0.114490, 0.714035, -0.659616, -0.234648, 0.663807, -0.657566, -0.356325, 0.588302, -0.655516, -0.473497, 0.487663, -0.653785, -0.578576, 0.365524, -0.652616, -0.663690, 0.229049, -0.652093, -0.722711, 0.087506, -0.652139, -0.753032, -0.068653, -0.570338, -0.818536, -0.222501, -0.573332, -0.788533, -0.371999, -0.577476, -0.726731, -0.506732, -0.582539, -0.635508, -0.618383, -0.588023, -0.521375, -0.702515, -0.593277, -0.393059, -0.758683, -0.597697, -0.259149, -0.789244, -0.600901, -0.126537, -0.797899, -0.602791, 0, -0.785765, -0.603811, 0.134111, -0.748635, -0.604114, 0.273113, -0.683260, -0.603714, 0.410713, -0.588594, -0.602771, 0.538725, -0.467076, -0.601551, 0.648056, -0.325228, -0.600329, 0.730638, -0.172781, -0.599300, 0.781656, 0.020403, -0.598545, 0.800830, 0.172781, -0.599300, 0.781656, 0.325228, -0.600329, 0.730638, 0.467076, -0.601551, 0.648056, 0.588594, -0.602771, 0.538725, 0.683260, -0.603714, 0.410713, 0.748635, -0.604114, 0.273113, 0.785765, -0.603811, 0.134111, 0.797899, -0.602791, -0, 0.789244, -0.600901, -0.126537, 0.758683, -0.597697, -0.259149, 0.702515, -0.593277, -0.393059, 0.618383, -0.588023, -0.521375, 0.506732, -0.582539, -0.635508, 0.371999, -0.577476, -0.726731, 0.222501, -0.573332, -0.788533, 0.068653, -0.570338, -0.818536, -0.051508, -0.485527, -0.872703, -0.215342, -0.491045, -0.844099, -0.375940, -0.498500, -0.781131, -0.521925, -0.507374, -0.685686, -0.643829, -0.516711, -0.564352, -0.736267, -0.525362, -0.426504, -0.798297, -0.532335, -0.281675, -0.832234, -0.537059, -0.137675, -0.842020, -0.539446, 0, -0.829261, -0.540101, 0.143585, -0.789754, -0.539253, 0.292395, -0.720028, -0.536954, 0.439591, -0.619015, -0.533582, 0.576290, -0.489444, -0.529768, 0.692669, -0.338440, -0.526208, 0.780105, -0.176508, -0.523431, 0.833586, 0.015044, -0.521673, 0.853013, 0.176508, -0.523431, 0.833586, 0.338439, -0.526207, 0.780105, 0.489444, -0.529768, 0.692669, 0.619015, -0.533582, 0.576290, 0.720028, -0.536954, 0.439591, 0.789754, -0.539253, 0.292395, 0.829261, -0.540101, 0.143585, 0.842020, -0.539446, -0, 0.832234, -0.537059, -0.137675, 0.798297, -0.532335, -0.281675, 0.736267, -0.525362, -0.426504, 0.643829, -0.516711, -0.564352, 0.521925, -0.507374, -0.685686, 0.375941, -0.498500, -0.781131, 0.215342, -0.491045, -0.844099, 0.051508, -0.485527, -0.872703, -0.036481, -0.399550, -0.915985, -0.208030, -0.406825, -0.889504, -0.377719, -0.416959, -0.826724, -0.533466, -0.429224, -0.728822, -0.664731, -0.442216, -0.602144, -0.765070, -0.454229, -0.456447, -0.832849, -0.463790, -0.302094, -0.870165, -0.470058, -0.147844, -0.881108, -0.472916, 0, -0.867752, -0.473106, 0.152240, -0.825945, -0.470913, 0.309929, -0.752062, -0.466454, 0.465642, -0.645130, -0.460376, 0.609805, -0.508275, -0.453749, 0.731962, -0.349268, -0.447754, 0.823121, -0.179308, -0.443286, 0.878263, 0.010337, -0.440718, 0.897586, 0.179308, -0.443286, 0.878263, 0.349268, -0.447754, 0.823121, 0.508275, -0.453749, 0.731962, 0.645130, -0.460376, 0.609805, 0.752062, -0.466454, 0.465642, 0.825945, -0.470913, 0.309929, 0.867752, -0.473106, 0.152240, 0.881108, -0.472916, -0, 0.870165, -0.470058, -0.147844, 0.832849, -0.463790, -0.302094, 0.765070, -0.454229, -0.456447, 0.664731, -0.442216, -0.602144, 0.533465, -0.429224, -0.728822, 0.377719, -0.416959, -0.826724, 0.208030, -0.406825, -0.889504, 0.036481, -0.399550, -0.915985, -0.023861, -0.313890, -0.949159, -0.200982, -0.322039, -0.925147, -0.377735, -0.334014, -0.863569, -0.541627, -0.348985, -0.764754, -0.681211, -0.365167, -0.634511, -0.788931, -0.380286, -0.482671, -0.862277, -0.392318, -0.320259, -0.902942, -0.400071, -0.156970, -0.915049, -0.403344, 0, -0.901109, -0.402981, 0.160027, -0.857057, -0.399294, 0.325604, -0.779200, -0.392494, 0.488667, -0.666787, -0.383552, 0.638970, -0.523470, -0.374042, 0.765553, -0.357694, -0.365668, 0.859268, -0.181243, -0.359689, 0.915300, 0.006395, -0.356580, 0.934243, 0.181243, -0.359689, 0.915300, 0.357694, -0.365668, 0.859268, 0.523470, -0.374042, 0.765553, 0.666787, -0.383552, 0.638970, 0.779200, -0.392494, 0.488667, 0.857057, -0.399294, 0.325604, 0.901109, -0.402981, 0.160027, 0.915048, -0.403344, -0, 0.902942, -0.400071, -0.156970, 0.862277, -0.392318, -0.320259, 0.788931, -0.380286, -0.482671, 0.681211, -0.365167, -0.634511, 0.541627, -0.348985, -0.764754, 0.377735, -0.334014, -0.863569, 0.200982, -0.322039, -0.925147, 0.023861, -0.313890, -0.949159, -0.013828, -0.229666, -0.973171, -0.194565, -0.237805, -0.951627, -0.376394, -0.250686, -0.891899, -0.546724, -0.267500, -0.793434, -0.693422, -0.286191, -0.661256, -0.807854, -0.303959, -0.504957, -0.886484, -0.318195, -0.336002, -0.930413, -0.327288, -0.164967, -0.943667, -0.330896, 0, -0.929144, -0.329908, 0.166887, -0.882893, -0.324632, 0.339284, -0.801252, -0.315407, 0.508443, -0.683837, -0.303583, 0.663479, -0.534953, -0.291280, 0.793084, -0.363726, -0.280732, 0.888196, -0.182386, -0.273528, 0.944414, 0.003316, -0.270197, 0.962799, 0.182385, -0.273528, 0.944414, 0.363726, -0.280732, 0.888196, 0.534953, -0.291280, 0.793084, 0.683837, -0.303583, 0.663479, 0.801252, -0.315407, 0.508443, 0.882893, -0.324632, 0.339284, 0.929144, -0.329908, 0.166887, 0.943667, -0.330896, -0, 0.930413, -0.327288, -0.164967, 0.886484, -0.318195, -0.336002, 0.807854, -0.303959, -0.504957, 0.693422, -0.286191, -0.661256, 0.546723, -0.267500, -0.793434, 0.376394, -0.250686, -0.891899, 0.194565, -0.237805, -0.951627, 0.013828, -0.229666, -0.973171, -0.006485, -0.147675, -0.989015, -0.189092, -0.155002, -0.969649, -0.374093, -0.167858, -0.912073, -0.549092, -0.185562, -0.814902, -0.701548, -0.205923, -0.682221, -0.821850, -0.225712, -0.523084, -0.905351, -0.241748, -0.349138, -0.952380, -0.251952, -0.171736, -0.966733, -0.255788, 0, -0.951619, -0.254127, 0.172746, -0.903221, -0.247232, 0.350812, -0.818015, -0.235609, 0.524728, -0.696145, -0.221032, 0.683027, -0.542677, -0.206188, 0.814241, -0.367403, -0.193808, 0.909644, -0.182820, -0.185748, 0.965440, 0.001184, -0.182532, 0.983199, 0.182820, -0.185748, 0.965440, 0.367403, -0.193808, 0.909645, 0.542677, -0.206188, 0.814241, 0.696145, -0.221032, 0.683027, 0.818015, -0.235609, 0.524728, 0.903221, -0.247232, 0.350812, 0.951619, -0.254127, 0.172746, 0.966733, -0.255788, -0, 0.952380, -0.251952, -0.171736, 0.905351, -0.241748, -0.349138, 0.821850, -0.225712, -0.523084, 0.701548, -0.205923, -0.682221, 0.549092, -0.185562, -0.814902, 0.374093, -0.167858, -0.912074, 0.189092, -0.155002, -0.969649, 0.006485, -0.147675, -0.989015, -0.001874, -0.068455, -0.997652, -0.184821, -0.074298, -0.979960, -0.371208, -0.086271, -0.924533, -0.549084, -0.103905, -0.829283, -0.705799, -0.125010, -0.697295, -0.830945, -0.146063, -0.536839, -0.918743, -0.163372, -0.359473, -0.968609, -0.174381, -0.177166, -0.983972, -0.178321, 0, -0.968258, -0.175964, 0.177521, -0.917787, -0.167492, 0.360019, -0.829297, -0.153619, 0.537278, -0.703610, -0.136572, 0.697338, -0.546647, -0.119587, 0.828780, -0.368801, -0.105830, 0.923464, -0.182641, -0.097334, 0.978350, 0.000063, -0.094561, 0.995519, 0.182641, -0.097334, 0.978350, 0.368801, -0.105830, 0.923464, 0.546647, -0.119587, 0.828780, 0.703610, -0.136572, 0.697338, 0.829297, -0.153619, 0.537278, 0.917787, -0.167492, 0.360019, 0.968258, -0.175964, 0.177521, 0.983972, -0.178321, -0, 0.968609, -0.174381, -0.177166, 0.918743, -0.163372, -0.359473, 0.830945, -0.146063, -0.536839, 0.705799, -0.125010, -0.697295, 0.549084, -0.103905, -0.829283, 0.371208, -0.086271, -0.924533, 0.184821, -0.074297, -0.979960, 0.001874, -0.068455, -0.997652, 0, 0, -1, -0.181953, -0.010276, -0.983253, -0.367800, -0.040028, -0.929043, -0.545259, -0.084367, -0.834011, -0.700649, -0.134835, -0.700649, -0.823026, -0.181938, -0.538077, -0.907381, -0.218215, -0.359224, -0.954586, -0.239919, -0.176648, -0.969070, -0.246787, 0, -0.954586, -0.239919, 0.176648, -0.907381, -0.218215, 0.359224, -0.823026, -0.181938, 0.538077, -0.700649, -0.134835, 0.700649, -0.545259, -0.084367, 0.834011, -0.367800, -0.040028, 0.929043, -0.181953, -0.010276, 0.983253, 0, 0, 1, 0.181953, -0.010276, 0.983253, 0.367800, -0.040028, 0.929043, 0.545259, -0.084367, 0.834011, 0.700649, -0.134835, 0.700649, 0.823026, -0.181938, 0.538077, 0.907381, -0.218215, 0.359224, 0.954586, -0.239919, 0.176648, 0.969070, -0.246787, 0, 0.954586, -0.239919, -0.176648, 0.907381, -0.218215, -0.359224, 0.823026, -0.181938, -0.538077, 0.700649, -0.134835, -0.700649, 0.545259, -0.084367, -0.834011, 0.367800, -0.040028, -0.929043, 0.181953, -0.010276, -0.983253, 0, 0, -1, 0.002117, 0.089854, -0.995953, -0.174866, 0.076926, -0.981583, -0.357999, 0.046614, -0.932558, -0.536552, 0.002687, -0.843863, -0.697025, -0.047580, -0.715466, -0.826867, -0.095235, -0.554275, -0.918489, -0.132545, -0.372572, -0.970611, -0.155145, -0.183967, -0.986735, -0.162341, -0, -0.970611, -0.155145, 0.183967, -0.918489, -0.132545, 0.372572, -0.826867, -0.095235, 0.554276, -0.697025, -0.047580, 0.715466, -0.536552, 0.002687, 0.843863, -0.357999, 0.046614, 0.932558, -0.174866, 0.076925, 0.981583, -0.002117, 0.089854, 0.995953, 0.174866, 0.076926, 0.981583, 0.357999, 0.046614, 0.932558, 0.536552, 0.002687, 0.843863, 0.697025, -0.047580, 0.715466, 0.826867, -0.095235, 0.554275, 0.918489, -0.132545, 0.372572, 0.970611, -0.155145, 0.183967, 0.986735, -0.162341, 0, 0.970611, -0.155145, -0.183967, 0.918489, -0.132545, -0.372572, 0.826867, -0.095235, -0.554276, 0.697025, -0.047580, -0.715466, 0.536552, 0.002687, -0.843863, 0.357999, 0.046614, -0.932558, 0.174866, 0.076925, -0.981583, -0.002117, 0.089854, -0.995953, 0.008150, 0.181957, -0.983273, -0.163066, 0.167538, -0.972286, -0.342587, 0.138058, -0.929287, -0.521250, 0.096221, -0.847962, -0.686066, 0.048004, -0.725954, -0.823200, 0.001510, -0.567749, -0.922424, -0.035556, -0.384539, -0.979901, -0.058320, -0.190766, -0.997845, -0.065620, -0, -0.979901, -0.058320, 0.190766, -0.922424, -0.035556, 0.384539, -0.823200, 0.001510, 0.567749, -0.686066, 0.048004, 0.725954, -0.521250, 0.096221, 0.847962, -0.342587, 0.138058, 0.929287, -0.163066, 0.167538, 0.972286, -0.008150, 0.181957, 0.983273, 0.163066, 0.167538, 0.972286, 0.342587, 0.138058, 0.929287, 0.521250, 0.096221, 0.847962, 0.686066, 0.048004, 0.725954, 0.823200, 0.001510, 0.567749, 0.922424, -0.035556, 0.384539, 0.979901, -0.058320, 0.190766, 0.997845, -0.065620, 0, 0.979901, -0.058320, -0.190766, 0.922424, -0.035556, -0.384539, 0.823200, 0.001510, -0.567749, 0.686066, 0.048004, -0.725954, 0.521250, 0.096221, -0.847962, 0.342587, 0.138058, -0.929287, 0.163066, 0.167538, -0.972286, -0.008150, 0.181957, -0.983273, 0.017616, 0.275115, -0.961250, -0.146787, 0.260469, -0.954259, -0.321393, 0.233302, -0.917756, -0.498592, 0.195402, -0.844526, -0.666243, 0.151415, -0.730201, -0.809705, 0.108284, -0.576760, -0.916247, 0.073256, -0.393859, -0.979174, 0.051426, -0.196403, -0.999015, 0.044371, -0, -0.979174, 0.051426, 0.196403, -0.916247, 0.073256, 0.393859, -0.809705, 0.108284, 0.576760, -0.666243, 0.151415, 0.730201, -0.498592, 0.195403, 0.844526, -0.321393, 0.233302, 0.917756, -0.146787, 0.260469, 0.954259, -0.017616, 0.275115, 0.961250, 0.146787, 0.260469, 0.954259, 0.321393, 0.233302, 0.917756, 0.498592, 0.195402, 0.844526, 0.666243, 0.151415, 0.730201, 0.809705, 0.108284, 0.576760, 0.916247, 0.073256, 0.393859, 0.979174, 0.051426, 0.196403, 0.999015, 0.044371, 0, 0.979174, 0.051426, -0.196403, 0.916247, 0.073256, -0.393859, 0.809705, 0.108284, -0.576760, 0.666243, 0.151415, -0.730201, 0.498592, 0.195403, -0.844526, 0.321393, 0.233302, -0.917756, 0.146787, 0.260469, -0.954259, -0.017616, 0.275115, -0.961250, 0.030001, 0.367929, -0.929370, -0.126344, 0.354311, -0.926553, -0.294378, 0.330884, -0.896581, -0.467949, 0.298744, -0.831730, -0.636050, 0.261286, -0.726065, -0.783802, 0.224045, -0.579187, -0.896406, 0.193294, -0.398865, -0.964250, 0.173863, -0.199985, -0.985866, 0.167536, -0, -0.964250, 0.173863, 0.199985, -0.896406, 0.193294, 0.398865, -0.783802, 0.224045, 0.579187, -0.636050, 0.261286, 0.726065, -0.467949, 0.298744, 0.831730, -0.294378, 0.330884, 0.896581, -0.126344, 0.354311, 0.926553, -0.030001, 0.367929, 0.929370, 0.126344, 0.354311, 0.926553, 0.294378, 0.330884, 0.896581, 0.467949, 0.298744, 0.831730, 0.636050, 0.261286, 0.726065, 0.783802, 0.224045, 0.579187, 0.896406, 0.193294, 0.398865, 0.964250, 0.173863, 0.199985, 0.985866, 0.167536, 0, 0.964250, 0.173863, -0.199985, 0.896406, 0.193294, -0.398865, 0.783802, 0.224045, -0.579187, 0.636050, 0.261286, -0.726065, 0.467949, 0.298744, -0.831730, 0.294378, 0.330884, -0.896581, 0.126344, 0.354311, -0.926553, -0.030001, 0.367929, -0.929370, 0.044758, 0.458834, -0.887394, -0.102166, 0.447366, -0.888496, -0.261711, 0.428872, -0.864625, -0.428992, 0.404023, -0.807918, -0.594274, 0.375152, -0.711406, -0.743041, 0.346270, -0.572702, -0.859147, 0.322176, -0.397579, -0.930436, 0.306802, -0.200405, -0.953381, 0.301768, -0, -0.930436, 0.306802, 0.200405, -0.859147, 0.322176, 0.397579, -0.743041, 0.346270, 0.572702, -0.594274, 0.375152, 0.711406, -0.428992, 0.404023, 0.807918, -0.261711, 0.428872, 0.864625, -0.102166, 0.447366, 0.888496, -0.044758, 0.458834, 0.887394, 0.102166, 0.447366, 0.888496, 0.261711, 0.428872, 0.864625, 0.428992, 0.404023, 0.807918, 0.594274, 0.375152, 0.711406, 0.743041, 0.346270, 0.572702, 0.859147, 0.322176, 0.397579, 0.930436, 0.306802, 0.200405, 0.953381, 0.301768, 0, 0.930436, 0.306802, -0.200405, 0.859147, 0.322176, -0.397579, 0.743041, 0.346270, -0.572702, 0.594274, 0.375152, -0.711406, 0.428992, 0.404023, -0.807918, 0.261711, 0.428872, -0.864625, 0.102166, 0.447366, -0.888496, -0.044758, 0.458834, -0.887394, 0.061299, 0.546181, -0.835422, -0.074815, 0.537716, -0.839800, -0.223839, 0.524932, -0.821184, -0.381858, 0.508316, -0.771881, -0.540381, 0.489391, -0.684460, -0.685741, 0.470683, -0.555173, -0.801402, 0.455175, -0.388035, -0.873551, 0.445307, -0.196495, -0.896977, 0.442078, -0, -0.873551, 0.445307, 0.196495, -0.801402, 0.455175, 0.388035, -0.685741, 0.470683, 0.555173, -0.540381, 0.489391, 0.684460, -0.381858, 0.508316, 0.771880, -0.223839, 0.524932, 0.821184, -0.074815, 0.537717, 0.839800, -0.061299, 0.546181, 0.835422, 0.074815, 0.537716, 0.839800, 0.223839, 0.524932, 0.821184, 0.381858, 0.508316, 0.771881, 0.540381, 0.489391, 0.684460, 0.685741, 0.470683, 0.555173, 0.801402, 0.455175, 0.388035, 0.873551, 0.445307, 0.196495, 0.896977, 0.442078, 0, 0.873551, 0.445307, -0.196495, 0.801402, 0.455175, -0.388035, 0.685741, 0.470683, -0.555173, 0.540381, 0.489391, -0.684460, 0.381858, 0.508316, -0.771880, 0.223839, 0.524932, -0.821184, 0.074815, 0.537717, -0.839800, -0.061299, 0.546181, -0.835422, 0.079017, 0.628327, -0.773926, -0.044986, 0.623349, -0.780649, -0.181517, 0.616489, -0.766155, -0.327292, 0.608216, -0.723155, -0.474879, 0.599470, -0.644303, -0.611779, 0.591465, -0.525258, -0.722070, 0.585302, -0.368832, -0.791599, 0.581605, -0.187369, -0.814307, 0.580434, -0, -0.791599, 0.581605, 0.187369, -0.722070, 0.585302, 0.368832, -0.611779, 0.591465, 0.525258, -0.474879, 0.599470, 0.644303, -0.327292, 0.608216, 0.723155, -0.181517, 0.616489, 0.766155, -0.044986, 0.623349, 0.780649, -0.079017, 0.628327, 0.773926, 0.044986, 0.623349, 0.780649, 0.181517, 0.616489, 0.766155, 0.327292, 0.608216, 0.723155, 0.474879, 0.599470, 0.644303, 0.611779, 0.591465, 0.525258, 0.722070, 0.585302, 0.368832, 0.791599, 0.581605, 0.187369, 0.814307, 0.580434, 0, 0.791599, 0.581605, -0.187369, 0.722070, 0.585302, -0.368832, 0.611779, 0.591465, -0.525258, 0.474879, 0.599470, -0.644303, 0.327292, 0.608216, -0.723155, 0.181517, 0.616489, -0.766155, 0.044986, 0.623349, -0.780649, -0.079017, 0.628327, -0.773926, 0.097296, 0.703752, -0.703752, -0.013480, 0.702312, -0.711741, -0.135795, 0.700970, -0.700143, -0.266683, 0.700225, -0.662242, -0.399522, 0.700579, -0.591246, -0.523149, 0.702168, -0.482986, -0.623139, 0.704454, -0.339768, -0.686401, 0.706389, -0.172822, -0.707107, 0.707107, -0, -0.686401, 0.706389, 0.172822, -0.623139, 0.704454, 0.339768, -0.523149, 0.702168, 0.482986, -0.399522, 0.700579, 0.591246, -0.266683, 0.700225, 0.662242, -0.135795, 0.700970, 0.700143, -0.013480, 0.702312, 0.711741, -0.097296, 0.703752, 0.703752, 0.013480, 0.702312, 0.711741, 0.135795, 0.700970, 0.700143, 0.266683, 0.700225, 0.662242, 0.399522, 0.700579, 0.591246, 0.523149, 0.702168, 0.482986, 0.623139, 0.704454, 0.339768, 0.686401, 0.706389, 0.172822, 0.707107, 0.707107, 0, 0.686401, 0.706389, -0.172822, 0.623139, 0.704454, -0.339768, 0.523149, 0.702168, -0.482986, 0.399522, 0.700579, -0.591246, 0.266683, 0.700225, -0.662242, 0.135795, 0.700970, -0.700143, 0.013480, 0.702312, -0.711741, -0.097296, 0.703752, -0.703752, 0.115543, 0.771154, -0.626077, 0.018839, 0.772882, -0.634270, -0.087947, 0.776089, -0.624460, -0.201950, 0.781249, -0.590650, -0.317183, 0.788487, -0.526956, -0.423902, 0.797127, -0.429994, -0.509815, 0.805477, -0.302150, -0.563978, 0.811385, -0.153566, -0.581673, 0.813423, 0, -0.563978, 0.811385, 0.153566, -0.509815, 0.805477, 0.302150, -0.423902, 0.797127, 0.429994, -0.317183, 0.788487, 0.526956, -0.201950, 0.781249, 0.590650, -0.087947, 0.776089, 0.624460, 0.018839, 0.772882, 0.634270, -0.115543, 0.771154, 0.626077, -0.018839, 0.772882, 0.634270, 0.087947, 0.776089, 0.624460, 0.201950, 0.781249, 0.590650, 0.317183, 0.788487, 0.526956, 0.423902, 0.797127, 0.429994, 0.509815, 0.805477, 0.302150, 0.563978, 0.811385, 0.153566, 0.581673, 0.813423, -0, 0.563978, 0.811385, -0.153566, 0.509815, 0.805477, -0.302150, 0.423902, 0.797127, -0.429994, 0.317183, 0.788487, -0.526956, 0.201950, 0.781249, -0.590650, 0.087947, 0.776089, -0.624460, -0.018839, 0.772882, -0.634270, -0.115543, 0.771154, -0.626077, 0.133216, 0.829535, -0.542332, 0.051103, 0.833714, -0.549827, -0.039349, 0.840098, -0.541005, -0.135311, 0.849041, -0.510706, -0.231381, 0.860331, -0.454194, -0.319321, 0.872764, -0.369210, -0.389291, 0.884098, -0.258504, -0.432991, 0.891820, -0.131055, -0.447195, 0.894437, 0, -0.432991, 0.891820, 0.131055, -0.389291, 0.884098, 0.258504, -0.319321, 0.872764, 0.369210, -0.231381, 0.860331, 0.454194, -0.135311, 0.849041, 0.510706, -0.039349, 0.840098, 0.541005, 0.051103, 0.833714, 0.549827, -0.133216, 0.829535, 0.542332, -0.051103, 0.833714, 0.549827, 0.039349, 0.840098, 0.541005, 0.135311, 0.849041, 0.510706, 0.231381, 0.860331, 0.454194, 0.319321, 0.872764, 0.369210, 0.389291, 0.884098, 0.258504, 0.432991, 0.891820, 0.131055, 0.447195, 0.894437, -0, 0.432991, 0.891820, -0.131055, 0.389291, 0.884098, -0.258504, 0.319321, 0.872764, -0.369210, 0.231381, 0.860331, -0.454194, 0.135311, 0.849041, -0.510706, 0.039349, 0.840098, -0.541005, -0.051103, 0.833714, -0.549827, -0.133216, 0.829535, -0.542332, 0.149844, 0.878255, -0.454109, 0.082504, 0.883936, -0.460272, 0.008657, 0.891953, -0.452045, -0.068970, 0.902466, -0.425205, -0.145643, 0.914996, -0.376259, -0.214699, 0.928127, -0.304111, -0.268763, 0.939629, -0.211809, -0.302098, 0.947253, -0.106999, -0.312858, 0.949800, 0, -0.302098, 0.947253, 0.106999, -0.268763, 0.939629, 0.211809, -0.214699, 0.928127, 0.304111, -0.145643, 0.914996, 0.376259, -0.068970, 0.902466, 0.425205, 0.008657, 0.891953, 0.452045, 0.082504, 0.883936, 0.460272, -0.149844, 0.878255, 0.454109, -0.082504, 0.883936, 0.460272, -0.008657, 0.891953, 0.452045, 0.068970, 0.902466, 0.425205, 0.145643, 0.914996, 0.376259, 0.214699, 0.928127, 0.304111, 0.268763, 0.939629, 0.211809, 0.302098, 0.947253, 0.106999, 0.312858, 0.949800, -0, 0.302098, 0.947253, -0.106999, 0.268763, 0.939629, -0.211809, 0.214699, 0.928127, -0.304111, 0.145643, 0.914996, -0.376259, 0.068970, 0.902466, -0.425205, -0.008657, 0.891953, -0.452045, -0.082504, 0.883936, -0.460272, -0.149844, 0.878255, -0.454109, 0.165046, 0.917037, -0.363047, 0.112343, 0.923189, -0.367561, 0.054887, 0.931355, -0.359952, -0.004849, 0.941496, -0.336990, -0.062943, 0.952998, -0.296366, -0.114323, 0.964530, -0.237933, -0.153838, 0.974268, -0.164730, -0.177866, 0.980558, -0.082885, -0.185565, 0.982632, 0.000001, -0.177866, 0.980558, 0.082886, -0.153838, 0.974268, 0.164730, -0.114323, 0.964530, 0.237933, -0.062943, 0.952998, 0.296366, -0.004849, 0.941496, 0.336990, 0.054887, 0.931355, 0.359952, 0.112343, 0.923189, 0.367561, -0.165046, 0.917037, 0.363047, -0.112343, 0.923189, 0.367561, -0.054887, 0.931355, 0.359952, 0.004849, 0.941496, 0.336990, 0.062943, 0.952998, 0.296366, 0.114323, 0.964530, 0.237933, 0.153838, 0.974268, 0.164730, 0.177866, 0.980558, 0.082885, 0.185565, 0.982632, -0.000001, 0.177866, 0.980558, -0.082886, 0.153838, 0.974268, -0.164730, 0.114323, 0.964530, -0.237933, 0.062943, 0.952998, -0.296366, 0.004849, 0.941496, -0.336990, -0.054887, 0.931355, -0.359952, -0.112343, 0.923189, -0.367561, -0.165046, 0.917037, -0.363047, 0.178540, 0.945952, -0.270737, 0.140066, 0.951592, -0.273596, 0.098401, 0.958669, -0.266968, 0.055584, 0.967008, -0.248606, 0.014596, 0.976019, -0.217196, -0.021009, 0.984668, -0.173172, -0.047926, 0.991715, -0.119182, -0.064080, 0.996155, -0.059737, -0.069220, 0.997601, 0.000001, -0.064080, 0.996155, 0.059737, -0.047926, 0.991715, 0.119183, -0.021009, 0.984668, 0.173172, 0.014596, 0.976019, 0.217196, 0.055584, 0.967008, 0.248606, 0.098402, 0.958668, 0.266968, 0.140065, 0.951592, 0.273596, -0.178540, 0.945952, 0.270737, -0.140066, 0.951592, 0.273596, -0.098401, 0.958669, 0.266968, -0.055584, 0.967008, 0.248606, -0.014596, 0.976019, 0.217196, 0.021009, 0.984668, 0.173172, 0.047926, 0.991715, 0.119182, 0.064080, 0.996155, 0.059737, 0.069220, 0.997601, -0.000001, 0.064080, 0.996155, -0.059737, 0.047926, 0.991715, -0.119183, 0.021009, 0.984668, -0.173172, -0.014596, 0.976019, -0.217196, -0.055584, 0.967008, -0.248606, -0.098402, 0.958668, -0.266968, -0.140065, 0.951592, -0.273596, -0.178540, 0.945952, -0.270737, 0.190140, 0.965367, -0.178643, 0.165278, 0.969665, -0.180094, 0.138540, 0.974768, -0.175025, 0.111369, 0.980471, -0.162090, 0.085737, 0.986334, -0.140695, 0.063831, 0.991718, -0.111449, 0.047517, 0.995953, -0.076288, 0.037835, 0.998557, -0.038105, 0.034773, 0.999395, 0.000001, 0.037835, 0.998557, 0.038105, 0.047516, 0.995953, 0.076287, 0.063831, 0.991718, 0.111449, 0.085737, 0.986334, 0.140695, 0.111369, 0.980471, 0.162090, 0.138541, 0.974768, 0.175025, 0.165278, 0.969665, 0.180094, -0.190140, 0.965367, 0.178643, -0.165278, 0.969665, 0.180094, -0.138540, 0.974768, 0.175025, -0.111369, 0.980471, 0.162090, -0.085737, 0.986334, 0.140695, -0.063831, 0.991718, 0.111449, -0.047517, 0.995953, 0.076288, -0.037835, 0.998557, 0.038105, -0.034773, 0.999395, -0.000001, -0.037835, 0.998557, -0.038105, -0.047516, 0.995953, -0.076287, -0.063831, 0.991718, -0.111449, -0.085737, 0.986334, -0.140695, -0.111369, 0.980471, -0.162090, -0.138541, 0.974768, -0.175025, -0.165278, 0.969665, -0.180094, -0.190140, 0.965367, -0.178643, 0.199751, 0.975883, -0.088044, 0.187742, 0.978222, -0.088510, 0.174913, 0.980851, -0.085662, 0.162005, 0.983630, -0.078908, 0.149982, 0.986342, -0.068084, 0.139846, 0.988720, -0.053622, 0.132388, 0.990524, -0.036535, 0.128002, 0.991607, -0.018196, 0.126621, 0.991951, 0.000001, 0.128002, 0.991607, 0.018196, 0.132388, 0.990524, 0.036535, 0.139845, 0.988720, 0.053622, 0.149982, 0.986342, 0.068084, 0.162005, 0.983630, 0.078908, 0.174913, 0.980851, 0.085662, 0.187742, 0.978222, 0.088510, -0.199751, 0.975883, 0.088044, -0.187742, 0.978222, 0.088510, -0.174913, 0.980851, 0.085662, -0.162005, 0.983630, 0.078908, -0.149982, 0.986342, 0.068084, -0.139846, 0.988720, 0.053622, -0.132388, 0.990524, 0.036535, -0.128002, 0.991607, 0.018196, -0.126621, 0.991951, -0.000001, -0.128002, 0.991607, -0.018196, -0.132388, 0.990524, -0.036535, -0.139845, 0.988720, -0.053622, -0.149982, 0.986342, -0.068084, -0.162005, 0.983630, -0.078908, -0.174913, 0.980851, -0.085662, -0.187742, 0.978222, -0.088510, -0.199751, 0.975883, -0.088044, 0.197372, 0.979337, -0.044088, 0.191373, 0.980591, -0.042627, 0.185392, 0.981873, -0.039447, 0.179841, 0.983089, -0.034540, 0.175087, 0.984152, -0.028086, 0.171439, 0.984982, -0.020496, 0.169063, 0.985528, -0.012321, 0.167943, 0.985788, -0.004070, 0.167943, 0.985788, 0.004070, 0.169063, 0.985528, 0.012321, 0.171439, 0.984982, 0.020496, 0.175087, 0.984152, 0.028086, 0.179838, 0.983090, 0.034535, 0.185396, 0.981872, 0.039450, 0.191373, 0.980591, 0.042627, 0.197372, 0.979337, 0.044088, -0.197372, 0.979337, 0.044088, -0.191373, 0.980591, 0.042627, -0.185392, 0.981873, 0.039447, -0.179841, 0.983089, 0.034540, -0.175087, 0.984152, 0.028086, -0.171439, 0.984982, 0.020496, -0.169063, 0.985528, 0.012321, -0.167943, 0.985788, 0.004070, -0.167943, 0.985788, -0.004070, -0.169063, 0.985528, -0.012321, -0.171439, 0.984982, -0.020496, -0.175087, 0.984152, -0.028086, -0.179838, 0.983090, -0.034535, -0.185396, 0.981872, -0.039450, -0.191373, 0.980591, -0.042627, -0.197372, 0.979337, -0.044088, -0.197372, 0.979337, -0.044088 };
    self->Normal1.vector = m_vector;
    self->Normal1.vector_length = sizeof(m_vector) / sizeof(float);
    }
    self->Normal1.m_type = 167;
    self->Normal1.m_data = NULL;
    X3dTextureCoordinateInit(&self->TextureCoordinate_10);
    self->TextureCoordinate_10.m_parent = (X3dNode *)&self->NurbsSurface1;
    {
    static float m_point[] = { 0, 0, 0.031250, 0, 0.062500, 0, 0.093750, 0, 0.125000, 0, 0.156250, 0, 0.187500, 0, 0.218750, 0, 0.250000, 0, 0.281250, 0, 0.312500, 0, 0.343750, 0, 0.375000, 0, 0.406250, 0, 0.437500, 0, 0.468750, 0, 0.500000, 0, 0.531250, 0, 0.562500, 0, 0.593750, 0, 0.625000, 0, 0.656250, 0, 0.687500, 0, 0.718750, 0, 0.750000, 0, 0.781250, 0, 0.812500, 0, 0.843750, 0, 0.875000, 0, 0.906250, 0, 0.937500, 0, 0.968750, 0, 1, 0, 0, 0.031250, 0.031250, 0.031250, 0.062500, 0.031250, 0.093750, 0.031250, 0.125000, 0.031250, 0.156250, 0.031250, 0.187500, 0.031250, 0.218750, 0.031250, 0.250000, 0.031250, 0.281250, 0.031250, 0.312500, 0.031250, 0.343750, 0.031250, 0.375000, 0.031250, 0.406250, 0.031250, 0.437500, 0.031250, 0.468750, 0.031250, 0.500000, 0.031250, 0.531250, 0.031250, 0.562500, 0.031250, 0.593750, 0.031250, 0.625000, 0.031250, 0.656250, 0.031250, 0.687500, 0.031250, 0.718750, 0.031250, 0.750000, 0.031250, 0.781250, 0.031250, 0.812500, 0.031250, 0.843750, 0.031250, 0.875000, 0.031250, 0.906250, 0.031250, 0.937500, 0.031250, 0.968750, 0.031250, 1, 0.031250, 0, 0.062500, 0.031250, 0.062500, 0.062500, 0.062500, 0.093750, 0.062500, 0.125000, 0.062500, 0.156250, 0.062500, 0.187500, 0.062500, 0.218750, 0.062500, 0.250000, 0.062500, 0.281250, 0.062500, 0.312500, 0.062500, 0.343750, 0.062500, 0.375000, 0.062500, 0.406250, 0.062500, 0.437500, 0.062500, 0.468750, 0.062500, 0.500000, 0.062500, 0.531250, 0.062500, 0.562500, 0.062500, 0.593750, 0.062500, 0.625000, 0.062500, 0.656250, 0.062500, 0.687500, 0.062500, 0.718750, 0.062500, 0.750000, 0.062500, 0.781250, 0.062500, 0.812500, 0.062500, 0.843750, 0.062500, 0.875000, 0.062500, 0.906250, 0.062500, 0.937500, 0.062500, 0.968750, 0.062500, 1, 0.062500, 0, 0.093750, 0.031250, 0.093750, 0.062500, 0.093750, 0.093750, 0.093750, 0.125000, 0.093750, 0.156250, 0.093750, 0.187500, 0.093750, 0.218750, 0.093750, 0.250000, 0.093750, 0.281250, 0.093750, 0.312500, 0.093750, 0.343750, 0.093750, 0.375000, 0.093750, 0.406250, 0.093750, 0.437500, 0.093750, 0.468750, 0.093750, 0.500000, 0.093750, 0.531250, 0.093750, 0.562500, 0.093750, 0.593750, 0.093750, 0.625000, 0.093750, 0.656250, 0.093750, 0.687500, 0.093750, 0.718750, 0.093750, 0.750000, 0.093750, 0.781250, 0.093750, 0.812500, 0.093750, 0.843750, 0.093750, 0.875000, 0.093750, 0.906250, 0.093750, 0.937500, 0.093750, 0.968750, 0.093750, 1, 0.093750, 0, 0.125000, 0.031250, 0.125000, 0.062500, 0.125000, 0.093750, 0.125000, 0.125000, 0.125000, 0.156250, 0.125000, 0.187500, 0.125000, 0.218750, 0.125000, 0.250000, 0.125000, 0.281250, 0.125000, 0.312500, 0.125000, 0.343750, 0.125000, 0.375000, 0.125000, 0.406250, 0.125000, 0.437500, 0.125000, 0.468750, 0.125000, 0.500000, 0.125000, 0.531250, 0.125000, 0.562500, 0.125000, 0.593750, 0.125000, 0.625000, 0.125000, 0.656250, 0.125000, 0.687500, 0.125000, 0.718750, 0.125000, 0.750000, 0.125000, 0.781250, 0.125000, 0.812500, 0.125000, 0.843750, 0.125000, 0.875000, 0.125000, 0.906250, 0.125000, 0.937500, 0.125000, 0.968750, 0.125000, 1, 0.125000, 0, 0.156250, 0.031250, 0.156250, 0.062500, 0.156250, 0.093750, 0.156250, 0.125000, 0.156250, 0.156250, 0.156250, 0.187500, 0.156250, 0.218750, 0.156250, 0.250000, 0.156250, 0.281250, 0.156250, 0.312500, 0.156250, 0.343750, 0.156250, 0.375000, 0.156250, 0.406250, 0.156250, 0.437500, 0.156250, 0.468750, 0.156250, 0.500000, 0.156250, 0.531250, 0.156250, 0.562500, 0.156250, 0.593750, 0.156250, 0.625000, 0.156250, 0.656250, 0.156250, 0.687500, 0.156250, 0.718750, 0.156250, 0.750000, 0.156250, 0.781250, 0.156250, 0.812500, 0.156250, 0.843750, 0.156250, 0.875000, 0.156250, 0.906250, 0.156250, 0.937500, 0.156250, 0.968750, 0.156250, 1, 0.156250, 0, 0.187500, 0.031250, 0.187500, 0.062500, 0.187500, 0.093750, 0.187500, 0.125000, 0.187500, 0.156250, 0.187500, 0.187500, 0.187500, 0.218750, 0.187500, 0.250000, 0.187500, 0.281250, 0.187500, 0.312500, 0.187500, 0.343750, 0.187500, 0.375000, 0.187500, 0.406250, 0.187500, 0.437500, 0.187500, 0.468750, 0.187500, 0.500000, 0.187500, 0.531250, 0.187500, 0.562500, 0.187500, 0.593750, 0.187500, 0.625000, 0.187500, 0.656250, 0.187500, 0.687500, 0.187500, 0.718750, 0.187500, 0.750000, 0.187500, 0.781250, 0.187500, 0.812500, 0.187500, 0.843750, 0.187500, 0.875000, 0.187500, 0.906250, 0.187500, 0.937500, 0.187500, 0.968750, 0.187500, 1, 0.187500, 0, 0.218750, 0.031250, 0.218750, 0.062500, 0.218750, 0.093750, 0.218750, 0.125000, 0.218750, 0.156250, 0.218750, 0.187500, 0.218750, 0.218750, 0.218750, 0.250000, 0.218750, 0.281250, 0.218750, 0.312500, 0.218750, 0.343750, 0.218750, 0.375000, 0.218750, 0.406250, 0.218750, 0.437500, 0.218750, 0.468750, 0.218750, 0.500000, 0.218750, 0.531250, 0.218750, 0.562500, 0.218750, 0.593750, 0.218750, 0.625000, 0.218750, 0.656250, 0.218750, 0.687500, 0.218750, 0.718750, 0.218750, 0.750000, 0.218750, 0.781250, 0.218750, 0.812500, 0.218750, 0.843750, 0.218750, 0.875000, 0.218750, 0.906250, 0.218750, 0.937500, 0.218750, 0.968750, 0.218750, 1, 0.218750, 0, 0.250000, 0.031250, 0.250000, 0.062500, 0.250000, 0.093750, 0.250000, 0.125000, 0.250000, 0.156250, 0.250000, 0.187500, 0.250000, 0.218750, 0.250000, 0.250000, 0.250000, 0.281250, 0.250000, 0.312500, 0.250000, 0.343750, 0.250000, 0.375000, 0.250000, 0.406250, 0.250000, 0.437500, 0.250000, 0.468750, 0.250000, 0.500000, 0.250000, 0.531250, 0.250000, 0.562500, 0.250000, 0.593750, 0.250000, 0.625000, 0.250000, 0.656250, 0.250000, 0.687500, 0.250000, 0.718750, 0.250000, 0.750000, 0.250000, 0.781250, 0.250000, 0.812500, 0.250000, 0.843750, 0.250000, 0.875000, 0.250000, 0.906250, 0.250000, 0.937500, 0.250000, 0.968750, 0.250000, 1, 0.250000, 0, 0.281250, 0.031250, 0.281250, 0.062500, 0.281250, 0.093750, 0.281250, 0.125000, 0.281250, 0.156250, 0.281250, 0.187500, 0.281250, 0.218750, 0.281250, 0.250000, 0.281250, 0.281250, 0.281250, 0.312500, 0.281250, 0.343750, 0.281250, 0.375000, 0.281250, 0.406250, 0.281250, 0.437500, 0.281250, 0.468750, 0.281250, 0.500000, 0.281250, 0.531250, 0.281250, 0.562500, 0.281250, 0.593750, 0.281250, 0.625000, 0.281250, 0.656250, 0.281250, 0.687500, 0.281250, 0.718750, 0.281250, 0.750000, 0.281250, 0.781250, 0.281250, 0.812500, 0.281250, 0.843750, 0.281250, 0.875000, 0.281250, 0.906250, 0.281250, 0.937500, 0.281250, 0.968750, 0.281250, 1, 0.281250, 0, 0.312500, 0.031250, 0.312500, 0.062500, 0.312500, 0.093750, 0.312500, 0.125000, 0.312500, 0.156250, 0.312500, 0.187500, 0.312500, 0.218750, 0.312500, 0.250000, 0.312500, 0.281250, 0.312500, 0.312500, 0.312500, 0.343750, 0.312500, 0.375000, 0.312500, 0.406250, 0.312500, 0.437500, 0.312500, 0.468750, 0.312500, 0.500000, 0.312500, 0.531250, 0.312500, 0.562500, 0.312500, 0.593750, 0.312500, 0.625000, 0.312500, 0.656250, 0.312500, 0.687500, 0.312500, 0.718750, 0.312500, 0.750000, 0.312500, 0.781250, 0.312500, 0.812500, 0.312500, 0.843750, 0.312500, 0.875000, 0.312500, 0.906250, 0.312500, 0.937500, 0.312500, 0.968750, 0.312500, 1, 0.312500, 0, 0.343750, 0.031250, 0.343750, 0.062500, 0.343750, 0.093750, 0.343750, 0.125000, 0.343750, 0.156250, 0.343750, 0.187500, 0.343750, 0.218750, 0.343750, 0.250000, 0.343750, 0.281250, 0.343750, 0.312500, 0.343750, 0.343750, 0.343750, 0.375000, 0.343750, 0.406250, 0.343750, 0.437500, 0.343750, 0.468750, 0.343750, 0.500000, 0.343750, 0.531250, 0.343750, 0.562500, 0.343750, 0.593750, 0.343750, 0.625000, 0.343750, 0.656250, 0.343750, 0.687500, 0.343750, 0.718750, 0.343750, 0.750000, 0.343750, 0.781250, 0.343750, 0.812500, 0.343750, 0.843750, 0.343750, 0.875000, 0.343750, 0.906250, 0.343750, 0.937500, 0.343750, 0.968750, 0.343750, 1, 0.343750, 0, 0.375000, 0.031250, 0.375000, 0.062500, 0.375000, 0.093750, 0.375000, 0.125000, 0.375000, 0.156250, 0.375000, 0.187500, 0.375000, 0.218750, 0.375000, 0.250000, 0.375000, 0.281250, 0.375000, 0.312500, 0.375000, 0.343750, 0.375000, 0.375000, 0.375000, 0.406250, 0.375000, 0.437500, 0.375000, 0.468750, 0.375000, 0.500000, 0.375000, 0.531250, 0.375000, 0.562500, 0.375000, 0.593750, 0.375000, 0.625000, 0.375000, 0.656250, 0.375000, 0.687500, 0.375000, 0.718750, 0.375000, 0.750000, 0.375000, 0.781250, 0.375000, 0.812500, 0.375000, 0.843750, 0.375000, 0.875000, 0.375000, 0.906250, 0.375000, 0.937500, 0.375000, 0.968750, 0.375000, 1, 0.375000, 0, 0.406250, 0.031250, 0.406250, 0.062500, 0.406250, 0.093750, 0.406250, 0.125000, 0.406250, 0.156250, 0.406250, 0.187500, 0.406250, 0.218750, 0.406250, 0.250000, 0.406250, 0.281250, 0.406250, 0.312500, 0.406250, 0.343750, 0.406250, 0.375000, 0.406250, 0.406250, 0.406250, 0.437500, 0.406250, 0.468750, 0.406250, 0.500000, 0.406250, 0.531250, 0.406250, 0.562500, 0.406250, 0.593750, 0.406250, 0.625000, 0.406250, 0.656250, 0.406250, 0.687500, 0.406250, 0.718750, 0.406250, 0.750000, 0.406250, 0.781250, 0.406250, 0.812500, 0.406250, 0.843750, 0.406250, 0.875000, 0.406250, 0.906250, 0.406250, 0.937500, 0.406250, 0.968750, 0.406250, 1, 0.406250, 0, 0.437500, 0.031250, 0.437500, 0.062500, 0.437500, 0.093750, 0.437500, 0.125000, 0.437500, 0.156250, 0.437500, 0.187500, 0.437500, 0.218750, 0.437500, 0.250000, 0.437500, 0.281250, 0.437500, 0.312500, 0.437500, 0.343750, 0.437500, 0.375000, 0.437500, 0.406250, 0.437500, 0.437500, 0.437500, 0.468750, 0.437500, 0.500000, 0.437500, 0.531250, 0.437500, 0.562500, 0.437500, 0.593750, 0.437500, 0.625000, 0.437500, 0.656250, 0.437500, 0.687500, 0.437500, 0.718750, 0.437500, 0.750000, 0.437500, 0.781250, 0.437500, 0.812500, 0.437500, 0.843750, 0.437500, 0.875000, 0.437500, 0.906250, 0.437500, 0.937500, 0.437500, 0.968750, 0.437500, 1, 0.437500, 0, 0.468750, 0.031250, 0.468750, 0.062500, 0.468750, 0.093750, 0.468750, 0.125000, 0.468750, 0.156250, 0.468750, 0.187500, 0.468750, 0.218750, 0.468750, 0.250000, 0.468750, 0.281250, 0.468750, 0.312500, 0.468750, 0.343750, 0.468750, 0.375000, 0.468750, 0.406250, 0.468750, 0.437500, 0.468750, 0.468750, 0.468750, 0.500000, 0.468750, 0.531250, 0.468750, 0.562500, 0.468750, 0.593750, 0.468750, 0.625000, 0.468750, 0.656250, 0.468750, 0.687500, 0.468750, 0.718750, 0.468750, 0.750000, 0.468750, 0.781250, 0.468750, 0.812500, 0.468750, 0.843750, 0.468750, 0.875000, 0.468750, 0.906250, 0.468750, 0.937500, 0.468750, 0.968750, 0.468750, 1, 0.468750, 0, 0.500000, 0.031250, 0.500000, 0.062500, 0.500000, 0.093750, 0.500000, 0.125000, 0.500000, 0.156250, 0.500000, 0.187500, 0.500000, 0.218750, 0.500000, 0.250000, 0.500000, 0.281250, 0.500000, 0.312500, 0.500000, 0.343750, 0.500000, 0.375000, 0.500000, 0.406250, 0.500000, 0.437500, 0.500000, 0.468750, 0.500000, 0.500000, 0.500000, 0.531250, 0.500000, 0.562500, 0.500000, 0.593750, 0.500000, 0.625000, 0.500000, 0.656250, 0.500000, 0.687500, 0.500000, 0.718750, 0.500000, 0.750000, 0.500000, 0.781250, 0.500000, 0.812500, 0.500000, 0.843750, 0.500000, 0.875000, 0.500000, 0.906250, 0.500000, 0.937500, 0.500000, 0.968750, 0.500000, 1, 0.500000, 0, 0.531250, 0.031250, 0.531250, 0.062500, 0.531250, 0.093750, 0.531250, 0.125000, 0.531250, 0.156250, 0.531250, 0.187500, 0.531250, 0.218750, 0.531250, 0.250000, 0.531250, 0.281250, 0.531250, 0.312500, 0.531250, 0.343750, 0.531250, 0.375000, 0.531250, 0.406250, 0.531250, 0.437500, 0.531250, 0.468750, 0.531250, 0.500000, 0.531250, 0.531250, 0.531250, 0.562500, 0.531250, 0.593750, 0.531250, 0.625000, 0.531250, 0.656250, 0.531250, 0.687500, 0.531250, 0.718750, 0.531250, 0.750000, 0.531250, 0.781250, 0.531250, 0.812500, 0.531250, 0.843750, 0.531250, 0.875000, 0.531250, 0.906250, 0.531250, 0.937500, 0.531250, 0.968750, 0.531250, 1, 0.531250, 0, 0.562500, 0.031250, 0.562500, 0.062500, 0.562500, 0.093750, 0.562500, 0.125000, 0.562500, 0.156250, 0.562500, 0.187500, 0.562500, 0.218750, 0.562500, 0.250000, 0.562500, 0.281250, 0.562500, 0.312500, 0.562500, 0.343750, 0.562500, 0.375000, 0.562500, 0.406250, 0.562500, 0.437500, 0.562500, 0.468750, 0.562500, 0.500000, 0.562500, 0.531250, 0.562500, 0.562500, 0.562500, 0.593750, 0.562500, 0.625000, 0.562500, 0.656250, 0.562500, 0.687500, 0.562500, 0.718750, 0.562500, 0.750000, 0.562500, 0.781250, 0.562500, 0.812500, 0.562500, 0.843750, 0.562500, 0.875000, 0.562500, 0.906250, 0.562500, 0.937500, 0.562500, 0.968750, 0.562500, 1, 0.562500, 0, 0.593750, 0.031250, 0.593750, 0.062500, 0.593750, 0.093750, 0.593750, 0.125000, 0.593750, 0.156250, 0.593750, 0.187500, 0.593750, 0.218750, 0.593750, 0.250000, 0.593750, 0.281250, 0.593750, 0.312500, 0.593750, 0.343750, 0.593750, 0.375000, 0.593750, 0.406250, 0.593750, 0.437500, 0.593750, 0.468750, 0.593750, 0.500000, 0.593750, 0.531250, 0.593750, 0.562500, 0.593750, 0.593750, 0.593750, 0.625000, 0.593750, 0.656250, 0.593750, 0.687500, 0.593750, 0.718750, 0.593750, 0.750000, 0.593750, 0.781250, 0.593750, 0.812500, 0.593750, 0.843750, 0.593750, 0.875000, 0.593750, 0.906250, 0.593750, 0.937500, 0.593750, 0.968750, 0.593750, 1, 0.593750, 0, 0.625000, 0.031250, 0.625000, 0.062500, 0.625000, 0.093750, 0.625000, 0.125000, 0.625000, 0.156250, 0.625000, 0.187500, 0.625000, 0.218750, 0.625000, 0.250000, 0.625000, 0.281250, 0.625000, 0.312500, 0.625000, 0.343750, 0.625000, 0.375000, 0.625000, 0.406250, 0.625000, 0.437500, 0.625000, 0.468750, 0.625000, 0.500000, 0.625000, 0.531250, 0.625000, 0.562500, 0.625000, 0.593750, 0.625000, 0.625000, 0.625000, 0.656250, 0.625000, 0.687500, 0.625000, 0.718750, 0.625000, 0.750000, 0.625000, 0.781250, 0.625000, 0.812500, 0.625000, 0.843750, 0.625000, 0.875000, 0.625000, 0.906250, 0.625000, 0.937500, 0.625000, 0.968750, 0.625000, 1, 0.625000, 0, 0.656250, 0.031250, 0.656250, 0.062500, 0.656250, 0.093750, 0.656250, 0.125000, 0.656250, 0.156250, 0.656250, 0.187500, 0.656250, 0.218750, 0.656250, 0.250000, 0.656250, 0.281250, 0.656250, 0.312500, 0.656250, 0.343750, 0.656250, 0.375000, 0.656250, 0.406250, 0.656250, 0.437500, 0.656250, 0.468750, 0.656250, 0.500000, 0.656250, 0.531250, 0.656250, 0.562500, 0.656250, 0.593750, 0.656250, 0.625000, 0.656250, 0.656250, 0.656250, 0.687500, 0.656250, 0.718750, 0.656250, 0.750000, 0.656250, 0.781250, 0.656250, 0.812500, 0.656250, 0.843750, 0.656250, 0.875000, 0.656250, 0.906250, 0.656250, 0.937500, 0.656250, 0.968750, 0.656250, 1, 0.656250, 0, 0.687500, 0.031250, 0.687500, 0.062500, 0.687500, 0.093750, 0.687500, 0.125000, 0.687500, 0.156250, 0.687500, 0.187500, 0.687500, 0.218750, 0.687500, 0.250000, 0.687500, 0.281250, 0.687500, 0.312500, 0.687500, 0.343750, 0.687500, 0.375000, 0.687500, 0.406250, 0.687500, 0.437500, 0.687500, 0.468750, 0.687500, 0.500000, 0.687500, 0.531250, 0.687500, 0.562500, 0.687500, 0.593750, 0.687500, 0.625000, 0.687500, 0.656250, 0.687500, 0.687500, 0.687500, 0.718750, 0.687500, 0.750000, 0.687500, 0.781250, 0.687500, 0.812500, 0.687500, 0.843750, 0.687500, 0.875000, 0.687500, 0.906250, 0.687500, 0.937500, 0.687500, 0.968750, 0.687500, 1, 0.687500, 0, 0.718750, 0.031250, 0.718750, 0.062500, 0.718750, 0.093750, 0.718750, 0.125000, 0.718750, 0.156250, 0.718750, 0.187500, 0.718750, 0.218750, 0.718750, 0.250000, 0.718750, 0.281250, 0.718750, 0.312500, 0.718750, 0.343750, 0.718750, 0.375000, 0.718750, 0.406250, 0.718750, 0.437500, 0.718750, 0.468750, 0.718750, 0.500000, 0.718750, 0.531250, 0.718750, 0.562500, 0.718750, 0.593750, 0.718750, 0.625000, 0.718750, 0.656250, 0.718750, 0.687500, 0.718750, 0.718750, 0.718750, 0.750000, 0.718750, 0.781250, 0.718750, 0.812500, 0.718750, 0.843750, 0.718750, 0.875000, 0.718750, 0.906250, 0.718750, 0.937500, 0.718750, 0.968750, 0.718750, 1, 0.718750, 0, 0.750000, 0.031250, 0.750000, 0.062500, 0.750000, 0.093750, 0.750000, 0.125000, 0.750000, 0.156250, 0.750000, 0.187500, 0.750000, 0.218750, 0.750000, 0.250000, 0.750000, 0.281250, 0.750000, 0.312500, 0.750000, 0.343750, 0.750000, 0.375000, 0.750000, 0.406250, 0.750000, 0.437500, 0.750000, 0.468750, 0.750000, 0.500000, 0.750000, 0.531250, 0.750000, 0.562500, 0.750000, 0.593750, 0.750000, 0.625000, 0.750000, 0.656250, 0.750000, 0.687500, 0.750000, 0.718750, 0.750000, 0.750000, 0.750000, 0.781250, 0.750000, 0.812500, 0.750000, 0.843750, 0.750000, 0.875000, 0.750000, 0.906250, 0.750000, 0.937500, 0.750000, 0.968750, 0.750000, 1, 0.750000, 0, 0.781250, 0.031250, 0.781250, 0.062500, 0.781250, 0.093750, 0.781250, 0.125000, 0.781250, 0.156250, 0.781250, 0.187500, 0.781250, 0.218750, 0.781250, 0.250000, 0.781250, 0.281250, 0.781250, 0.312500, 0.781250, 0.343750, 0.781250, 0.375000, 0.781250, 0.406250, 0.781250, 0.437500, 0.781250, 0.468750, 0.781250, 0.500000, 0.781250, 0.531250, 0.781250, 0.562500, 0.781250, 0.593750, 0.781250, 0.625000, 0.781250, 0.656250, 0.781250, 0.687500, 0.781250, 0.718750, 0.781250, 0.750000, 0.781250, 0.781250, 0.781250, 0.812500, 0.781250, 0.843750, 0.781250, 0.875000, 0.781250, 0.906250, 0.781250, 0.937500, 0.781250, 0.968750, 0.781250, 1, 0.781250, 0, 0.812500, 0.031250, 0.812500, 0.062500, 0.812500, 0.093750, 0.812500, 0.125000, 0.812500, 0.156250, 0.812500, 0.187500, 0.812500, 0.218750, 0.812500, 0.250000, 0.812500, 0.281250, 0.812500, 0.312500, 0.812500, 0.343750, 0.812500, 0.375000, 0.812500, 0.406250, 0.812500, 0.437500, 0.812500, 0.468750, 0.812500, 0.500000, 0.812500, 0.531250, 0.812500, 0.562500, 0.812500, 0.593750, 0.812500, 0.625000, 0.812500, 0.656250, 0.812500, 0.687500, 0.812500, 0.718750, 0.812500, 0.750000, 0.812500, 0.781250, 0.812500, 0.812500, 0.812500, 0.843750, 0.812500, 0.875000, 0.812500, 0.906250, 0.812500, 0.937500, 0.812500, 0.968750, 0.812500, 1, 0.812500, 0, 0.843750, 0.031250, 0.843750, 0.062500, 0.843750, 0.093750, 0.843750, 0.125000, 0.843750, 0.156250, 0.843750, 0.187500, 0.843750, 0.218750, 0.843750, 0.250000, 0.843750, 0.281250, 0.843750, 0.312500, 0.843750, 0.343750, 0.843750, 0.375000, 0.843750, 0.406250, 0.843750, 0.437500, 0.843750, 0.468750, 0.843750, 0.500000, 0.843750, 0.531250, 0.843750, 0.562500, 0.843750, 0.593750, 0.843750, 0.625000, 0.843750, 0.656250, 0.843750, 0.687500, 0.843750, 0.718750, 0.843750, 0.750000, 0.843750, 0.781250, 0.843750, 0.812500, 0.843750, 0.843750, 0.843750, 0.875000, 0.843750, 0.906250, 0.843750, 0.937500, 0.843750, 0.968750, 0.843750, 1, 0.843750, 0, 0.875000, 0.031250, 0.875000, 0.062500, 0.875000, 0.093750, 0.875000, 0.125000, 0.875000, 0.156250, 0.875000, 0.187500, 0.875000, 0.218750, 0.875000, 0.250000, 0.875000, 0.281250, 0.875000, 0.312500, 0.875000, 0.343750, 0.875000, 0.375000, 0.875000, 0.406250, 0.875000, 0.437500, 0.875000, 0.468750, 0.875000, 0.500000, 0.875000, 0.531250, 0.875000, 0.562500, 0.875000, 0.593750, 0.875000, 0.625000, 0.875000, 0.656250, 0.875000, 0.687500, 0.875000, 0.718750, 0.875000, 0.750000, 0.875000, 0.781250, 0.875000, 0.812500, 0.875000, 0.843750, 0.875000, 0.875000, 0.875000, 0.906250, 0.875000, 0.937500, 0.875000, 0.968750, 0.875000, 1, 0.875000, 0, 0.906250, 0.031250, 0.906250, 0.062500, 0.906250, 0.093750, 0.906250, 0.125000, 0.906250, 0.156250, 0.906250, 0.187500, 0.906250, 0.218750, 0.906250, 0.250000, 0.906250, 0.281250, 0.906250, 0.312500, 0.906250, 0.343750, 0.906250, 0.375000, 0.906250, 0.406250, 0.906250, 0.437500, 0.906250, 0.468750, 0.906250, 0.500000, 0.906250, 0.531250, 0.906250, 0.562500, 0.906250, 0.593750, 0.906250, 0.625000, 0.906250, 0.656250, 0.906250, 0.687500, 0.906250, 0.718750, 0.906250, 0.750000, 0.906250, 0.781250, 0.906250, 0.812500, 0.906250, 0.843750, 0.906250, 0.875000, 0.906250, 0.906250, 0.906250, 0.937500, 0.906250, 0.968750, 0.906250, 1, 0.906250, 0, 0.937500, 0.031250, 0.937500, 0.062500, 0.937500, 0.093750, 0.937500, 0.125000, 0.937500, 0.156250, 0.937500, 0.187500, 0.937500, 0.218750, 0.937500, 0.250000, 0.937500, 0.281250, 0.937500, 0.312500, 0.937500, 0.343750, 0.937500, 0.375000, 0.937500, 0.406250, 0.937500, 0.437500, 0.937500, 0.468750, 0.937500, 0.500000, 0.937500, 0.531250, 0.937500, 0.562500, 0.937500, 0.593750, 0.937500, 0.625000, 0.937500, 0.656250, 0.937500, 0.687500, 0.937500, 0.718750, 0.937500, 0.750000, 0.937500, 0.781250, 0.937500, 0.812500, 0.937500, 0.843750, 0.937500, 0.875000, 0.937500, 0.906250, 0.937500, 0.937500, 0.937500, 0.968750, 0.937500, 1, 0.937500, 0, 0.968750, 0.031250, 0.968750, 0.062500, 0.968750, 0.093750, 0.968750, 0.125000, 0.968750, 0.156250, 0.968750, 0.187500, 0.968750, 0.218750, 0.968750, 0.250000, 0.968750, 0.281250, 0.968750, 0.312500, 0.968750, 0.343750, 0.968750, 0.375000, 0.968750, 0.406250, 0.968750, 0.437500, 0.968750, 0.468750, 0.968750, 0.500000, 0.968750, 0.531250, 0.968750, 0.562500, 0.968750, 0.593750, 0.968750, 0.625000, 0.968750, 0.656250, 0.968750, 0.687500, 0.968750, 0.718750, 0.968750, 0.750000, 0.968750, 0.781250, 0.968750, 0.812500, 0.968750, 0.843750, 0.968750, 0.875000, 0.968750, 0.906250, 0.968750, 0.937500, 0.968750, 0.968750, 0.968750, 1, 0.968750, 0, 1, 0.031250, 1, 0.062500, 1, 0.093750, 1, 0.125000, 1, 0.156250, 1, 0.187500, 1, 0.218750, 1, 0.250000, 1, 0.281250, 1, 0.312500, 1, 0.343750, 1, 0.375000, 1, 0.406250, 1, 0.437500, 1, 0.468750, 1, 0.500000, 1, 0.531250, 1, 0.562500, 1, 0.593750, 1, 0.625000, 1, 0.656250, 1, 0.687500, 1, 0.718750, 1, 0.750000, 1, 0.781250, 1, 0.812500, 1, 0.843750, 1, 0.875000, 1, 0.906250, 1, 0.937500, 1, 0.968750, 1, 1, 1 };
    self->TextureCoordinate_10.point = m_point;
    self->TextureCoordinate_10.point_length = sizeof(m_point) / sizeof(float);
    }
    self->TextureCoordinate_10.m_type = 276;
    self->TextureCoordinate_10.m_data = NULL;
    self->NurbsSurface1.color = NULL;
    self->NurbsSurface1.coord = &self->Coordinate_4;
    self->NurbsSurface1.normal = &self->Normal1;
    self->NurbsSurface1.texCoord = &self->TextureCoordinate_10;
    self->NurbsSurface1.ccw = -1;
    {
    static int m_colorIndex[] = { 1, 34, 33, -1, 2, 35, 34, -1, 3, 36, 35, -1, 4, 37, 36, -1, 5, 38, 37, -1, 6, 39, 38, -1, 7, 40, 39, -1, 8, 41, 40, -1, 9, 42, 41, -1, 10, 43, 42, -1, 11, 44, 43, -1, 12, 45, 44, -1, 13, 46, 45, -1, 14, 47, 46, -1, 15, 48, 47, -1, 16, 49, 48, -1, 17, 50, 49, -1, 51, 50, 17, -1, 52, 51, 18, -1, 53, 52, 19, -1, 54, 53, 20, -1, 55, 54, 21, -1, 56, 55, 22, -1, 57, 56, 23, -1, 58, 57, 24, -1, 59, 58, 25, -1, 60, 59, 26, -1, 61, 60, 27, -1, 62, 61, 28, -1, 63, 62, 29, -1, 64, 63, 30, -1, 65, 64, 31, -1, 66, 33, 34, -1, 34, 67, 66, -1, 67, 34, 35, -1, 35, 68, 67, -1, 68, 35, 36, -1, 36, 69, 68, -1, 69, 36, 37, -1, 37, 70, 69, -1, 70, 37, 38, -1, 38, 71, 70, -1, 71, 38, 39, -1, 39, 72, 71, -1, 72, 39, 40, -1, 40, 73, 72, -1, 73, 40, 41, -1, 41, 74, 73, -1, 74, 41, 42, -1, 42, 75, 74, -1, 75, 42, 43, -1, 43, 76, 75, -1, 76, 43, 44, -1, 44, 77, 76, -1, 77, 44, 45, -1, 45, 78, 77, -1, 78, 45, 46, -1, 46, 79, 78, -1, 79, 46, 47, -1, 47, 80, 79, -1, 80, 47, 48, -1, 48, 81, 80, -1, 81, 48, 49, -1, 49, 82, 81, -1, 82, 49, 50, -1, 50, 83, 82, -1, 50, 51, 84, -1, 84, 83, 50, -1, 51, 52, 85, -1, 85, 84, 51, -1, 52, 53, 86, -1, 86, 85, 52, -1, 53, 54, 87, -1, 87, 86, 53, -1, 54, 55, 88, -1, 88, 87, 54, -1, 55, 56, 89, -1, 89, 88, 55, -1, 56, 57, 90, -1, 90, 89, 56, -1, 57, 58, 91, -1, 91, 90, 57, -1, 58, 59, 92, -1, 92, 91, 58, -1, 59, 60, 93, -1, 93, 92, 59, -1, 60, 61, 94, -1, 94, 93, 60, -1, 61, 62, 95, -1, 95, 94, 61, -1, 62, 63, 96, -1, 96, 95, 62, -1, 63, 64, 97, -1, 97, 96, 63, -1, 64, 65, 98, -1, 98, 97, 64, -1, 99, 66, 67, -1, 67, 100, 99, -1, 100, 67, 68, -1, 68, 101, 100, -1, 101, 68, 69, -1, 69, 102, 101, -1, 102, 69, 70, -1, 70, 103, 102, -1, 103, 70, 71, -1, 71, 104, 103, -1, 104, 71, 72, -1, 72, 105, 104, -1, 105, 72, 73, -1, 73, 106, 105, -1, 106, 73, 74, -1, 74, 107, 106, -1, 107, 74, 75, -1, 75, 108, 107, -1, 108, 75, 76, -1, 76, 109, 108, -1, 109, 76, 77, -1, 77, 110, 109, -1, 110, 77, 78, -1, 78, 111, 110, -1, 111, 78, 79, -1, 79, 112, 111, -1, 112, 79, 80, -1, 80, 113, 112, -1, 113, 80, 81, -1, 81, 114, 113, -1, 114, 81, 82, -1, 82, 115, 114, -1, 115, 82, 83, -1, 83, 116, 115, -1, 83, 84, 117, -1, 117, 116, 83, -1, 84, 85, 118, -1, 118, 117, 84, -1, 85, 86, 119, -1, 119, 118, 85, -1, 86, 87, 120, -1, 120, 119, 86, -1, 87, 88, 121, -1, 121, 120, 87, -1, 88, 89, 122, -1, 122, 121, 88, -1, 89, 90, 123, -1, 123, 122, 89, -1, 90, 91, 124, -1, 124, 123, 90, -1, 91, 92, 125, -1, 125, 124, 91, -1, 92, 93, 126, -1, 126, 125, 92, -1, 93, 94, 127, -1, 127, 126, 93, -1, 94, 95, 128, -1, 128, 127, 94, -1, 95, 96, 129, -1, 129, 128, 95, -1, 96, 97, 130, -1, 130, 129, 96, -1, 97, 98, 131, -1, 131, 130, 97, -1, 132, 99, 100, -1, 100, 133, 132, -1, 133, 100, 101, -1, 101, 134, 133, -1, 134, 101, 102, -1, 102, 135, 134, -1, 135, 102, 103, -1, 103, 136, 135, -1, 136, 103, 104, -1, 104, 137, 136, -1, 137, 104, 105, -1, 105, 138, 137, -1, 138, 105, 106, -1, 106, 139, 138, -1, 139, 106, 107, -1, 107, 140, 139, -1, 140, 107, 108, -1, 108, 141, 140, -1, 141, 108, 109, -1, 109, 142, 141, -1, 142, 109, 110, -1, 110, 143, 142, -1, 143, 110, 111, -1, 111, 144, 143, -1, 144, 111, 112, -1, 112, 145, 144, -1, 145, 112, 113, -1, 113, 146, 145, -1, 146, 113, 114, -1, 114, 147, 146, -1, 147, 114, 115, -1, 115, 148, 147, -1, 148, 115, 116, -1, 116, 149, 148, -1, 116, 117, 150, -1, 150, 149, 116, -1, 117, 118, 151, -1, 151, 150, 117, -1, 118, 119, 152, -1, 152, 151, 118, -1, 119, 120, 153, -1, 153, 152, 119, -1, 120, 121, 154, -1, 154, 153, 120, -1, 121, 122, 155, -1, 155, 154, 121, -1, 122, 123, 156, -1, 156, 155, 122, -1, 123, 124, 157, -1, 157, 156, 123, -1, 124, 125, 158, -1, 158, 157, 124, -1, 125, 126, 159, -1, 159, 158, 125, -1, 126, 127, 160, -1, 160, 159, 126, -1, 127, 128, 161, -1, 161, 160, 127, -1, 128, 129, 162, -1, 162, 161, 128, -1, 129, 130, 163, -1, 163, 162, 129, -1, 130, 131, 164, -1, 164, 163, 130, -1, 165, 132, 133, -1, 133, 166, 165, -1, 166, 133, 134, -1, 134, 167, 166, -1, 167, 134, 135, -1, 135, 168, 167, -1, 168, 135, 136, -1, 136, 169, 168, -1, 169, 136, 137, -1, 137, 170, 169, -1, 170, 137, 138, -1, 138, 171, 170, -1, 171, 138, 139, -1, 139, 172, 171, -1, 172, 139, 140, -1, 140, 173, 172, -1, 173, 140, 141, -1, 141, 174, 173, -1, 174, 141, 142, -1, 142, 175, 174, -1, 175, 142, 143, -1, 143, 176, 175, -1, 176, 143, 144, -1, 144, 177, 176, -1, 177, 144, 145, -1, 145, 178, 177, -1, 178, 145, 146, -1, 146, 179, 178, -1, 179, 146, 147, -1, 147, 180, 179, -1, 180, 147, 148, -1, 148, 181, 180, -1, 181, 148, 149, -1, 149, 182, 181, -1, 149, 150, 183, -1, 183, 182, 149, -1, 150, 151, 184, -1, 184, 183, 150, -1, 151, 152, 185, -1, 185, 184, 151, -1, 152, 153, 186, -1, 186, 185, 152, -1, 153, 154, 187, -1, 187, 186, 153, -1, 154, 155, 188, -1, 188, 187, 154, -1, 155, 156, 189, -1, 189, 188, 155, -1, 156, 157, 190, -1, 190, 189, 156, -1, 157, 158, 191, -1, 191, 190, 157, -1, 158, 159, 192, -1, 192, 191, 158, -1, 159, 160, 193, -1, 193, 192, 159, -1, 160, 161, 194, -1, 194, 193, 160, -1, 161, 162, 195, -1, 195, 194, 161, -1, 162, 163, 196, -1, 196, 195, 162, -1, 163, 164, 197, -1, 197, 196, 163, -1, 198, 165, 166, -1, 166, 199, 198, -1, 199, 166, 167, -1, 167, 200, 199, -1, 200, 167, 168, -1, 168, 201, 200, -1, 201, 168, 169, -1, 169, 202, 201, -1, 202, 169, 170, -1, 170, 203, 202, -1, 203, 170, 171, -1, 171, 204, 203, -1, 204, 171, 172, -1, 172, 205, 204, -1, 205, 172, 173, -1, 173, 206, 205, -1, 206, 173, 174, -1, 174, 207, 206, -1, 207, 174, 175, -1, 175, 208, 207, -1, 208, 175, 176, -1, 176, 209, 208, -1, 209, 176, 177, -1, 177, 210, 209, -1, 210, 177, 178, -1, 178, 211, 210, -1, 211, 178, 179, -1, 179, 212, 211, -1, 212, 179, 180, -1, 180, 213, 212, -1, 213, 180, 181, -1, 181, 214, 213, -1, 214, 181, 182, -1, 182, 215, 214, -1, 182, 183, 216, -1, 216, 215, 182, -1, 183, 184, 217, -1, 217, 216, 183, -1, 184, 185, 218, -1, 218, 217, 184, -1, 185, 186, 219, -1, 219, 218, 185, -1, 186, 187, 220, -1, 220, 219, 186, -1, 187, 188, 221, -1, 221, 220, 187, -1, 188, 189, 222, -1, 222, 221, 188, -1, 189, 190, 223, -1, 223, 222, 189, -1, 190, 191, 224, -1, 224, 223, 190, -1, 191, 192, 225, -1, 225, 224, 191, -1, 192, 193, 226, -1, 226, 225, 192, -1, 193, 194, 227, -1, 227, 226, 193, -1, 194, 195, 228, -1, 228, 227, 194, -1, 195, 196, 229, -1, 229, 228, 195, -1, 196, 197, 230, -1, 230, 229, 196, -1, 231, 198, 199, -1, 199, 232, 231, -1, 232, 199, 200, -1, 200, 233, 232, -1, 233, 200, 201, -1, 201, 234, 233, -1, 234, 201, 202, -1, 202, 235, 234, -1, 235, 202, 203, -1, 203, 236, 235, -1, 236, 203, 204, -1, 204, 237, 236, -1, 237, 204, 205, -1, 205, 238, 237, -1, 238, 205, 206, -1, 206, 239, 238, -1, 239, 206, 207, -1, 207, 240, 239, -1, 240, 207, 208, -1, 208, 241, 240, -1, 241, 208, 209, -1, 209, 242, 241, -1, 242, 209, 210, -1, 210, 243, 242, -1, 243, 210, 211, -1, 211, 244, 243, -1, 244, 211, 212, -1, 212, 245, 244, -1, 245, 212, 213, -1, 213, 246, 245, -1, 246, 213, 214, -1, 214, 247, 246, -1, 247, 214, 215, -1, 215, 248, 247, -1, 215, 216, 249, -1, 249, 248, 215, -1, 216, 217, 250, -1, 250, 249, 216, -1, 217, 218, 251, -1, 251, 250, 217, -1, 218, 219, 252, -1, 252, 251, 218, -1, 219, 220, 253, -1, 253, 252, 219, -1, 220, 221, 254, -1, 254, 253, 220, -1, 221, 222, 255, -1, 255, 254, 221, -1, 222, 223, 256, -1, 256, 255, 222, -1, 223, 224, 257, -1, 257, 256, 223, -1, 224, 225, 258, -1, 258, 257, 224, -1, 225, 226, 259, -1, 259, 258, 225, -1, 226, 227, 260, -1, 260, 259, 226, -1, 227, 228, 261, -1, 261, 260, 227, -1, 228, 229, 262, -1, 262, 261, 228, -1, 229, 230, 263, -1, 263, 262, 229, -1, 264, 231, 232, -1, 232, 265, 264, -1, 265, 232, 233, -1, 233, 266, 265, -1, 266, 233, 234, -1, 234, 267, 266, -1, 267, 234, 235, -1, 235, 268, 267, -1, 268, 235, 236, -1, 236, 269, 268, -1, 269, 236, 237, -1, 237, 270, 269, -1, 270, 237, 238, -1, 238, 271, 270, -1, 271, 238, 239, -1, 239, 272, 271, -1, 272, 239, 240, -1, 240, 273, 272, -1, 273, 240, 241, -1, 241, 274, 273, -1, 274, 241, 242, -1, 242, 275, 274, -1, 275, 242, 243, -1, 243, 276, 275, -1, 276, 243, 244, -1, 244, 277, 276, -1, 277, 244, 245, -1, 245, 278, 277, -1, 278, 245, 246, -1, 246, 279, 278, -1, 279, 246, 247, -1, 247, 280, 279, -1, 280, 247, 248, -1, 248, 281, 280, -1, 248, 249, 282, -1, 282, 281, 248, -1, 249, 250, 283, -1, 283, 282, 249, -1, 250, 251, 284, -1, 284, 283, 250, -1, 251, 252, 285, -1, 285, 284, 251, -1, 252, 253, 286, -1, 286, 285, 252, -1, 253, 254, 287, -1, 287, 286, 253, -1, 254, 255, 288, -1, 288, 287, 254, -1, 255, 256, 289, -1, 289, 288, 255, -1, 256, 257, 290, -1, 290, 289, 256, -1, 257, 258, 291, -1, 291, 290, 257, -1, 258, 259, 292, -1, 292, 291, 258, -1, 259, 260, 293, -1, 293, 292, 259, -1, 260, 261, 294, -1, 294, 293, 260, -1, 261, 262, 295, -1, 295, 294, 261, -1, 262, 263, 296, -1, 296, 295, 262, -1, 297, 264, 265, -1, 265, 298, 297, -1, 298, 265, 266, -1, 266, 299, 298, -1, 299, 266, 267, -1, 267, 300, 299, -1, 300, 267, 268, -1, 268, 301, 300, -1, 301, 268, 269, -1, 269, 302, 301, -1, 302, 269, 270, -1, 270, 303, 302, -1, 303, 270, 271, -1, 271, 304, 303, -1, 304, 271, 272, -1, 272, 305, 304, -1, 305, 272, 273, -1, 273, 306, 305, -1, 306, 273, 274, -1, 274, 307, 306, -1, 307, 274, 275, -1, 275, 308, 307, -1, 308, 275, 276, -1, 276, 309, 308, -1, 309, 276, 277, -1, 277, 310, 309, -1, 310, 277, 278, -1, 278, 311, 310, -1, 311, 278, 279, -1, 279, 312, 311, -1, 312, 279, 280, -1, 280, 313, 312, -1, 313, 280, 281, -1, 281, 314, 313, -1, 281, 282, 315, -1, 315, 314, 281, -1, 282, 283, 316, -1, 316, 315, 282, -1, 283, 284, 317, -1, 317, 316, 283, -1, 284, 285, 318, -1, 318, 317, 284, -1, 285, 286, 319, -1, 319, 318, 285, -1, 286, 287, 320, -1, 320, 319, 286, -1, 287, 288, 321, -1, 321, 320, 287, -1, 288, 289, 322, -1, 322, 321, 288, -1, 289, 290, 323, -1, 323, 322, 289, -1, 290, 291, 324, -1, 324, 323, 290, -1, 291, 292, 325, -1, 325, 324, 291, -1, 292, 293, 326, -1, 326, 325, 292, -1, 293, 294, 327, -1, 327, 326, 293, -1, 294, 295, 328, -1, 328, 327, 294, -1, 295, 296, 329, -1, 329, 328, 295, -1, 330, 297, 298, -1, 298, 331, 330, -1, 331, 298, 299, -1, 299, 332, 331, -1, 332, 299, 300, -1, 300, 333, 332, -1, 333, 300, 301, -1, 301, 334, 333, -1, 334, 301, 302, -1, 302, 335, 334, -1, 335, 302, 303, -1, 303, 336, 335, -1, 336, 303, 304, -1, 304, 337, 336, -1, 337, 304, 305, -1, 305, 338, 337, -1, 338, 305, 306, -1, 306, 339, 338, -1, 339, 306, 307, -1, 307, 340, 339, -1, 340, 307, 308, -1, 308, 341, 340, -1, 341, 308, 309, -1, 309, 342, 341, -1, 342, 309, 310, -1, 310, 343, 342, -1, 343, 310, 311, -1, 311, 344, 343, -1, 344, 311, 312, -1, 312, 345, 344, -1, 345, 312, 313, -1, 313, 346, 345, -1, 346, 313, 314, -1, 314, 347, 346, -1, 314, 315, 348, -1, 348, 347, 314, -1, 315, 316, 349, -1, 349, 348, 315, -1, 316, 317, 350, -1, 350, 349, 316, -1, 317, 318, 351, -1, 351, 350, 317, -1, 318, 319, 352, -1, 352, 351, 318, -1, 319, 320, 353, -1, 353, 352, 319, -1, 320, 321, 354, -1, 354, 353, 320, -1, 321, 322, 355, -1, 355, 354, 321, -1, 322, 323, 356, -1, 356, 355, 322, -1, 323, 324, 357, -1, 357, 356, 323, -1, 324, 325, 358, -1, 358, 357, 324, -1, 325, 326, 359, -1, 359, 358, 325, -1, 326, 327, 360, -1, 360, 359, 326, -1, 327, 328, 361, -1, 361, 360, 327, -1, 328, 329, 362, -1, 362, 361, 328, -1, 363, 330, 331, -1, 331, 364, 363, -1, 364, 331, 332, -1, 332, 365, 364, -1, 365, 332, 333, -1, 333, 366, 365, -1, 366, 333, 334, -1, 334, 367, 366, -1, 367, 334, 335, -1, 335, 368, 367, -1, 368, 335, 336, -1, 336, 369, 368, -1, 369, 336, 337, -1, 337, 370, 369, -1, 370, 337, 338, -1, 338, 371, 370, -1, 371, 338, 339, -1, 339, 372, 371, -1, 372, 339, 340, -1, 340, 373, 372, -1, 373, 340, 341, -1, 341, 374, 373, -1, 374, 341, 342, -1, 342, 375, 374, -1, 375, 342, 343, -1, 343, 376, 375, -1, 376, 343, 344, -1, 344, 377, 376, -1, 377, 344, 345, -1, 345, 378, 377, -1, 378, 345, 346, -1, 346, 379, 378, -1, 379, 346, 347, -1, 347, 380, 379, -1, 347, 348, 381, -1, 381, 380, 347, -1, 348, 349, 382, -1, 382, 381, 348, -1, 349, 350, 383, -1, 383, 382, 349, -1, 350, 351, 384, -1, 384, 383, 350, -1, 351, 352, 385, -1, 385, 384, 351, -1, 352, 353, 386, -1, 386, 385, 352, -1, 353, 354, 387, -1, 387, 386, 353, -1, 354, 355, 388, -1, 388, 387, 354, -1, 355, 356, 389, -1, 389, 388, 355, -1, 356, 357, 390, -1, 390, 389, 356, -1, 357, 358, 391, -1, 391, 390, 357, -1, 358, 359, 392, -1, 392, 391, 358, -1, 359, 360, 393, -1, 393, 392, 359, -1, 360, 361, 394, -1, 394, 393, 360, -1, 361, 362, 395, -1, 395, 394, 361, -1, 396, 363, 364, -1, 364, 397, 396, -1, 397, 364, 365, -1, 365, 398, 397, -1, 398, 365, 366, -1, 366, 399, 398, -1, 399, 366, 367, -1, 367, 400, 399, -1, 400, 367, 368, -1, 368, 401, 400, -1, 401, 368, 369, -1, 369, 402, 401, -1, 402, 369, 370, -1, 370, 403, 402, -1, 403, 370, 371, -1, 371, 404, 403, -1, 404, 371, 372, -1, 372, 405, 404, -1, 405, 372, 373, -1, 373, 406, 405, -1, 406, 373, 374, -1, 374, 407, 406, -1, 407, 374, 375, -1, 375, 408, 407, -1, 408, 375, 376, -1, 376, 409, 408, -1, 409, 376, 377, -1, 377, 410, 409, -1, 410, 377, 378, -1, 378, 411, 410, -1, 411, 378, 379, -1, 379, 412, 411, -1, 412, 379, 380, -1, 380, 413, 412, -1, 380, 381, 414, -1, 414, 413, 380, -1, 381, 382, 415, -1, 415, 414, 381, -1, 382, 383, 416, -1, 416, 415, 382, -1, 383, 384, 417, -1, 417, 416, 383, -1, 384, 385, 418, -1, 418, 417, 384, -1, 385, 386, 419, -1, 419, 418, 385, -1, 386, 387, 420, -1, 420, 419, 386, -1, 387, 388, 421, -1, 421, 420, 387, -1, 388, 389, 422, -1, 422, 421, 388, -1, 389, 390, 423, -1, 423, 422, 389, -1, 390, 391, 424, -1, 424, 423, 390, -1, 391, 392, 425, -1, 425, 424, 391, -1, 392, 393, 426, -1, 426, 425, 392, -1, 393, 394, 427, -1, 427, 426, 393, -1, 394, 395, 428, -1, 428, 427, 394, -1, 429, 396, 397, -1, 397, 430, 429, -1, 430, 397, 398, -1, 398, 431, 430, -1, 431, 398, 399, -1, 399, 432, 431, -1, 432, 399, 400, -1, 400, 433, 432, -1, 433, 400, 401, -1, 401, 434, 433, -1, 434, 401, 402, -1, 402, 435, 434, -1, 435, 402, 403, -1, 403, 436, 435, -1, 436, 403, 404, -1, 404, 437, 436, -1, 437, 404, 405, -1, 405, 438, 437, -1, 438, 405, 406, -1, 406, 439, 438, -1, 439, 406, 407, -1, 407, 440, 439, -1, 440, 407, 408, -1, 408, 441, 440, -1, 441, 408, 409, -1, 409, 442, 441, -1, 442, 409, 410, -1, 410, 443, 442, -1, 443, 410, 411, -1, 411, 444, 443, -1, 444, 411, 412, -1, 412, 445, 444, -1, 445, 412, 413, -1, 413, 446, 445, -1, 413, 414, 447, -1, 447, 446, 413, -1, 414, 415, 448, -1, 448, 447, 414, -1, 415, 416, 449, -1, 449, 448, 415, -1, 416, 417, 450, -1, 450, 449, 416, -1, 417, 418, 451, -1, 451, 450, 417, -1, 418, 419, 452, -1, 452, 451, 418, -1, 419, 420, 453, -1, 453, 452, 419, -1, 420, 421, 454, -1, 454, 453, 420, -1, 421, 422, 455, -1, 455, 454, 421, -1, 422, 423, 456, -1, 456, 455, 422, -1, 423, 424, 457, -1, 457, 456, 423, -1, 424, 425, 458, -1, 458, 457, 424, -1, 425, 426, 459, -1, 459, 458, 425, -1, 426, 427, 460, -1, 460, 459, 426, -1, 427, 428, 461, -1, 461, 460, 427, -1, 462, 429, 430, -1, 430, 463, 462, -1, 463, 430, 431, -1, 431, 464, 463, -1, 464, 431, 432, -1, 432, 465, 464, -1, 465, 432, 433, -1, 433, 466, 465, -1, 466, 433, 434, -1, 434, 467, 466, -1, 467, 434, 435, -1, 435, 468, 467, -1, 468, 435, 436, -1, 436, 469, 468, -1, 469, 436, 437, -1, 437, 470, 469, -1, 470, 437, 438, -1, 438, 471, 470, -1, 471, 438, 439, -1, 439, 472, 471, -1, 472, 439, 440, -1, 440, 473, 472, -1, 473, 440, 441, -1, 441, 474, 473, -1, 474, 441, 442, -1, 442, 475, 474, -1, 475, 442, 443, -1, 443, 476, 475, -1, 476, 443, 444, -1, 444, 477, 476, -1, 477, 444, 445, -1, 445, 478, 477, -1, 478, 445, 446, -1, 446, 479, 478, -1, 446, 447, 480, -1, 480, 479, 446, -1, 447, 448, 481, -1, 481, 480, 447, -1, 448, 449, 482, -1, 482, 481, 448, -1, 449, 450, 483, -1, 483, 482, 449, -1, 450, 451, 484, -1, 484, 483, 450, -1, 451, 452, 485, -1, 485, 484, 451, -1, 452, 453, 486, -1, 486, 485, 452, -1, 453, 454, 487, -1, 487, 486, 453, -1, 454, 455, 488, -1, 488, 487, 454, -1, 455, 456, 489, -1, 489, 488, 455, -1, 456, 457, 490, -1, 490, 489, 456, -1, 457, 458, 491, -1, 491, 490, 457, -1, 458, 459, 492, -1, 492, 491, 458, -1, 459, 460, 493, -1, 493, 492, 459, -1, 460, 461, 494, -1, 494, 493, 460, -1, 495, 462, 463, -1, 463, 496, 495, -1, 496, 463, 464, -1, 464, 497, 496, -1, 497, 464, 465, -1, 465, 498, 497, -1, 498, 465, 466, -1, 466, 499, 498, -1, 499, 466, 467, -1, 467, 500, 499, -1, 500, 467, 468, -1, 468, 501, 500, -1, 501, 468, 469, -1, 469, 502, 501, -1, 502, 469, 470, -1, 470, 503, 502, -1, 503, 470, 471, -1, 471, 504, 503, -1, 504, 471, 472, -1, 472, 505, 504, -1, 505, 472, 473, -1, 473, 506, 505, -1, 506, 473, 474, -1, 474, 507, 506, -1, 507, 474, 475, -1, 475, 508, 507, -1, 508, 475, 476, -1, 476, 509, 508, -1, 509, 476, 477, -1, 477, 510, 509, -1, 510, 477, 478, -1, 478, 511, 510, -1, 511, 478, 479, -1, 479, 512, 511, -1, 479, 480, 513, -1, 513, 512, 479, -1, 480, 481, 514, -1, 514, 513, 480, -1, 481, 482, 515, -1, 515, 514, 481, -1, 482, 483, 516, -1, 516, 515, 482, -1, 483, 484, 517, -1, 517, 516, 483, -1, 484, 485, 518, -1, 518, 517, 484, -1, 485, 486, 519, -1, 519, 518, 485, -1, 486, 487, 520, -1, 520, 519, 486, -1, 487, 488, 521, -1, 521, 520, 487, -1, 488, 489, 522, -1, 522, 521, 488, -1, 489, 490, 523, -1, 523, 522, 489, -1, 490, 491, 524, -1, 524, 523, 490, -1, 491, 492, 525, -1, 525, 524, 491, -1, 492, 493, 526, -1, 526, 525, 492, -1, 493, 494, 527, -1, 527, 526, 493, -1, 528, 495, 496, -1, 496, 529, 528, -1, 529, 496, 497, -1, 497, 530, 529, -1, 530, 497, 498, -1, 498, 531, 530, -1, 531, 498, 499, -1, 499, 532, 531, -1, 532, 499, 500, -1, 500, 533, 532, -1, 533, 500, 501, -1, 501, 534, 533, -1, 534, 501, 502, -1, 502, 535, 534, -1, 535, 502, 503, -1, 503, 536, 535, -1, 536, 503, 504, -1, 504, 537, 536, -1, 537, 504, 505, -1, 505, 538, 537, -1, 538, 505, 506, -1, 506, 539, 538, -1, 539, 506, 507, -1, 507, 540, 539, -1, 540, 507, 508, -1, 508, 541, 540, -1, 541, 508, 509, -1, 509, 542, 541, -1, 542, 509, 510, -1, 510, 543, 542, -1, 543, 510, 511, -1, 511, 544, 543, -1, 544, 511, 512, -1, 512, 545, 544, -1, 512, 513, 546, -1, 546, 545, 512, -1, 513, 514, 547, -1, 547, 546, 513, -1, 514, 515, 548, -1, 548, 547, 514, -1, 515, 516, 549, -1, 549, 548, 515, -1, 516, 517, 550, -1, 550, 549, 516, -1, 517, 518, 551, -1, 551, 550, 517, -1, 518, 519, 552, -1, 552, 551, 518, -1, 519, 520, 553, -1, 553, 552, 519, -1, 520, 521, 554, -1, 554, 553, 520, -1, 521, 522, 555, -1, 555, 554, 521, -1, 522, 523, 556, -1, 556, 555, 522, -1, 523, 524, 557, -1, 557, 556, 523, -1, 524, 525, 558, -1, 558, 557, 524, -1, 525, 526, 559, -1, 559, 558, 525, -1, 526, 527, 560, -1, 560, 559, 526, -1, 561, 528, 529, -1, 529, 562, 561, -1, 562, 529, 530, -1, 530, 563, 562, -1, 563, 530, 531, -1, 531, 564, 563, -1, 564, 531, 532, -1, 532, 565, 564, -1, 565, 532, 533, -1, 533, 566, 565, -1, 566, 533, 534, -1, 534, 567, 566, -1, 567, 534, 535, -1, 535, 568, 567, -1, 568, 535, 536, -1, 536, 569, 568, -1, 569, 536, 537, -1, 537, 570, 569, -1, 570, 537, 538, -1, 538, 571, 570, -1, 571, 538, 539, -1, 539, 572, 571, -1, 572, 539, 540, -1, 540, 573, 572, -1, 573, 540, 541, -1, 541, 574, 573, -1, 574, 541, 542, -1, 542, 575, 574, -1, 575, 542, 543, -1, 543, 576, 575, -1, 576, 543, 544, -1, 544, 577, 576, -1, 577, 544, 545, -1, 545, 578, 577, -1, 545, 546, 579, -1, 579, 578, 545, -1, 546, 547, 580, -1, 580, 579, 546, -1, 547, 548, 581, -1, 581, 580, 547, -1, 548, 549, 582, -1, 582, 581, 548, -1, 549, 550, 583, -1, 583, 582, 549, -1, 550, 551, 584, -1, 584, 583, 550, -1, 551, 552, 585, -1, 585, 584, 551, -1, 552, 553, 586, -1, 586, 585, 552, -1, 553, 554, 587, -1, 587, 586, 553, -1, 554, 555, 588, -1, 588, 587, 554, -1, 555, 556, 589, -1, 589, 588, 555, -1, 556, 557, 590, -1, 590, 589, 556, -1, 557, 558, 591, -1, 591, 590, 557, -1, 558, 559, 592, -1, 592, 591, 558, -1, 559, 560, 593, -1, 593, 592, 559, -1, 594, 561, 562, -1, 562, 595, 594, -1, 595, 562, 563, -1, 563, 596, 595, -1, 596, 563, 564, -1, 564, 597, 596, -1, 597, 564, 565, -1, 565, 598, 597, -1, 598, 565, 566, -1, 566, 599, 598, -1, 599, 566, 567, -1, 567, 600, 599, -1, 600, 567, 568, -1, 568, 601, 600, -1, 601, 568, 569, -1, 569, 602, 601, -1, 602, 569, 570, -1, 570, 603, 602, -1, 603, 570, 571, -1, 571, 604, 603, -1, 604, 571, 572, -1, 572, 605, 604, -1, 605, 572, 573, -1, 573, 606, 605, -1, 606, 573, 574, -1, 574, 607, 606, -1, 607, 574, 575, -1, 575, 608, 607, -1, 608, 575, 576, -1, 576, 609, 608, -1, 609, 576, 577, -1, 577, 610, 609, -1, 610, 577, 578, -1, 578, 611, 610, -1, 578, 579, 612, -1, 612, 611, 578, -1, 579, 580, 613, -1, 613, 612, 579, -1, 580, 581, 614, -1, 614, 613, 580, -1, 581, 582, 615, -1, 615, 614, 581, -1, 582, 583, 616, -1, 616, 615, 582, -1, 583, 584, 617, -1, 617, 616, 583, -1, 584, 585, 618, -1, 618, 617, 584, -1, 585, 586, 619, -1, 619, 618, 585, -1, 586, 587, 620, -1, 620, 619, 586, -1, 587, 588, 621, -1, 621, 620, 587, -1, 588, 589, 622, -1, 622, 621, 588, -1, 589, 590, 623, -1, 623, 622, 589, -1, 590, 591, 624, -1, 624, 623, 590, -1, 591, 592, 625, -1, 625, 624, 591, -1, 592, 593, 626, -1, 626, 625, 592, -1, 627, 594, 595, -1, 595, 628, 627, -1, 628, 595, 596, -1, 596, 629, 628, -1, 629, 596, 597, -1, 597, 630, 629, -1, 630, 597, 598, -1, 598, 631, 630, -1, 631, 598, 599, -1, 599, 632, 631, -1, 632, 599, 600, -1, 600, 633, 632, -1, 633, 600, 601, -1, 601, 634, 633, -1, 634, 601, 602, -1, 602, 635, 634, -1, 635, 602, 603, -1, 603, 636, 635, -1, 636, 603, 604, -1, 604, 637, 636, -1, 637, 604, 605, -1, 605, 638, 637, -1, 638, 605, 606, -1, 606, 639, 638, -1, 639, 606, 607, -1, 607, 640, 639, -1, 640, 607, 608, -1, 608, 641, 640, -1, 641, 608, 609, -1, 609, 642, 641, -1, 642, 609, 610, -1, 610, 643, 642, -1, 643, 610, 611, -1, 611, 644, 643, -1, 611, 612, 645, -1, 645, 644, 611, -1, 612, 613, 646, -1, 646, 645, 612, -1, 613, 614, 647, -1, 647, 646, 613, -1, 614, 615, 648, -1, 648, 647, 614, -1, 615, 616, 649, -1, 649, 648, 615, -1, 616, 617, 650, -1, 650, 649, 616, -1, 617, 618, 651, -1, 651, 650, 617, -1, 618, 619, 652, -1, 652, 651, 618, -1, 619, 620, 653, -1, 653, 652, 619, -1, 620, 621, 654, -1, 654, 653, 620, -1, 621, 622, 655, -1, 655, 654, 621, -1, 622, 623, 656, -1, 656, 655, 622, -1, 623, 624, 657, -1, 657, 656, 623, -1, 624, 625, 658, -1, 658, 657, 624, -1, 625, 626, 659, -1, 659, 658, 625, -1, 660, 627, 628, -1, 628, 661, 660, -1, 661, 628, 629, -1, 629, 662, 661, -1, 662, 629, 630, -1, 630, 663, 662, -1, 663, 630, 631, -1, 631, 664, 663, -1, 664, 631, 632, -1, 632, 665, 664, -1, 665, 632, 633, -1, 633, 666, 665, -1, 666, 633, 634, -1, 634, 667, 666, -1, 667, 634, 635, -1, 635, 668, 667, -1, 668, 635, 636, -1, 636, 669, 668, -1, 669, 636, 637, -1, 637, 670, 669, -1, 670, 637, 638, -1, 638, 671, 670, -1, 671, 638, 639, -1, 639, 672, 671, -1, 672, 639, 640, -1, 640, 673, 672, -1, 673, 640, 641, -1, 641, 674, 673, -1, 674, 641, 642, -1, 642, 675, 674, -1, 675, 642, 643, -1, 643, 676, 675, -1, 676, 643, 644, -1, 644, 677, 676, -1, 644, 645, 678, -1, 678, 677, 644, -1, 645, 646, 679, -1, 679, 678, 645, -1, 646, 647, 680, -1, 680, 679, 646, -1, 647, 648, 681, -1, 681, 680, 647, -1, 648, 649, 682, -1, 682, 681, 648, -1, 649, 650, 683, -1, 683, 682, 649, -1, 650, 651, 684, -1, 684, 683, 650, -1, 651, 652, 685, -1, 685, 684, 651, -1, 652, 653, 686, -1, 686, 685, 652, -1, 653, 654, 687, -1, 687, 686, 653, -1, 654, 655, 688, -1, 688, 687, 654, -1, 655, 656, 689, -1, 689, 688, 655, -1, 656, 657, 690, -1, 690, 689, 656, -1, 657, 658, 691, -1, 691, 690, 657, -1, 658, 659, 692, -1, 692, 691, 658, -1, 693, 660, 661, -1, 661, 694, 693, -1, 694, 661, 662, -1, 662, 695, 694, -1, 695, 662, 663, -1, 663, 696, 695, -1, 696, 663, 664, -1, 664, 697, 696, -1, 697, 664, 665, -1, 665, 698, 697, -1, 698, 665, 666, -1, 666, 699, 698, -1, 699, 666, 667, -1, 667, 700, 699, -1, 700, 667, 668, -1, 668, 701, 700, -1, 701, 668, 669, -1, 669, 702, 701, -1, 702, 669, 670, -1, 670, 703, 702, -1, 703, 670, 671, -1, 671, 704, 703, -1, 704, 671, 672, -1, 672, 705, 704, -1, 705, 672, 673, -1, 673, 706, 705, -1, 706, 673, 674, -1, 674, 707, 706, -1, 707, 674, 675, -1, 675, 708, 707, -1, 708, 675, 676, -1, 676, 709, 708, -1, 709, 676, 677, -1, 677, 710, 709, -1, 677, 678, 711, -1, 711, 710, 677, -1, 678, 679, 712, -1, 712, 711, 678, -1, 679, 680, 713, -1, 713, 712, 679, -1, 680, 681, 714, -1, 714, 713, 680, -1, 681, 682, 715, -1, 715, 714, 681, -1, 682, 683, 716, -1, 716, 715, 682, -1, 683, 684, 717, -1, 717, 716, 683, -1, 684, 685, 718, -1, 718, 717, 684, -1, 685, 686, 719, -1, 719, 718, 685, -1, 686, 687, 720, -1, 720, 719, 686, -1, 687, 688, 721, -1, 721, 720, 687, -1, 688, 689, 722, -1, 722, 721, 688, -1, 689, 690, 723, -1, 723, 722, 689, -1, 690, 691, 724, -1, 724, 723, 690, -1, 691, 692, 725, -1, 725, 724, 691, -1, 726, 693, 694, -1, 694, 727, 726, -1, 727, 694, 695, -1, 695, 728, 727, -1, 728, 695, 696, -1, 696, 729, 728, -1, 729, 696, 697, -1, 697, 730, 729, -1, 730, 697, 698, -1, 698, 731, 730, -1, 731, 698, 699, -1, 699, 732, 731, -1, 732, 699, 700, -1, 700, 733, 732, -1, 733, 700, 701, -1, 701, 734, 733, -1, 734, 701, 702, -1, 702, 735, 734, -1, 735, 702, 703, -1, 703, 736, 735, -1, 736, 703, 704, -1, 704, 737, 736, -1, 737, 704, 705, -1, 705, 738, 737, -1, 738, 705, 706, -1, 706, 739, 738, -1, 739, 706, 707, -1, 707, 740, 739, -1, 740, 707, 708, -1, 708, 741, 740, -1, 741, 708, 709, -1, 709, 742, 741, -1, 742, 709, 710, -1, 710, 743, 742, -1, 710, 711, 744, -1, 744, 743, 710, -1, 711, 712, 745, -1, 745, 744, 711, -1, 712, 713, 746, -1, 746, 745, 712, -1, 713, 714, 747, -1, 747, 746, 713, -1, 714, 715, 748, -1, 748, 747, 714, -1, 715, 716, 749, -1, 749, 748, 715, -1, 716, 717, 750, -1, 750, 749, 716, -1, 717, 718, 751, -1, 751, 750, 717, -1, 718, 719, 752, -1, 752, 751, 718, -1, 719, 720, 753, -1, 753, 752, 719, -1, 720, 721, 754, -1, 754, 753, 720, -1, 721, 722, 755, -1, 755, 754, 721, -1, 722, 723, 756, -1, 756, 755, 722, -1, 723, 724, 757, -1, 757, 756, 723, -1, 724, 725, 758, -1, 758, 757, 724, -1, 759, 726, 727, -1, 727, 760, 759, -1, 760, 727, 728, -1, 728, 761, 760, -1, 761, 728, 729, -1, 729, 762, 761, -1, 762, 729, 730, -1, 730, 763, 762, -1, 763, 730, 731, -1, 731, 764, 763, -1, 764, 731, 732, -1, 732, 765, 764, -1, 765, 732, 733, -1, 733, 766, 765, -1, 766, 733, 734, -1, 734, 767, 766, -1, 767, 734, 735, -1, 735, 768, 767, -1, 768, 735, 736, -1, 736, 769, 768, -1, 769, 736, 737, -1, 737, 770, 769, -1, 770, 737, 738, -1, 738, 771, 770, -1, 771, 738, 739, -1, 739, 772, 771, -1, 772, 739, 740, -1, 740, 773, 772, -1, 773, 740, 741, -1, 741, 774, 773, -1, 774, 741, 742, -1, 742, 775, 774, -1, 775, 742, 743, -1, 743, 776, 775, -1, 743, 744, 777, -1, 777, 776, 743, -1, 744, 745, 778, -1, 778, 777, 744, -1, 745, 746, 779, -1, 779, 778, 745, -1, 746, 747, 780, -1, 780, 779, 746, -1, 747, 748, 781, -1, 781, 780, 747, -1, 748, 749, 782, -1, 782, 781, 748, -1, 749, 750, 783, -1, 783, 782, 749, -1, 750, 751, 784, -1, 784, 783, 750, -1, 751, 752, 785, -1, 785, 784, 751, -1, 752, 753, 786, -1, 786, 785, 752, -1, 753, 754, 787, -1, 787, 786, 753, -1, 754, 755, 788, -1, 788, 787, 754, -1, 755, 756, 789, -1, 789, 788, 755, -1, 756, 757, 790, -1, 790, 789, 756, -1, 757, 758, 791, -1, 791, 790, 757, -1, 792, 759, 760, -1, 760, 793, 792, -1, 793, 760, 761, -1, 761, 794, 793, -1, 794, 761, 762, -1, 762, 795, 794, -1, 795, 762, 763, -1, 763, 796, 795, -1, 796, 763, 764, -1, 764, 797, 796, -1, 797, 764, 765, -1, 765, 798, 797, -1, 798, 765, 766, -1, 766, 799, 798, -1, 799, 766, 767, -1, 767, 800, 799, -1, 800, 767, 768, -1, 768, 801, 800, -1, 801, 768, 769, -1, 769, 802, 801, -1, 802, 769, 770, -1, 770, 803, 802, -1, 803, 770, 771, -1, 771, 804, 803, -1, 804, 771, 772, -1, 772, 805, 804, -1, 805, 772, 773, -1, 773, 806, 805, -1, 806, 773, 774, -1, 774, 807, 806, -1, 807, 774, 775, -1, 775, 808, 807, -1, 808, 775, 776, -1, 776, 809, 808, -1, 776, 777, 810, -1, 810, 809, 776, -1, 777, 778, 811, -1, 811, 810, 777, -1, 778, 779, 812, -1, 812, 811, 778, -1, 779, 780, 813, -1, 813, 812, 779, -1, 780, 781, 814, -1, 814, 813, 780, -1, 781, 782, 815, -1, 815, 814, 781, -1, 782, 783, 816, -1, 816, 815, 782, -1, 783, 784, 817, -1, 817, 816, 783, -1, 784, 785, 818, -1, 818, 817, 784, -1, 785, 786, 819, -1, 819, 818, 785, -1, 786, 787, 820, -1, 820, 819, 786, -1, 787, 788, 821, -1, 821, 820, 787, -1, 788, 789, 822, -1, 822, 821, 788, -1, 789, 790, 823, -1, 823, 822, 789, -1, 790, 791, 824, -1, 824, 823, 790, -1, 825, 792, 793, -1, 793, 826, 825, -1, 826, 793, 794, -1, 794, 827, 826, -1, 827, 794, 795, -1, 795, 828, 827, -1, 828, 795, 796, -1, 796, 829, 828, -1, 829, 796, 797, -1, 797, 830, 829, -1, 830, 797, 798, -1, 798, 831, 830, -1, 831, 798, 799, -1, 799, 832, 831, -1, 832, 799, 800, -1, 800, 833, 832, -1, 833, 800, 801, -1, 801, 834, 833, -1, 834, 801, 802, -1, 802, 835, 834, -1, 835, 802, 803, -1, 803, 836, 835, -1, 836, 803, 804, -1, 804, 837, 836, -1, 837, 804, 805, -1, 805, 838, 837, -1, 838, 805, 806, -1, 806, 839, 838, -1, 839, 806, 807, -1, 807, 840, 839, -1, 840, 807, 808, -1, 808, 841, 840, -1, 841, 808, 809, -1, 809, 842, 841, -1, 809, 810, 843, -1, 843, 842, 809, -1, 810, 811, 844, -1, 844, 843, 810, -1, 811, 812, 845, -1, 845, 844, 811, -1, 812, 813, 846, -1, 846, 845, 812, -1, 813, 814, 847, -1, 847, 846, 813, -1, 814, 815, 848, -1, 848, 847, 814, -1, 815, 816, 849, -1, 849, 848, 815, -1, 816, 817, 850, -1, 850, 849, 816, -1, 817, 818, 851, -1, 851, 850, 817, -1, 818, 819, 852, -1, 852, 851, 818, -1, 819, 820, 853, -1, 853, 852, 819, -1, 820, 821, 854, -1, 854, 853, 820, -1, 821, 822, 855, -1, 855, 854, 821, -1, 822, 823, 856, -1, 856, 855, 822, -1, 823, 824, 857, -1, 857, 856, 823, -1, 858, 825, 826, -1, 826, 859, 858, -1, 859, 826, 827, -1, 827, 860, 859, -1, 860, 827, 828, -1, 828, 861, 860, -1, 861, 828, 829, -1, 829, 862, 861, -1, 862, 829, 830, -1, 830, 863, 862, -1, 863, 830, 831, -1, 831, 864, 863, -1, 864, 831, 832, -1, 832, 865, 864, -1, 865, 832, 833, -1, 833, 866, 865, -1, 866, 833, 834, -1, 834, 867, 866, -1, 867, 834, 835, -1, 835, 868, 867, -1, 868, 835, 836, -1, 836, 869, 868, -1, 869, 836, 837, -1, 837, 870, 869, -1, 870, 837, 838, -1, 838, 871, 870, -1, 871, 838, 839, -1, 839, 872, 871, -1, 872, 839, 840, -1, 840, 873, 872, -1, 873, 840, 841, -1, 841, 874, 873, -1, 874, 841, 842, -1, 842, 875, 874, -1, 842, 843, 876, -1, 876, 875, 842, -1, 843, 844, 877, -1, 877, 876, 843, -1, 844, 845, 878, -1, 878, 877, 844, -1, 845, 846, 879, -1, 879, 878, 845, -1, 846, 847, 880, -1, 880, 879, 846, -1, 847, 848, 881, -1, 881, 880, 847, -1, 848, 849, 882, -1, 882, 881, 848, -1, 849, 850, 883, -1, 883, 882, 849, -1, 850, 851, 884, -1, 884, 883, 850, -1, 851, 852, 885, -1, 885, 884, 851, -1, 852, 853, 886, -1, 886, 885, 852, -1, 853, 854, 887, -1, 887, 886, 853, -1, 854, 855, 888, -1, 888, 887, 854, -1, 855, 856, 889, -1, 889, 888, 855, -1, 856, 857, 890, -1, 890, 889, 856, -1, 891, 858, 859, -1, 859, 892, 891, -1, 892, 859, 860, -1, 860, 893, 892, -1, 893, 860, 861, -1, 861, 894, 893, -1, 894, 861, 862, -1, 862, 895, 894, -1, 895, 862, 863, -1, 863, 896, 895, -1, 896, 863, 864, -1, 864, 897, 896, -1, 897, 864, 865, -1, 865, 898, 897, -1, 898, 865, 866, -1, 866, 899, 898, -1, 899, 866, 867, -1, 867, 900, 899, -1, 900, 867, 868, -1, 868, 901, 900, -1, 901, 868, 869, -1, 869, 902, 901, -1, 902, 869, 870, -1, 870, 903, 902, -1, 903, 870, 871, -1, 871, 904, 903, -1, 904, 871, 872, -1, 872, 905, 904, -1, 905, 872, 873, -1, 873, 906, 905, -1, 906, 873, 874, -1, 874, 907, 906, -1, 907, 874, 875, -1, 875, 908, 907, -1, 875, 876, 909, -1, 909, 908, 875, -1, 876, 877, 910, -1, 910, 909, 876, -1, 877, 878, 911, -1, 911, 910, 877, -1, 878, 879, 912, -1, 912, 911, 878, -1, 879, 880, 913, -1, 913, 912, 879, -1, 880, 881, 914, -1, 914, 913, 880, -1, 881, 882, 915, -1, 915, 914, 881, -1, 882, 883, 916, -1, 916, 915, 882, -1, 883, 884, 917, -1, 917, 916, 883, -1, 884, 885, 918, -1, 918, 917, 884, -1, 885, 886, 919, -1, 919, 918, 885, -1, 886, 887, 920, -1, 920, 919, 886, -1, 887, 888, 921, -1, 921, 920, 887, -1, 888, 889, 922, -1, 922, 921, 888, -1, 889, 890, 923, -1, 923, 922, 889, -1, 924, 891, 892, -1, 892, 925, 924, -1, 925, 892, 893, -1, 893, 926, 925, -1, 926, 893, 894, -1, 894, 927, 926, -1, 927, 894, 895, -1, 895, 928, 927, -1, 928, 895, 896, -1, 896, 929, 928, -1, 929, 896, 897, -1, 897, 930, 929, -1, 930, 897, 898, -1, 898, 931, 930, -1, 931, 898, 899, -1, 899, 932, 931, -1, 932, 899, 900, -1, 900, 933, 932, -1, 933, 900, 901, -1, 901, 934, 933, -1, 934, 901, 902, -1, 902, 935, 934, -1, 935, 902, 903, -1, 903, 936, 935, -1, 936, 903, 904, -1, 904, 937, 936, -1, 937, 904, 905, -1, 905, 938, 937, -1, 938, 905, 906, -1, 906, 939, 938, -1, 939, 906, 907, -1, 907, 940, 939, -1, 940, 907, 908, -1, 908, 941, 940, -1, 908, 909, 942, -1, 942, 941, 908, -1, 909, 910, 943, -1, 943, 942, 909, -1, 910, 911, 944, -1, 944, 943, 910, -1, 911, 912, 945, -1, 945, 944, 911, -1, 912, 913, 946, -1, 946, 945, 912, -1, 913, 914, 947, -1, 947, 946, 913, -1, 914, 915, 948, -1, 948, 947, 914, -1, 915, 916, 949, -1, 949, 948, 915, -1, 916, 917, 950, -1, 950, 949, 916, -1, 917, 918, 951, -1, 951, 950, 917, -1, 918, 919, 952, -1, 952, 951, 918, -1, 919, 920, 953, -1, 953, 952, 919, -1, 920, 921, 954, -1, 954, 953, 920, -1, 921, 922, 955, -1, 955, 954, 921, -1, 922, 923, 956, -1, 956, 955, 922, -1, 957, 924, 925, -1, 925, 958, 957, -1, 958, 925, 926, -1, 926, 959, 958, -1, 959, 926, 927, -1, 927, 960, 959, -1, 960, 927, 928, -1, 928, 961, 960, -1, 961, 928, 929, -1, 929, 962, 961, -1, 962, 929, 930, -1, 930, 963, 962, -1, 963, 930, 931, -1, 931, 964, 963, -1, 964, 931, 932, -1, 932, 965, 964, -1, 965, 932, 933, -1, 933, 966, 965, -1, 966, 933, 934, -1, 934, 967, 966, -1, 967, 934, 935, -1, 935, 968, 967, -1, 968, 935, 936, -1, 936, 969, 968, -1, 969, 936, 937, -1, 937, 970, 969, -1, 970, 937, 938, -1, 938, 971, 970, -1, 971, 938, 939, -1, 939, 972, 971, -1, 972, 939, 940, -1, 940, 973, 972, -1, 973, 940, 941, -1, 941, 974, 973, -1, 941, 942, 975, -1, 975, 974, 941, -1, 942, 943, 976, -1, 976, 975, 942, -1, 943, 944, 977, -1, 977, 976, 943, -1, 944, 945, 978, -1, 978, 977, 944, -1, 945, 946, 979, -1, 979, 978, 945, -1, 946, 947, 980, -1, 980, 979, 946, -1, 947, 948, 981, -1, 981, 980, 947, -1, 948, 949, 982, -1, 982, 981, 948, -1, 949, 950, 983, -1, 983, 982, 949, -1, 950, 951, 984, -1, 984, 983, 950, -1, 951, 952, 985, -1, 985, 984, 951, -1, 952, 953, 986, -1, 986, 985, 952, -1, 953, 954, 987, -1, 987, 986, 953, -1, 954, 955, 988, -1, 988, 987, 954, -1, 955, 956, 989, -1, 989, 988, 955, -1, 990, 957, 958, -1, 958, 991, 990, -1, 991, 958, 959, -1, 959, 992, 991, -1, 992, 959, 960, -1, 960, 993, 992, -1, 993, 960, 961, -1, 961, 994, 993, -1, 994, 961, 962, -1, 962, 995, 994, -1, 995, 962, 963, -1, 963, 996, 995, -1, 996, 963, 964, -1, 964, 997, 996, -1, 997, 964, 965, -1, 965, 998, 997, -1, 998, 965, 966, -1, 966, 999, 998, -1, 999, 966, 967, -1, 967, 1000, 999, -1, 1000, 967, 968, -1, 968, 1001, 1000, -1, 1001, 968, 969, -1, 969, 1002, 1001, -1, 1002, 969, 970, -1, 970, 1003, 1002, -1, 1003, 970, 971, -1, 971, 1004, 1003, -1, 1004, 971, 972, -1, 972, 1005, 1004, -1, 1005, 972, 973, -1, 973, 1006, 1005, -1, 1006, 973, 974, -1, 974, 1007, 1006, -1, 974, 975, 1008, -1, 1008, 1007, 974, -1, 975, 976, 1009, -1, 1009, 1008, 975, -1, 976, 977, 1010, -1, 1010, 1009, 976, -1, 977, 978, 1011, -1, 1011, 1010, 977, -1, 978, 979, 1012, -1, 1012, 1011, 978, -1, 979, 980, 1013, -1, 1013, 1012, 979, -1, 980, 981, 1014, -1, 1014, 1013, 980, -1, 981, 982, 1015, -1, 1015, 1014, 981, -1, 982, 983, 1016, -1, 1016, 1015, 982, -1, 983, 984, 1017, -1, 1017, 1016, 983, -1, 984, 985, 1018, -1, 1018, 1017, 984, -1, 985, 986, 1019, -1, 1019, 1018, 985, -1, 986, 987, 1020, -1, 1020, 1019, 986, -1, 987, 988, 1021, -1, 1021, 1020, 987, -1, 988, 989, 1022, -1, 1022, 1021, 988, -1, 1023, 990, 991, -1, 991, 1024, 1023, -1, 1024, 991, 992, -1, 992, 1025, 1024, -1, 1025, 992, 993, -1, 993, 1026, 1025, -1, 1026, 993, 994, -1, 994, 1027, 1026, -1, 1027, 994, 995, -1, 995, 1028, 1027, -1, 1028, 995, 996, -1, 996, 1029, 1028, -1, 1029, 996, 997, -1, 997, 1030, 1029, -1, 1030, 997, 998, -1, 998, 1031, 1030, -1, 1031, 998, 999, -1, 999, 1032, 1031, -1, 1032, 999, 1000, -1, 1000, 1033, 1032, -1, 1033, 1000, 1001, -1, 1001, 1034, 1033, -1, 1034, 1001, 1002, -1, 1002, 1035, 1034, -1, 1035, 1002, 1003, -1, 1003, 1036, 1035, -1, 1036, 1003, 1004, -1, 1004, 1037, 1036, -1, 1037, 1004, 1005, -1, 1005, 1038, 1037, -1, 1038, 1005, 1006, -1, 1006, 1039, 1038, -1, 1039, 1006, 1007, -1, 1007, 1040, 1039, -1, 1007, 1008, 1041, -1, 1041, 1040, 1007, -1, 1008, 1009, 1042, -1, 1042, 1041, 1008, -1, 1009, 1010, 1043, -1, 1043, 1042, 1009, -1, 1010, 1011, 1044, -1, 1044, 1043, 1010, -1, 1011, 1012, 1045, -1, 1045, 1044, 1011, -1, 1012, 1013, 1046, -1, 1046, 1045, 1012, -1, 1013, 1014, 1047, -1, 1047, 1046, 1013, -1, 1014, 1015, 1048, -1, 1048, 1047, 1014, -1, 1015, 1016, 1049, -1, 1049, 1048, 1015, -1, 1016, 1017, 1050, -1, 1050, 1049, 1016, -1, 1017, 1018, 1051, -1, 1051, 1050, 1017, -1, 1018, 1019, 1052, -1, 1052, 1051, 1018, -1, 1019, 1020, 1053, -1, 1053, 1052, 1019, -1, 1020, 1021, 1054, -1, 1054, 1053, 1020, -1, 1021, 1022, 1055, -1, 1055, 1054, 1021, -1, 1056, 1023, 1024, -1, 1057, 1024, 1025, -1, 1058, 1025, 1026, -1, 1059, 1026, 1027, -1, 1060, 1027, 1028, -1, 1061, 1028, 1029, -1, 1062, 1029, 1030, -1, 1063, 1030, 1031, -1, 1064, 1031, 1032, -1, 1065, 1032, 1033, -1, 1066, 1033, 1034, -1, 1067, 1034, 1035, -1, 1068, 1035, 1036, -1, 1069, 1036, 1037, -1, 1070, 1037, 1038, -1, 1071, 1038, 1039, -1, 1072, 1039, 1040, -1, 1040, 1041, 1074, -1, 1041, 1042, 1075, -1, 1042, 1043, 1076, -1, 1043, 1044, 1077, -1, 1044, 1045, 1078, -1, 1045, 1046, 1079, -1, 1046, 1047, 1080, -1, 1047, 1048, 1081, -1, 1048, 1049, 1082, -1, 1049, 1050, 1083, -1, 1050, 1051, 1084, -1, 1051, 1052, 1085, -1, 1052, 1053, 1086, -1, 1053, 1054, 1087, -1, 1054, 1055, 1088, -1 };
    self->NurbsSurface1.colorIndex = m_colorIndex;
    self->NurbsSurface1.colorIndex_length = sizeof(m_colorIndex) / sizeof(int);
    }
    self->NurbsSurface1.colorPerVertex = -1;
    self->NurbsSurface1.convex = -1;
    {
    static int m_coordIndex[] = { 1, 34, 33, -1, 2, 35, 34, -1, 3, 36, 35, -1, 4, 37, 36, -1, 5, 38, 37, -1, 6, 39, 38, -1, 7, 40, 39, -1, 8, 41, 40, -1, 9, 42, 41, -1, 10, 43, 42, -1, 11, 44, 43, -1, 12, 45, 44, -1, 13, 46, 45, -1, 14, 47, 46, -1, 15, 48, 47, -1, 16, 49, 48, -1, 17, 50, 49, -1, 51, 50, 17, -1, 52, 51, 18, -1, 53, 52, 19, -1, 54, 53, 20, -1, 55, 54, 21, -1, 56, 55, 22, -1, 57, 56, 23, -1, 58, 57, 24, -1, 59, 58, 25, -1, 60, 59, 26, -1, 61, 60, 27, -1, 62, 61, 28, -1, 63, 62, 29, -1, 64, 63, 30, -1, 65, 64, 31, -1, 66, 33, 34, -1, 34, 67, 66, -1, 67, 34, 35, -1, 35, 68, 67, -1, 68, 35, 36, -1, 36, 69, 68, -1, 69, 36, 37, -1, 37, 70, 69, -1, 70, 37, 38, -1, 38, 71, 70, -1, 71, 38, 39, -1, 39, 72, 71, -1, 72, 39, 40, -1, 40, 73, 72, -1, 73, 40, 41, -1, 41, 74, 73, -1, 74, 41, 42, -1, 42, 75, 74, -1, 75, 42, 43, -1, 43, 76, 75, -1, 76, 43, 44, -1, 44, 77, 76, -1, 77, 44, 45, -1, 45, 78, 77, -1, 78, 45, 46, -1, 46, 79, 78, -1, 79, 46, 47, -1, 47, 80, 79, -1, 80, 47, 48, -1, 48, 81, 80, -1, 81, 48, 49, -1, 49, 82, 81, -1, 82, 49, 50, -1, 50, 83, 82, -1, 50, 51, 84, -1, 84, 83, 50, -1, 51, 52, 85, -1, 85, 84, 51, -1, 52, 53, 86, -1, 86, 85, 52, -1, 53, 54, 87, -1, 87, 86, 53, -1, 54, 55, 88, -1, 88, 87, 54, -1, 55, 56, 89, -1, 89, 88, 55, -1, 56, 57, 90, -1, 90, 89, 56, -1, 57, 58, 91, -1, 91, 90, 57, -1, 58, 59, 92, -1, 92, 91, 58, -1, 59, 60, 93, -1, 93, 92, 59, -1, 60, 61, 94, -1, 94, 93, 60, -1, 61, 62, 95, -1, 95, 94, 61, -1, 62, 63, 96, -1, 96, 95, 62, -1, 63, 64, 97, -1, 97, 96, 63, -1, 64, 65, 98, -1, 98, 97, 64, -1, 99, 66, 67, -1, 67, 100, 99, -1, 100, 67, 68, -1, 68, 101, 100, -1, 101, 68, 69, -1, 69, 102, 101, -1, 102, 69, 70, -1, 70, 103, 102, -1, 103, 70, 71, -1, 71, 104, 103, -1, 104, 71, 72, -1, 72, 105, 104, -1, 105, 72, 73, -1, 73, 106, 105, -1, 106, 73, 74, -1, 74, 107, 106, -1, 107, 74, 75, -1, 75, 108, 107, -1, 108, 75, 76, -1, 76, 109, 108, -1, 109, 76, 77, -1, 77, 110, 109, -1, 110, 77, 78, -1, 78, 111, 110, -1, 111, 78, 79, -1, 79, 112, 111, -1, 112, 79, 80, -1, 80, 113, 112, -1, 113, 80, 81, -1, 81, 114, 113, -1, 114, 81, 82, -1, 82, 115, 114, -1, 115, 82, 83, -1, 83, 116, 115, -1, 83, 84, 117, -1, 117, 116, 83, -1, 84, 85, 118, -1, 118, 117, 84, -1, 85, 86, 119, -1, 119, 118, 85, -1, 86, 87, 120, -1, 120, 119, 86, -1, 87, 88, 121, -1, 121, 120, 87, -1, 88, 89, 122, -1, 122, 121, 88, -1, 89, 90, 123, -1, 123, 122, 89, -1, 90, 91, 124, -1, 124, 123, 90, -1, 91, 92, 125, -1, 125, 124, 91, -1, 92, 93, 126, -1, 126, 125, 92, -1, 93, 94, 127, -1, 127, 126, 93, -1, 94, 95, 128, -1, 128, 127, 94, -1, 95, 96, 129, -1, 129, 128, 95, -1, 96, 97, 130, -1, 130, 129, 96, -1, 97, 98, 131, -1, 131, 130, 97, -1, 132, 99, 100, -1, 100, 133, 132, -1, 133, 100, 101, -1, 101, 134, 133, -1, 134, 101, 102, -1, 102, 135, 134, -1, 135, 102, 103, -1, 103, 136, 135, -1, 136, 103, 104, -1, 104, 137, 136, -1, 137, 104, 105, -1, 105, 138, 137, -1, 138, 105, 106, -1, 106, 139, 138, -1, 139, 106, 107, -1, 107, 140, 139, -1, 140, 107, 108, -1, 108, 141, 140, -1, 141, 108, 109, -1, 109, 142, 141, -1, 142, 109, 110, -1, 110, 143, 142, -1, 143, 110, 111, -1, 111, 144, 143, -1, 144, 111, 112, -1, 112, 145, 144, -1, 145, 112, 113, -1, 113, 146, 145, -1, 146, 113, 114, -1, 114, 147, 146, -1, 147, 114, 115, -1, 115, 148, 147, -1, 148, 115, 116, -1, 116, 149, 148, -1, 116, 117, 150, -1, 150, 149, 116, -1, 117, 118, 151, -1, 151, 150, 117, -1, 118, 119, 152, -1, 152, 151, 118, -1, 119, 120, 153, -1, 153, 152, 119, -1, 120, 121, 154, -1, 154, 153, 120, -1, 121, 122, 155, -1, 155, 154, 121, -1, 122, 123, 156, -1, 156, 155, 122, -1, 123, 124, 157, -1, 157, 156, 123, -1, 124, 125, 158, -1, 158, 157, 124, -1, 125, 126, 159, -1, 159, 158, 125, -1, 126, 127, 160, -1, 160, 159, 126, -1, 127, 128, 161, -1, 161, 160, 127, -1, 128, 129, 162, -1, 162, 161, 128, -1, 129, 130, 163, -1, 163, 162, 129, -1, 130, 131, 164, -1, 164, 163, 130, -1, 165, 132, 133, -1, 133, 166, 165, -1, 166, 133, 134, -1, 134, 167, 166, -1, 167, 134, 135, -1, 135, 168, 167, -1, 168, 135, 136, -1, 136, 169, 168, -1, 169, 136, 137, -1, 137, 170, 169, -1, 170, 137, 138, -1, 138, 171, 170, -1, 171, 138, 139, -1, 139, 172, 171, -1, 172, 139, 140, -1, 140, 173, 172, -1, 173, 140, 141, -1, 141, 174, 173, -1, 174, 141, 142, -1, 142, 175, 174, -1, 175, 142, 143, -1, 143, 176, 175, -1, 176, 143, 144, -1, 144, 177, 176, -1, 177, 144, 145, -1, 145, 178, 177, -1, 178, 145, 146, -1, 146, 179, 178, -1, 179, 146, 147, -1, 147, 180, 179, -1, 180, 147, 148, -1, 148, 181, 180, -1, 181, 148, 149, -1, 149, 182, 181, -1, 149, 150, 183, -1, 183, 182, 149, -1, 150, 151, 184, -1, 184, 183, 150, -1, 151, 152, 185, -1, 185, 184, 151, -1, 152, 153, 186, -1, 186, 185, 152, -1, 153, 154, 187, -1, 187, 186, 153, -1, 154, 155, 188, -1, 188, 187, 154, -1, 155, 156, 189, -1, 189, 188, 155, -1, 156, 157, 190, -1, 190, 189, 156, -1, 157, 158, 191, -1, 191, 190, 157, -1, 158, 159, 192, -1, 192, 191, 158, -1, 159, 160, 193, -1, 193, 192, 159, -1, 160, 161, 194, -1, 194, 193, 160, -1, 161, 162, 195, -1, 195, 194, 161, -1, 162, 163, 196, -1, 196, 195, 162, -1, 163, 164, 197, -1, 197, 196, 163, -1, 198, 165, 166, -1, 166, 199, 198, -1, 199, 166, 167, -1, 167, 200, 199, -1, 200, 167, 168, -1, 168, 201, 200, -1, 201, 168, 169, -1, 169, 202, 201, -1, 202, 169, 170, -1, 170, 203, 202, -1, 203, 170, 171, -1, 171, 204, 203, -1, 204, 171, 172, -1, 172, 205, 204, -1, 205, 172, 173, -1, 173, 206, 205, -1, 206, 173, 174, -1, 174, 207, 206, -1, 207, 174, 175, -1, 175, 208, 207, -1, 208, 175, 176, -1, 176, 209, 208, -1, 209, 176, 177, -1, 177, 210, 209, -1, 210, 177, 178, -1, 178, 211, 210, -1, 211, 178, 179, -1, 179, 212, 211, -1, 212, 179, 180, -1, 180, 213, 212, -1, 213, 180, 181, -1, 181, 214, 213, -1, 214, 181, 182, -1, 182, 215, 214, -1, 182, 183, 216, -1, 216, 215, 182, -1, 183, 184, 217, -1, 217, 216, 183, -1, 184, 185, 218, -1, 218, 217, 184, -1, 185, 186, 219, -1, 219, 218, 185, -1, 186, 187, 220, -1, 220, 219, 186, -1, 187, 188, 221, -1, 221, 220, 187, -1, 188, 189, 222, -1, 222, 221, 188, -1, 189, 190, 223, -1, 223, 222, 189, -1, 190, 191, 224, -1, 224, 223, 190, -1, 191, 192, 225, -1, 225, 224, 191, -1, 192, 193, 226, -1, 226, 225, 192, -1, 193, 194, 227, -1, 227, 226, 193, -1, 194, 195, 228, -1, 228, 227, 194, -1, 195, 196, 229, -1, 229, 228, 195, -1, 196, 197, 230, -1, 230, 229, 196, -1, 231, 198, 199, -1, 199, 232, 231, -1, 232, 199, 200, -1, 200, 233, 232, -1, 233, 200, 201, -1, 201, 234, 233, -1, 234, 201, 202, -1, 202, 235, 234, -1, 235, 202, 203, -1, 203, 236, 235, -1, 236, 203, 204, -1, 204, 237, 236, -1, 237, 204, 205, -1, 205, 238, 237, -1, 238, 205, 206, -1, 206, 239, 238, -1, 239, 206, 207, -1, 207, 240, 239, -1, 240, 207, 208, -1, 208, 241, 240, -1, 241, 208, 209, -1, 209, 242, 241, -1, 242, 209, 210, -1, 210, 243, 242, -1, 243, 210, 211, -1, 211, 244, 243, -1, 244, 211, 212, -1, 212, 245, 244, -1, 245, 212, 213, -1, 213, 246, 245, -1, 246, 213, 214, -1, 214, 247, 246, -1, 247, 214, 215, -1, 215, 248, 247, -1, 215, 216, 249, -1, 249, 248, 215, -1, 216, 217, 250, -1, 250, 249, 216, -1, 217, 218, 251, -1, 251, 250, 217, -1, 218, 219, 252, -1, 252, 251, 218, -1, 219, 220, 253, -1, 253, 252, 219, -1, 220, 221, 254, -1, 254, 253, 220, -1, 221, 222, 255, -1, 255, 254, 221, -1, 222, 223, 256, -1, 256, 255, 222, -1, 223, 224, 257, -1, 257, 256, 223, -1, 224, 225, 258, -1, 258, 257, 224, -1, 225, 226, 259, -1, 259, 258, 225, -1, 226, 227, 260, -1, 260, 259, 226, -1, 227, 228, 261, -1, 261, 260, 227, -1, 228, 229, 262, -1, 262, 261, 228, -1, 229, 230, 263, -1, 263, 262, 229, -1, 264, 231, 232, -1, 232, 265, 264, -1, 265, 232, 233, -1, 233, 266, 265, -1, 266, 233, 234, -1, 234, 267, 266, -1, 267, 234, 235, -1, 235, 268, 267, -1, 268, 235, 236, -1, 236, 269, 268, -1, 269, 236, 237, -1, 237, 270, 269, -1, 270, 237, 238, -1, 238, 271, 270, -1, 271, 238, 239, -1, 239, 272, 271, -1, 272, 239, 240, -1, 240, 273, 272, -1, 273, 240, 241, -1, 241, 274, 273, -1, 274, 241, 242, -1, 242, 275, 274, -1, 275, 242, 243, -1, 243, 276, 275, -1, 276, 243, 244, -1, 244, 277, 276, -1, 277, 244, 245, -1, 245, 278, 277, -1, 278, 245, 246, -1, 246, 279, 278, -1, 279, 246, 247, -1, 247, 280, 279, -1, 280, 247, 248, -1, 248, 281, 280, -1, 248, 249, 282, -1, 282, 281, 248, -1, 249, 250, 283, -1, 283, 282, 249, -1, 250, 251, 284, -1, 284, 283, 250, -1, 251, 252, 285, -1, 285, 284, 251, -1, 252, 253, 286, -1, 286, 285, 252, -1, 253, 254, 287, -1, 287, 286, 253, -1, 254, 255, 288, -1, 288, 287, 254, -1, 255, 256, 289, -1, 289, 288, 255, -1, 256, 257, 290, -1, 290, 289, 256, -1, 257, 258, 291, -1, 291, 290, 257, -1, 258, 259, 292, -1, 292, 291, 258, -1, 259, 260, 293, -1, 293, 292, 259, -1, 260, 261, 294, -1, 294, 293, 260, -1, 261, 262, 295, -1, 295, 294, 261, -1, 262, 263, 296, -1, 296, 295, 262, -1, 297, 264, 265, -1, 265, 298, 297, -1, 298, 265, 266, -1, 266, 299, 298, -1, 299, 266, 267, -1, 267, 300, 299, -1, 300, 267, 268, -1, 268, 301, 300, -1, 301, 268, 269, -1, 269, 302, 301, -1, 302, 269, 270, -1, 270, 303, 302, -1, 303, 270, 271, -1, 271, 304, 303, -1, 304, 271, 272, -1, 272, 305, 304, -1, 305, 272, 273, -1, 273, 306, 305, -1, 306, 273, 274, -1, 274, 307, 306, -1, 307, 274, 275, -1, 275, 308, 307, -1, 308, 275, 276, -1, 276, 309, 308, -1, 309, 276, 277, -1, 277, 310, 309, -1, 310, 277, 278, -1, 278, 311, 310, -1, 311, 278, 279, -1, 279, 312, 311, -1, 312, 279, 280, -1, 280, 313, 312, -1, 313, 280, 281, -1, 281, 314, 313, -1, 281, 282, 315, -1, 315, 314, 281, -1, 282, 283, 316, -1, 316, 315, 282, -1, 283, 284, 317, -1, 317, 316, 283, -1, 284, 285, 318, -1, 318, 317, 284, -1, 285, 286, 319, -1, 319, 318, 285, -1, 286, 287, 320, -1, 320, 319, 286, -1, 287, 288, 321, -1, 321, 320, 287, -1, 288, 289, 322, -1, 322, 321, 288, -1, 289, 290, 323, -1, 323, 322, 289, -1, 290, 291, 324, -1, 324, 323, 290, -1, 291, 292, 325, -1, 325, 324, 291, -1, 292, 293, 326, -1, 326, 325, 292, -1, 293, 294, 327, -1, 327, 326, 293, -1, 294, 295, 328, -1, 328, 327, 294, -1, 295, 296, 329, -1, 329, 328, 295, -1, 330, 297, 298, -1, 298, 331, 330, -1, 331, 298, 299, -1, 299, 332, 331, -1, 332, 299, 300, -1, 300, 333, 332, -1, 333, 300, 301, -1, 301, 334, 333, -1, 334, 301, 302, -1, 302, 335, 334, -1, 335, 302, 303, -1, 303, 336, 335, -1, 336, 303, 304, -1, 304, 337, 336, -1, 337, 304, 305, -1, 305, 338, 337, -1, 338, 305, 306, -1, 306, 339, 338, -1, 339, 306, 307, -1, 307, 340, 339, -1, 340, 307, 308, -1, 308, 341, 340, -1, 341, 308, 309, -1, 309, 342, 341, -1, 342, 309, 310, -1, 310, 343, 342, -1, 343, 310, 311, -1, 311, 344, 343, -1, 344, 311, 312, -1, 312, 345, 344, -1, 345, 312, 313, -1, 313, 346, 345, -1, 346, 313, 314, -1, 314, 347, 346, -1, 314, 315, 348, -1, 348, 347, 314, -1, 315, 316, 349, -1, 349, 348, 315, -1, 316, 317, 350, -1, 350, 349, 316, -1, 317, 318, 351, -1, 351, 350, 317, -1, 318, 319, 352, -1, 352, 351, 318, -1, 319, 320, 353, -1, 353, 352, 319, -1, 320, 321, 354, -1, 354, 353, 320, -1, 321, 322, 355, -1, 355, 354, 321, -1, 322, 323, 356, -1, 356, 355, 322, -1, 323, 324, 357, -1, 357, 356, 323, -1, 324, 325, 358, -1, 358, 357, 324, -1, 325, 326, 359, -1, 359, 358, 325, -1, 326, 327, 360, -1, 360, 359, 326, -1, 327, 328, 361, -1, 361, 360, 327, -1, 328, 329, 362, -1, 362, 361, 328, -1, 363, 330, 331, -1, 331, 364, 363, -1, 364, 331, 332, -1, 332, 365, 364, -1, 365, 332, 333, -1, 333, 366, 365, -1, 366, 333, 334, -1, 334, 367, 366, -1, 367, 334, 335, -1, 335, 368, 367, -1, 368, 335, 336, -1, 336, 369, 368, -1, 369, 336, 337, -1, 337, 370, 369, -1, 370, 337, 338, -1, 338, 371, 370, -1, 371, 338, 339, -1, 339, 372, 371, -1, 372, 339, 340, -1, 340, 373, 372, -1, 373, 340, 341, -1, 341, 374, 373, -1, 374, 341, 342, -1, 342, 375, 374, -1, 375, 342, 343, -1, 343, 376, 375, -1, 376, 343, 344, -1, 344, 377, 376, -1, 377, 344, 345, -1, 345, 378, 377, -1, 378, 345, 346, -1, 346, 379, 378, -1, 379, 346, 347, -1, 347, 380, 379, -1, 347, 348, 381, -1, 381, 380, 347, -1, 348, 349, 382, -1, 382, 381, 348, -1, 349, 350, 383, -1, 383, 382, 349, -1, 350, 351, 384, -1, 384, 383, 350, -1, 351, 352, 385, -1, 385, 384, 351, -1, 352, 353, 386, -1, 386, 385, 352, -1, 353, 354, 387, -1, 387, 386, 353, -1, 354, 355, 388, -1, 388, 387, 354, -1, 355, 356, 389, -1, 389, 388, 355, -1, 356, 357, 390, -1, 390, 389, 356, -1, 357, 358, 391, -1, 391, 390, 357, -1, 358, 359, 392, -1, 392, 391, 358, -1, 359, 360, 393, -1, 393, 392, 359, -1, 360, 361, 394, -1, 394, 393, 360, -1, 361, 362, 395, -1, 395, 394, 361, -1, 396, 363, 364, -1, 364, 397, 396, -1, 397, 364, 365, -1, 365, 398, 397, -1, 398, 365, 366, -1, 366, 399, 398, -1, 399, 366, 367, -1, 367, 400, 399, -1, 400, 367, 368, -1, 368, 401, 400, -1, 401, 368, 369, -1, 369, 402, 401, -1, 402, 369, 370, -1, 370, 403, 402, -1, 403, 370, 371, -1, 371, 404, 403, -1, 404, 371, 372, -1, 372, 405, 404, -1, 405, 372, 373, -1, 373, 406, 405, -1, 406, 373, 374, -1, 374, 407, 406, -1, 407, 374, 375, -1, 375, 408, 407, -1, 408, 375, 376, -1, 376, 409, 408, -1, 409, 376, 377, -1, 377, 410, 409, -1, 410, 377, 378, -1, 378, 411, 410, -1, 411, 378, 379, -1, 379, 412, 411, -1, 412, 379, 380, -1, 380, 413, 412, -1, 380, 381, 414, -1, 414, 413, 380, -1, 381, 382, 415, -1, 415, 414, 381, -1, 382, 383, 416, -1, 416, 415, 382, -1, 383, 384, 417, -1, 417, 416, 383, -1, 384, 385, 418, -1, 418, 417, 384, -1, 385, 386, 419, -1, 419, 418, 385, -1, 386, 387, 420, -1, 420, 419, 386, -1, 387, 388, 421, -1, 421, 420, 387, -1, 388, 389, 422, -1, 422, 421, 388, -1, 389, 390, 423, -1, 423, 422, 389, -1, 390, 391, 424, -1, 424, 423, 390, -1, 391, 392, 425, -1, 425, 424, 391, -1, 392, 393, 426, -1, 426, 425, 392, -1, 393, 394, 427, -1, 427, 426, 393, -1, 394, 395, 428, -1, 428, 427, 394, -1, 429, 396, 397, -1, 397, 430, 429, -1, 430, 397, 398, -1, 398, 431, 430, -1, 431, 398, 399, -1, 399, 432, 431, -1, 432, 399, 400, -1, 400, 433, 432, -1, 433, 400, 401, -1, 401, 434, 433, -1, 434, 401, 402, -1, 402, 435, 434, -1, 435, 402, 403, -1, 403, 436, 435, -1, 436, 403, 404, -1, 404, 437, 436, -1, 437, 404, 405, -1, 405, 438, 437, -1, 438, 405, 406, -1, 406, 439, 438, -1, 439, 406, 407, -1, 407, 440, 439, -1, 440, 407, 408, -1, 408, 441, 440, -1, 441, 408, 409, -1, 409, 442, 441, -1, 442, 409, 410, -1, 410, 443, 442, -1, 443, 410, 411, -1, 411, 444, 443, -1, 444, 411, 412, -1, 412, 445, 444, -1, 445, 412, 413, -1, 413, 446, 445, -1, 413, 414, 447, -1, 447, 446, 413, -1, 414, 415, 448, -1, 448, 447, 414, -1, 415, 416, 449, -1, 449, 448, 415, -1, 416, 417, 450, -1, 450, 449, 416, -1, 417, 418, 451, -1, 451, 450, 417, -1, 418, 419, 452, -1, 452, 451, 418, -1, 419, 420, 453, -1, 453, 452, 419, -1, 420, 421, 454, -1, 454, 453, 420, -1, 421, 422, 455, -1, 455, 454, 421, -1, 422, 423, 456, -1, 456, 455, 422, -1, 423, 424, 457, -1, 457, 456, 423, -1, 424, 425, 458, -1, 458, 457, 424, -1, 425, 426, 459, -1, 459, 458, 425, -1, 426, 427, 460, -1, 460, 459, 426, -1, 427, 428, 461, -1, 461, 460, 427, -1, 462, 429, 430, -1, 430, 463, 462, -1, 463, 430, 431, -1, 431, 464, 463, -1, 464, 431, 432, -1, 432, 465, 464, -1, 465, 432, 433, -1, 433, 466, 465, -1, 466, 433, 434, -1, 434, 467, 466, -1, 467, 434, 435, -1, 435, 468, 467, -1, 468, 435, 436, -1, 436, 469, 468, -1, 469, 436, 437, -1, 437, 470, 469, -1, 470, 437, 438, -1, 438, 471, 470, -1, 471, 438, 439, -1, 439, 472, 471, -1, 472, 439, 440, -1, 440, 473, 472, -1, 473, 440, 441, -1, 441, 474, 473, -1, 474, 441, 442, -1, 442, 475, 474, -1, 475, 442, 443, -1, 443, 476, 475, -1, 476, 443, 444, -1, 444, 477, 476, -1, 477, 444, 445, -1, 445, 478, 477, -1, 478, 445, 446, -1, 446, 479, 478, -1, 446, 447, 480, -1, 480, 479, 446, -1, 447, 448, 481, -1, 481, 480, 447, -1, 448, 449, 482, -1, 482, 481, 448, -1, 449, 450, 483, -1, 483, 482, 449, -1, 450, 451, 484, -1, 484, 483, 450, -1, 451, 452, 485, -1, 485, 484, 451, -1, 452, 453, 486, -1, 486, 485, 452, -1, 453, 454, 487, -1, 487, 486, 453, -1, 454, 455, 488, -1, 488, 487, 454, -1, 455, 456, 489, -1, 489, 488, 455, -1, 456, 457, 490, -1, 490, 489, 456, -1, 457, 458, 491, -1, 491, 490, 457, -1, 458, 459, 492, -1, 492, 491, 458, -1, 459, 460, 493, -1, 493, 492, 459, -1, 460, 461, 494, -1, 494, 493, 460, -1, 495, 462, 463, -1, 463, 496, 495, -1, 496, 463, 464, -1, 464, 497, 496, -1, 497, 464, 465, -1, 465, 498, 497, -1, 498, 465, 466, -1, 466, 499, 498, -1, 499, 466, 467, -1, 467, 500, 499, -1, 500, 467, 468, -1, 468, 501, 500, -1, 501, 468, 469, -1, 469, 502, 501, -1, 502, 469, 470, -1, 470, 503, 502, -1, 503, 470, 471, -1, 471, 504, 503, -1, 504, 471, 472, -1, 472, 505, 504, -1, 505, 472, 473, -1, 473, 506, 505, -1, 506, 473, 474, -1, 474, 507, 506, -1, 507, 474, 475, -1, 475, 508, 507, -1, 508, 475, 476, -1, 476, 509, 508, -1, 509, 476, 477, -1, 477, 510, 509, -1, 510, 477, 478, -1, 478, 511, 510, -1, 511, 478, 479, -1, 479, 512, 511, -1, 479, 480, 513, -1, 513, 512, 479, -1, 480, 481, 514, -1, 514, 513, 480, -1, 481, 482, 515, -1, 515, 514, 481, -1, 482, 483, 516, -1, 516, 515, 482, -1, 483, 484, 517, -1, 517, 516, 483, -1, 484, 485, 518, -1, 518, 517, 484, -1, 485, 486, 519, -1, 519, 518, 485, -1, 486, 487, 520, -1, 520, 519, 486, -1, 487, 488, 521, -1, 521, 520, 487, -1, 488, 489, 522, -1, 522, 521, 488, -1, 489, 490, 523, -1, 523, 522, 489, -1, 490, 491, 524, -1, 524, 523, 490, -1, 491, 492, 525, -1, 525, 524, 491, -1, 492, 493, 526, -1, 526, 525, 492, -1, 493, 494, 527, -1, 527, 526, 493, -1, 528, 495, 496, -1, 496, 529, 528, -1, 529, 496, 497, -1, 497, 530, 529, -1, 530, 497, 498, -1, 498, 531, 530, -1, 531, 498, 499, -1, 499, 532, 531, -1, 532, 499, 500, -1, 500, 533, 532, -1, 533, 500, 501, -1, 501, 534, 533, -1, 534, 501, 502, -1, 502, 535, 534, -1, 535, 502, 503, -1, 503, 536, 535, -1, 536, 503, 504, -1, 504, 537, 536, -1, 537, 504, 505, -1, 505, 538, 537, -1, 538, 505, 506, -1, 506, 539, 538, -1, 539, 506, 507, -1, 507, 540, 539, -1, 540, 507, 508, -1, 508, 541, 540, -1, 541, 508, 509, -1, 509, 542, 541, -1, 542, 509, 510, -1, 510, 543, 542, -1, 543, 510, 511, -1, 511, 544, 543, -1, 544, 511, 512, -1, 512, 545, 544, -1, 512, 513, 546, -1, 546, 545, 512, -1, 513, 514, 547, -1, 547, 546, 513, -1, 514, 515, 548, -1, 548, 547, 514, -1, 515, 516, 549, -1, 549, 548, 515, -1, 516, 517, 550, -1, 550, 549, 516, -1, 517, 518, 551, -1, 551, 550, 517, -1, 518, 519, 552, -1, 552, 551, 518, -1, 519, 520, 553, -1, 553, 552, 519, -1, 520, 521, 554, -1, 554, 553, 520, -1, 521, 522, 555, -1, 555, 554, 521, -1, 522, 523, 556, -1, 556, 555, 522, -1, 523, 524, 557, -1, 557, 556, 523, -1, 524, 525, 558, -1, 558, 557, 524, -1, 525, 526, 559, -1, 559, 558, 525, -1, 526, 527, 560, -1, 560, 559, 526, -1, 561, 528, 529, -1, 529, 562, 561, -1, 562, 529, 530, -1, 530, 563, 562, -1, 563, 530, 531, -1, 531, 564, 563, -1, 564, 531, 532, -1, 532, 565, 564, -1, 565, 532, 533, -1, 533, 566, 565, -1, 566, 533, 534, -1, 534, 567, 566, -1, 567, 534, 535, -1, 535, 568, 567, -1, 568, 535, 536, -1, 536, 569, 568, -1, 569, 536, 537, -1, 537, 570, 569, -1, 570, 537, 538, -1, 538, 571, 570, -1, 571, 538, 539, -1, 539, 572, 571, -1, 572, 539, 540, -1, 540, 573, 572, -1, 573, 540, 541, -1, 541, 574, 573, -1, 574, 541, 542, -1, 542, 575, 574, -1, 575, 542, 543, -1, 543, 576, 575, -1, 576, 543, 544, -1, 544, 577, 576, -1, 577, 544, 545, -1, 545, 578, 577, -1, 545, 546, 579, -1, 579, 578, 545, -1, 546, 547, 580, -1, 580, 579, 546, -1, 547, 548, 581, -1, 581, 580, 547, -1, 548, 549, 582, -1, 582, 581, 548, -1, 549, 550, 583, -1, 583, 582, 549, -1, 550, 551, 584, -1, 584, 583, 550, -1, 551, 552, 585, -1, 585, 584, 551, -1, 552, 553, 586, -1, 586, 585, 552, -1, 553, 554, 587, -1, 587, 586, 553, -1, 554, 555, 588, -1, 588, 587, 554, -1, 555, 556, 589, -1, 589, 588, 555, -1, 556, 557, 590, -1, 590, 589, 556, -1, 557, 558, 591, -1, 591, 590, 557, -1, 558, 559, 592, -1, 592, 591, 558, -1, 559, 560, 593, -1, 593, 592, 559, -1, 594, 561, 562, -1, 562, 595, 594, -1, 595, 562, 563, -1, 563, 596, 595, -1, 596, 563, 564, -1, 564, 597, 596, -1, 597, 564, 565, -1, 565, 598, 597, -1, 598, 565, 566, -1, 566, 599, 598, -1, 599, 566, 567, -1, 567, 600, 599, -1, 600, 567, 568, -1, 568, 601, 600, -1, 601, 568, 569, -1, 569, 602, 601, -1, 602, 569, 570, -1, 570, 603, 602, -1, 603, 570, 571, -1, 571, 604, 603, -1, 604, 571, 572, -1, 572, 605, 604, -1, 605, 572, 573, -1, 573, 606, 605, -1, 606, 573, 574, -1, 574, 607, 606, -1, 607, 574, 575, -1, 575, 608, 607, -1, 608, 575, 576, -1, 576, 609, 608, -1, 609, 576, 577, -1, 577, 610, 609, -1, 610, 577, 578, -1, 578, 611, 610, -1, 578, 579, 612, -1, 612, 611, 578, -1, 579, 580, 613, -1, 613, 612, 579, -1, 580, 581, 614, -1, 614, 613, 580, -1, 581, 582, 615, -1, 615, 614, 581, -1, 582, 583, 616, -1, 616, 615, 582, -1, 583, 584, 617, -1, 617, 616, 583, -1, 584, 585, 618, -1, 618, 617, 584, -1, 585, 586, 619, -1, 619, 618, 585, -1, 586, 587, 620, -1, 620, 619, 586, -1, 587, 588, 621, -1, 621, 620, 587, -1, 588, 589, 622, -1, 622, 621, 588, -1, 589, 590, 623, -1, 623, 622, 589, -1, 590, 591, 624, -1, 624, 623, 590, -1, 591, 592, 625, -1, 625, 624, 591, -1, 592, 593, 626, -1, 626, 625, 592, -1, 627, 594, 595, -1, 595, 628, 627, -1, 628, 595, 596, -1, 596, 629, 628, -1, 629, 596, 597, -1, 597, 630, 629, -1, 630, 597, 598, -1, 598, 631, 630, -1, 631, 598, 599, -1, 599, 632, 631, -1, 632, 599, 600, -1, 600, 633, 632, -1, 633, 600, 601, -1, 601, 634, 633, -1, 634, 601, 602, -1, 602, 635, 634, -1, 635, 602, 603, -1, 603, 636, 635, -1, 636, 603, 604, -1, 604, 637, 636, -1, 637, 604, 605, -1, 605, 638, 637, -1, 638, 605, 606, -1, 606, 639, 638, -1, 639, 606, 607, -1, 607, 640, 639, -1, 640, 607, 608, -1, 608, 641, 640, -1, 641, 608, 609, -1, 609, 642, 641, -1, 642, 609, 610, -1, 610, 643, 642, -1, 643, 610, 611, -1, 611, 644, 643, -1, 611, 612, 645, -1, 645, 644, 611, -1, 612, 613, 646, -1, 646, 645, 612, -1, 613, 614, 647, -1, 647, 646, 613, -1, 614, 615, 648, -1, 648, 647, 614, -1, 615, 616, 649, -1, 649, 648, 615, -1, 616, 617, 650, -1, 650, 649, 616, -1, 617, 618, 651, -1, 651, 650, 617, -1, 618, 619, 652, -1, 652, 651, 618, -1, 619, 620, 653, -1, 653, 652, 619, -1, 620, 621, 654, -1, 654, 653, 620, -1, 621, 622, 655, -1, 655, 654, 621, -1, 622, 623, 656, -1, 656, 655, 622, -1, 623, 624, 657, -1, 657, 656, 623, -1, 624, 625, 658, -1, 658, 657, 624, -1, 625, 626, 659, -1, 659, 658, 625, -1, 660, 627, 628, -1, 628, 661, 660, -1, 661, 628, 629, -1, 629, 662, 661, -1, 662, 629, 630, -1, 630, 663, 662, -1, 663, 630, 631, -1, 631, 664, 663, -1, 664, 631, 632, -1, 632, 665, 664, -1, 665, 632, 633, -1, 633, 666, 665, -1, 666, 633, 634, -1, 634, 667, 666, -1, 667, 634, 635, -1, 635, 668, 667, -1, 668, 635, 636, -1, 636, 669, 668, -1, 669, 636, 637, -1, 637, 670, 669, -1, 670, 637, 638, -1, 638, 671, 670, -1, 671, 638, 639, -1, 639, 672, 671, -1, 672, 639, 640, -1, 640, 673, 672, -1, 673, 640, 641, -1, 641, 674, 673, -1, 674, 641, 642, -1, 642, 675, 674, -1, 675, 642, 643, -1, 643, 676, 675, -1, 676, 643, 644, -1, 644, 677, 676, -1, 644, 645, 678, -1, 678, 677, 644, -1, 645, 646, 679, -1, 679, 678, 645, -1, 646, 647, 680, -1, 680, 679, 646, -1, 647, 648, 681, -1, 681, 680, 647, -1, 648, 649, 682, -1, 682, 681, 648, -1, 649, 650, 683, -1, 683, 682, 649, -1, 650, 651, 684, -1, 684, 683, 650, -1, 651, 652, 685, -1, 685, 684, 651, -1, 652, 653, 686, -1, 686, 685, 652, -1, 653, 654, 687, -1, 687, 686, 653, -1, 654, 655, 688, -1, 688, 687, 654, -1, 655, 656, 689, -1, 689, 688, 655, -1, 656, 657, 690, -1, 690, 689, 656, -1, 657, 658, 691, -1, 691, 690, 657, -1, 658, 659, 692, -1, 692, 691, 658, -1, 693, 660, 661, -1, 661, 694, 693, -1, 694, 661, 662, -1, 662, 695, 694, -1, 695, 662, 663, -1, 663, 696, 695, -1, 696, 663, 664, -1, 664, 697, 696, -1, 697, 664, 665, -1, 665, 698, 697, -1, 698, 665, 666, -1, 666, 699, 698, -1, 699, 666, 667, -1, 667, 700, 699, -1, 700, 667, 668, -1, 668, 701, 700, -1, 701, 668, 669, -1, 669, 702, 701, -1, 702, 669, 670, -1, 670, 703, 702, -1, 703, 670, 671, -1, 671, 704, 703, -1, 704, 671, 672, -1, 672, 705, 704, -1, 705, 672, 673, -1, 673, 706, 705, -1, 706, 673, 674, -1, 674, 707, 706, -1, 707, 674, 675, -1, 675, 708, 707, -1, 708, 675, 676, -1, 676, 709, 708, -1, 709, 676, 677, -1, 677, 710, 709, -1, 677, 678, 711, -1, 711, 710, 677, -1, 678, 679, 712, -1, 712, 711, 678, -1, 679, 680, 713, -1, 713, 712, 679, -1, 680, 681, 714, -1, 714, 713, 680, -1, 681, 682, 715, -1, 715, 714, 681, -1, 682, 683, 716, -1, 716, 715, 682, -1, 683, 684, 717, -1, 717, 716, 683, -1, 684, 685, 718, -1, 718, 717, 684, -1, 685, 686, 719, -1, 719, 718, 685, -1, 686, 687, 720, -1, 720, 719, 686, -1, 687, 688, 721, -1, 721, 720, 687, -1, 688, 689, 722, -1, 722, 721, 688, -1, 689, 690, 723, -1, 723, 722, 689, -1, 690, 691, 724, -1, 724, 723, 690, -1, 691, 692, 725, -1, 725, 724, 691, -1, 726, 693, 694, -1, 694, 727, 726, -1, 727, 694, 695, -1, 695, 728, 727, -1, 728, 695, 696, -1, 696, 729, 728, -1, 729, 696, 697, -1, 697, 730, 729, -1, 730, 697, 698, -1, 698, 731, 730, -1, 731, 698, 699, -1, 699, 732, 731, -1, 732, 699, 700, -1, 700, 733, 732, -1, 733, 700, 701, -1, 701, 734, 733, -1, 734, 701, 702, -1, 702, 735, 734, -1, 735, 702, 703, -1, 703, 736, 735, -1, 736, 703, 704, -1, 704, 737, 736, -1, 737, 704, 705, -1, 705, 738, 737, -1, 738, 705, 706, -1, 706, 739, 738, -1, 739, 706, 707, -1, 707, 740, 739, -1, 740, 707, 708, -1, 708, 741, 740, -1, 741, 708, 709, -1, 709, 742, 741, -1, 742, 709, 710, -1, 710, 743, 742, -1, 710, 711, 744, -1, 744, 743, 710, -1, 711, 712, 745, -1, 745, 744, 711, -1, 712, 713, 746, -1, 746, 745, 712, -1, 713, 714, 747, -1, 747, 746, 713, -1, 714, 715, 748, -1, 748, 747, 714, -1, 715, 716, 749, -1, 749, 748, 715, -1, 716, 717, 750, -1, 750, 749, 716, -1, 717, 718, 751, -1, 751, 750, 717, -1, 718, 719, 752, -1, 752, 751, 718, -1, 719, 720, 753, -1, 753, 752, 719, -1, 720, 721, 754, -1, 754, 753, 720, -1, 721, 722, 755, -1, 755, 754, 721, -1, 722, 723, 756, -1, 756, 755, 722, -1, 723, 724, 757, -1, 757, 756, 723, -1, 724, 725, 758, -1, 758, 757, 724, -1, 759, 726, 727, -1, 727, 760, 759, -1, 760, 727, 728, -1, 728, 761, 760, -1, 761, 728, 729, -1, 729, 762, 761, -1, 762, 729, 730, -1, 730, 763, 762, -1, 763, 730, 731, -1, 731, 764, 763, -1, 764, 731, 732, -1, 732, 765, 764, -1, 765, 732, 733, -1, 733, 766, 765, -1, 766, 733, 734, -1, 734, 767, 766, -1, 767, 734, 735, -1, 735, 768, 767, -1, 768, 735, 736, -1, 736, 769, 768, -1, 769, 736, 737, -1, 737, 770, 769, -1, 770, 737, 738, -1, 738, 771, 770, -1, 771, 738, 739, -1, 739, 772, 771, -1, 772, 739, 740, -1, 740, 773, 772, -1, 773, 740, 741, -1, 741, 774, 773, -1, 774, 741, 742, -1, 742, 775, 774, -1, 775, 742, 743, -1, 743, 776, 775, -1, 743, 744, 777, -1, 777, 776, 743, -1, 744, 745, 778, -1, 778, 777, 744, -1, 745, 746, 779, -1, 779, 778, 745, -1, 746, 747, 780, -1, 780, 779, 746, -1, 747, 748, 781, -1, 781, 780, 747, -1, 748, 749, 782, -1, 782, 781, 748, -1, 749, 750, 783, -1, 783, 782, 749, -1, 750, 751, 784, -1, 784, 783, 750, -1, 751, 752, 785, -1, 785, 784, 751, -1, 752, 753, 786, -1, 786, 785, 752, -1, 753, 754, 787, -1, 787, 786, 753, -1, 754, 755, 788, -1, 788, 787, 754, -1, 755, 756, 789, -1, 789, 788, 755, -1, 756, 757, 790, -1, 790, 789, 756, -1, 757, 758, 791, -1, 791, 790, 757, -1, 792, 759, 760, -1, 760, 793, 792, -1, 793, 760, 761, -1, 761, 794, 793, -1, 794, 761, 762, -1, 762, 795, 794, -1, 795, 762, 763, -1, 763, 796, 795, -1, 796, 763, 764, -1, 764, 797, 796, -1, 797, 764, 765, -1, 765, 798, 797, -1, 798, 765, 766, -1, 766, 799, 798, -1, 799, 766, 767, -1, 767, 800, 799, -1, 800, 767, 768, -1, 768, 801, 800, -1, 801, 768, 769, -1, 769, 802, 801, -1, 802, 769, 770, -1, 770, 803, 802, -1, 803, 770, 771, -1, 771, 804, 803, -1, 804, 771, 772, -1, 772, 805, 804, -1, 805, 772, 773, -1, 773, 806, 805, -1, 806, 773, 774, -1, 774, 807, 806, -1, 807, 774, 775, -1, 775, 808, 807, -1, 808, 775, 776, -1, 776, 809, 808, -1, 776, 777, 810, -1, 810, 809, 776, -1, 777, 778, 811, -1, 811, 810, 777, -1, 778, 779, 812, -1, 812, 811, 778, -1, 779, 780, 813, -1, 813, 812, 779, -1, 780, 781, 814, -1, 814, 813, 780, -1, 781, 782, 815, -1, 815, 814, 781, -1, 782, 783, 816, -1, 816, 815, 782, -1, 783, 784, 817, -1, 817, 816, 783, -1, 784, 785, 818, -1, 818, 817, 784, -1, 785, 786, 819, -1, 819, 818, 785, -1, 786, 787, 820, -1, 820, 819, 786, -1, 787, 788, 821, -1, 821, 820, 787, -1, 788, 789, 822, -1, 822, 821, 788, -1, 789, 790, 823, -1, 823, 822, 789, -1, 790, 791, 824, -1, 824, 823, 790, -1, 825, 792, 793, -1, 793, 826, 825, -1, 826, 793, 794, -1, 794, 827, 826, -1, 827, 794, 795, -1, 795, 828, 827, -1, 828, 795, 796, -1, 796, 829, 828, -1, 829, 796, 797, -1, 797, 830, 829, -1, 830, 797, 798, -1, 798, 831, 830, -1, 831, 798, 799, -1, 799, 832, 831, -1, 832, 799, 800, -1, 800, 833, 832, -1, 833, 800, 801, -1, 801, 834, 833, -1, 834, 801, 802, -1, 802, 835, 834, -1, 835, 802, 803, -1, 803, 836, 835, -1, 836, 803, 804, -1, 804, 837, 836, -1, 837, 804, 805, -1, 805, 838, 837, -1, 838, 805, 806, -1, 806, 839, 838, -1, 839, 806, 807, -1, 807, 840, 839, -1, 840, 807, 808, -1, 808, 841, 840, -1, 841, 808, 809, -1, 809, 842, 841, -1, 809, 810, 843, -1, 843, 842, 809, -1, 810, 811, 844, -1, 844, 843, 810, -1, 811, 812, 845, -1, 845, 844, 811, -1, 812, 813, 846, -1, 846, 845, 812, -1, 813, 814, 847, -1, 847, 846, 813, -1, 814, 815, 848, -1, 848, 847, 814, -1, 815, 816, 849, -1, 849, 848, 815, -1, 816, 817, 850, -1, 850, 849, 816, -1, 817, 818, 851, -1, 851, 850, 817, -1, 818, 819, 852, -1, 852, 851, 818, -1, 819, 820, 853, -1, 853, 852, 819, -1, 820, 821, 854, -1, 854, 853, 820, -1, 821, 822, 855, -1, 855, 854, 821, -1, 822, 823, 856, -1, 856, 855, 822, -1, 823, 824, 857, -1, 857, 856, 823, -1, 858, 825, 826, -1, 826, 859, 858, -1, 859, 826, 827, -1, 827, 860, 859, -1, 860, 827, 828, -1, 828, 861, 860, -1, 861, 828, 829, -1, 829, 862, 861, -1, 862, 829, 830, -1, 830, 863, 862, -1, 863, 830, 831, -1, 831, 864, 863, -1, 864, 831, 832, -1, 832, 865, 864, -1, 865, 832, 833, -1, 833, 866, 865, -1, 866, 833, 834, -1, 834, 867, 866, -1, 867, 834, 835, -1, 835, 868, 867, -1, 868, 835, 836, -1, 836, 869, 868, -1, 869, 836, 837, -1, 837, 870, 869, -1, 870, 837, 838, -1, 838, 871, 870, -1, 871, 838, 839, -1, 839, 872, 871, -1, 872, 839, 840, -1, 840, 873, 872, -1, 873, 840, 841, -1, 841, 874, 873, -1, 874, 841, 842, -1, 842, 875, 874, -1, 842, 843, 876, -1, 876, 875, 842, -1, 843, 844, 877, -1, 877, 876, 843, -1, 844, 845, 878, -1, 878, 877, 844, -1, 845, 846, 879, -1, 879, 878, 845, -1, 846, 847, 880, -1, 880, 879, 846, -1, 847, 848, 881, -1, 881, 880, 847, -1, 848, 849, 882, -1, 882, 881, 848, -1, 849, 850, 883, -1, 883, 882, 849, -1, 850, 851, 884, -1, 884, 883, 850, -1, 851, 852, 885, -1, 885, 884, 851, -1, 852, 853, 886, -1, 886, 885, 852, -1, 853, 854, 887, -1, 887, 886, 853, -1, 854, 855, 888, -1, 888, 887, 854, -1, 855, 856, 889, -1, 889, 888, 855, -1, 856, 857, 890, -1, 890, 889, 856, -1, 891, 858, 859, -1, 859, 892, 891, -1, 892, 859, 860, -1, 860, 893, 892, -1, 893, 860, 861, -1, 861, 894, 893, -1, 894, 861, 862, -1, 862, 895, 894, -1, 895, 862, 863, -1, 863, 896, 895, -1, 896, 863, 864, -1, 864, 897, 896, -1, 897, 864, 865, -1, 865, 898, 897, -1, 898, 865, 866, -1, 866, 899, 898, -1, 899, 866, 867, -1, 867, 900, 899, -1, 900, 867, 868, -1, 868, 901, 900, -1, 901, 868, 869, -1, 869, 902, 901, -1, 902, 869, 870, -1, 870, 903, 902, -1, 903, 870, 871, -1, 871, 904, 903, -1, 904, 871, 872, -1, 872, 905, 904, -1, 905, 872, 873, -1, 873, 906, 905, -1, 906, 873, 874, -1, 874, 907, 906, -1, 907, 874, 875, -1, 875, 908, 907, -1, 875, 876, 909, -1, 909, 908, 875, -1, 876, 877, 910, -1, 910, 909, 876, -1, 877, 878, 911, -1, 911, 910, 877, -1, 878, 879, 912, -1, 912, 911, 878, -1, 879, 880, 913, -1, 913, 912, 879, -1, 880, 881, 914, -1, 914, 913, 880, -1, 881, 882, 915, -1, 915, 914, 881, -1, 882, 883, 916, -1, 916, 915, 882, -1, 883, 884, 917, -1, 917, 916, 883, -1, 884, 885, 918, -1, 918, 917, 884, -1, 885, 886, 919, -1, 919, 918, 885, -1, 886, 887, 920, -1, 920, 919, 886, -1, 887, 888, 921, -1, 921, 920, 887, -1, 888, 889, 922, -1, 922, 921, 888, -1, 889, 890, 923, -1, 923, 922, 889, -1, 924, 891, 892, -1, 892, 925, 924, -1, 925, 892, 893, -1, 893, 926, 925, -1, 926, 893, 894, -1, 894, 927, 926, -1, 927, 894, 895, -1, 895, 928, 927, -1, 928, 895, 896, -1, 896, 929, 928, -1, 929, 896, 897, -1, 897, 930, 929, -1, 930, 897, 898, -1, 898, 931, 930, -1, 931, 898, 899, -1, 899, 932, 931, -1, 932, 899, 900, -1, 900, 933, 932, -1, 933, 900, 901, -1, 901, 934, 933, -1, 934, 901, 902, -1, 902, 935, 934, -1, 935, 902, 903, -1, 903, 936, 935, -1, 936, 903, 904, -1, 904, 937, 936, -1, 937, 904, 905, -1, 905, 938, 937, -1, 938, 905, 906, -1, 906, 939, 938, -1, 939, 906, 907, -1, 907, 940, 939, -1, 940, 907, 908, -1, 908, 941, 940, -1, 908, 909, 942, -1, 942, 941, 908, -1, 909, 910, 943, -1, 943, 942, 909, -1, 910, 911, 944, -1, 944, 943, 910, -1, 911, 912, 945, -1, 945, 944, 911, -1, 912, 913, 946, -1, 946, 945, 912, -1, 913, 914, 947, -1, 947, 946, 913, -1, 914, 915, 948, -1, 948, 947, 914, -1, 915, 916, 949, -1, 949, 948, 915, -1, 916, 917, 950, -1, 950, 949, 916, -1, 917, 918, 951, -1, 951, 950, 917, -1, 918, 919, 952, -1, 952, 951, 918, -1, 919, 920, 953, -1, 953, 952, 919, -1, 920, 921, 954, -1, 954, 953, 920, -1, 921, 922, 955, -1, 955, 954, 921, -1, 922, 923, 956, -1, 956, 955, 922, -1, 957, 924, 925, -1, 925, 958, 957, -1, 958, 925, 926, -1, 926, 959, 958, -1, 959, 926, 927, -1, 927, 960, 959, -1, 960, 927, 928, -1, 928, 961, 960, -1, 961, 928, 929, -1, 929, 962, 961, -1, 962, 929, 930, -1, 930, 963, 962, -1, 963, 930, 931, -1, 931, 964, 963, -1, 964, 931, 932, -1, 932, 965, 964, -1, 965, 932, 933, -1, 933, 966, 965, -1, 966, 933, 934, -1, 934, 967, 966, -1, 967, 934, 935, -1, 935, 968, 967, -1, 968, 935, 936, -1, 936, 969, 968, -1, 969, 936, 937, -1, 937, 970, 969, -1, 970, 937, 938, -1, 938, 971, 970, -1, 971, 938, 939, -1, 939, 972, 971, -1, 972, 939, 940, -1, 940, 973, 972, -1, 973, 940, 941, -1, 941, 974, 973, -1, 941, 942, 975, -1, 975, 974, 941, -1, 942, 943, 976, -1, 976, 975, 942, -1, 943, 944, 977, -1, 977, 976, 943, -1, 944, 945, 978, -1, 978, 977, 944, -1, 945, 946, 979, -1, 979, 978, 945, -1, 946, 947, 980, -1, 980, 979, 946, -1, 947, 948, 981, -1, 981, 980, 947, -1, 948, 949, 982, -1, 982, 981, 948, -1, 949, 950, 983, -1, 983, 982, 949, -1, 950, 951, 984, -1, 984, 983, 950, -1, 951, 952, 985, -1, 985, 984, 951, -1, 952, 953, 986, -1, 986, 985, 952, -1, 953, 954, 987, -1, 987, 986, 953, -1, 954, 955, 988, -1, 988, 987, 954, -1, 955, 956, 989, -1, 989, 988, 955, -1, 990, 957, 958, -1, 958, 991, 990, -1, 991, 958, 959, -1, 959, 992, 991, -1, 992, 959, 960, -1, 960, 993, 992, -1, 993, 960, 961, -1, 961, 994, 993, -1, 994, 961, 962, -1, 962, 995, 994, -1, 995, 962, 963, -1, 963, 996, 995, -1, 996, 963, 964, -1, 964, 997, 996, -1, 997, 964, 965, -1, 965, 998, 997, -1, 998, 965, 966, -1, 966, 999, 998, -1, 999, 966, 967, -1, 967, 1000, 999, -1, 1000, 967, 968, -1, 968, 1001, 1000, -1, 1001, 968, 969, -1, 969, 1002, 1001, -1, 1002, 969, 970, -1, 970, 1003, 1002, -1, 1003, 970, 971, -1, 971, 1004, 1003, -1, 1004, 971, 972, -1, 972, 1005, 1004, -1, 1005, 972, 973, -1, 973, 1006, 1005, -1, 1006, 973, 974, -1, 974, 1007, 1006, -1, 974, 975, 1008, -1, 1008, 1007, 974, -1, 975, 976, 1009, -1, 1009, 1008, 975, -1, 976, 977, 1010, -1, 1010, 1009, 976, -1, 977, 978, 1011, -1, 1011, 1010, 977, -1, 978, 979, 1012, -1, 1012, 1011, 978, -1, 979, 980, 1013, -1, 1013, 1012, 979, -1, 980, 981, 1014, -1, 1014, 1013, 980, -1, 981, 982, 1015, -1, 1015, 1014, 981, -1, 982, 983, 1016, -1, 1016, 1015, 982, -1, 983, 984, 1017, -1, 1017, 1016, 983, -1, 984, 985, 1018, -1, 1018, 1017, 984, -1, 985, 986, 1019, -1, 1019, 1018, 985, -1, 986, 987, 1020, -1, 1020, 1019, 986, -1, 987, 988, 1021, -1, 1021, 1020, 987, -1, 988, 989, 1022, -1, 1022, 1021, 988, -1, 1023, 990, 991, -1, 991, 1024, 1023, -1, 1024, 991, 992, -1, 992, 1025, 1024, -1, 1025, 992, 993, -1, 993, 1026, 1025, -1, 1026, 993, 994, -1, 994, 1027, 1026, -1, 1027, 994, 995, -1, 995, 1028, 1027, -1, 1028, 995, 996, -1, 996, 1029, 1028, -1, 1029, 996, 997, -1, 997, 1030, 1029, -1, 1030, 997, 998, -1, 998, 1031, 1030, -1, 1031, 998, 999, -1, 999, 1032, 1031, -1, 1032, 999, 1000, -1, 1000, 1033, 1032, -1, 1033, 1000, 1001, -1, 1001, 1034, 1033, -1, 1034, 1001, 1002, -1, 1002, 1035, 1034, -1, 1035, 1002, 1003, -1, 1003, 1036, 1035, -1, 1036, 1003, 1004, -1, 1004, 1037, 1036, -1, 1037, 1004, 1005, -1, 1005, 1038, 1037, -1, 1038, 1005, 1006, -1, 1006, 1039, 1038, -1, 1039, 1006, 1007, -1, 1007, 1040, 1039, -1, 1007, 1008, 1041, -1, 1041, 1040, 1007, -1, 1008, 1009, 1042, -1, 1042, 1041, 1008, -1, 1009, 1010, 1043, -1, 1043, 1042, 1009, -1, 1010, 1011, 1044, -1, 1044, 1043, 1010, -1, 1011, 1012, 1045, -1, 1045, 1044, 1011, -1, 1012, 1013, 1046, -1, 1046, 1045, 1012, -1, 1013, 1014, 1047, -1, 1047, 1046, 1013, -1, 1014, 1015, 1048, -1, 1048, 1047, 1014, -1, 1015, 1016, 1049, -1, 1049, 1048, 1015, -1, 1016, 1017, 1050, -1, 1050, 1049, 1016, -1, 1017, 1018, 1051, -1, 1051, 1050, 1017, -1, 1018, 1019, 1052, -1, 1052, 1051, 1018, -1, 1019, 1020, 1053, -1, 1053, 1052, 1019, -1, 1020, 1021, 1054, -1, 1054, 1053, 1020, -1, 1021, 1022, 1055, -1, 1055, 1054, 1021, -1, 1056, 1023, 1024, -1, 1057, 1024, 1025, -1, 1058, 1025, 1026, -1, 1059, 1026, 1027, -1, 1060, 1027, 1028, -1, 1061, 1028, 1029, -1, 1062, 1029, 1030, -1, 1063, 1030, 1031, -1, 1064, 1031, 1032, -1, 1065, 1032, 1033, -1, 1066, 1033, 1034, -1, 1067, 1034, 1035, -1, 1068, 1035, 1036, -1, 1069, 1036, 1037, -1, 1070, 1037, 1038, -1, 1071, 1038, 1039, -1, 1072, 1039, 1040, -1, 1040, 1041, 1074, -1, 1041, 1042, 1075, -1, 1042, 1043, 1076, -1, 1043, 1044, 1077, -1, 1044, 1045, 1078, -1, 1045, 1046, 1079, -1, 1046, 1047, 1080, -1, 1047, 1048, 1081, -1, 1048, 1049, 1082, -1, 1049, 1050, 1083, -1, 1050, 1051, 1084, -1, 1051, 1052, 1085, -1, 1052, 1053, 1086, -1, 1053, 1054, 1087, -1, 1054, 1055, 1088, -1 };
    self->NurbsSurface1.coordIndex = m_coordIndex;
    self->NurbsSurface1.coordIndex_length = sizeof(m_coordIndex) / sizeof(int);
    }
    self->NurbsSurface1.creaseAngle = 1.570000;
    {
    static int m_normalIndex[] = { 1, 34, 33, -1, 2, 35, 34, -1, 3, 36, 35, -1, 4, 37, 36, -1, 5, 38, 37, -1, 6, 39, 38, -1, 7, 40, 39, -1, 8, 41, 40, -1, 9, 42, 41, -1, 10, 43, 42, -1, 11, 44, 43, -1, 12, 45, 44, -1, 13, 46, 45, -1, 14, 47, 46, -1, 15, 48, 47, -1, 16, 49, 48, -1, 17, 50, 49, -1, 51, 50, 17, -1, 52, 51, 18, -1, 53, 52, 19, -1, 54, 53, 20, -1, 55, 54, 21, -1, 56, 55, 22, -1, 57, 56, 23, -1, 58, 57, 24, -1, 59, 58, 25, -1, 60, 59, 26, -1, 61, 60, 27, -1, 62, 61, 28, -1, 63, 62, 29, -1, 64, 63, 30, -1, 65, 64, 31, -1, 66, 33, 34, -1, 34, 67, 66, -1, 67, 34, 35, -1, 35, 68, 67, -1, 68, 35, 36, -1, 36, 69, 68, -1, 69, 36, 37, -1, 37, 70, 69, -1, 70, 37, 38, -1, 38, 71, 70, -1, 71, 38, 39, -1, 39, 72, 71, -1, 72, 39, 40, -1, 40, 73, 72, -1, 73, 40, 41, -1, 41, 74, 73, -1, 74, 41, 42, -1, 42, 75, 74, -1, 75, 42, 43, -1, 43, 76, 75, -1, 76, 43, 44, -1, 44, 77, 76, -1, 77, 44, 45, -1, 45, 78, 77, -1, 78, 45, 46, -1, 46, 79, 78, -1, 79, 46, 47, -1, 47, 80, 79, -1, 80, 47, 48, -1, 48, 81, 80, -1, 81, 48, 49, -1, 49, 82, 81, -1, 82, 49, 50, -1, 50, 83, 82, -1, 50, 51, 84, -1, 84, 83, 50, -1, 51, 52, 85, -1, 85, 84, 51, -1, 52, 53, 86, -1, 86, 85, 52, -1, 53, 54, 87, -1, 87, 86, 53, -1, 54, 55, 88, -1, 88, 87, 54, -1, 55, 56, 89, -1, 89, 88, 55, -1, 56, 57, 90, -1, 90, 89, 56, -1, 57, 58, 91, -1, 91, 90, 57, -1, 58, 59, 92, -1, 92, 91, 58, -1, 59, 60, 93, -1, 93, 92, 59, -1, 60, 61, 94, -1, 94, 93, 60, -1, 61, 62, 95, -1, 95, 94, 61, -1, 62, 63, 96, -1, 96, 95, 62, -1, 63, 64, 97, -1, 97, 96, 63, -1, 64, 65, 98, -1, 98, 97, 64, -1, 99, 66, 67, -1, 67, 100, 99, -1, 100, 67, 68, -1, 68, 101, 100, -1, 101, 68, 69, -1, 69, 102, 101, -1, 102, 69, 70, -1, 70, 103, 102, -1, 103, 70, 71, -1, 71, 104, 103, -1, 104, 71, 72, -1, 72, 105, 104, -1, 105, 72, 73, -1, 73, 106, 105, -1, 106, 73, 74, -1, 74, 107, 106, -1, 107, 74, 75, -1, 75, 108, 107, -1, 108, 75, 76, -1, 76, 109, 108, -1, 109, 76, 77, -1, 77, 110, 109, -1, 110, 77, 78, -1, 78, 111, 110, -1, 111, 78, 79, -1, 79, 112, 111, -1, 112, 79, 80, -1, 80, 113, 112, -1, 113, 80, 81, -1, 81, 114, 113, -1, 114, 81, 82, -1, 82, 115, 114, -1, 115, 82, 83, -1, 83, 116, 115, -1, 83, 84, 117, -1, 117, 116, 83, -1, 84, 85, 118, -1, 118, 117, 84, -1, 85, 86, 119, -1, 119, 118, 85, -1, 86, 87, 120, -1, 120, 119, 86, -1, 87, 88, 121, -1, 121, 120, 87, -1, 88, 89, 122, -1, 122, 121, 88, -1, 89, 90, 123, -1, 123, 122, 89, -1, 90, 91, 124, -1, 124, 123, 90, -1, 91, 92, 125, -1, 125, 124, 91, -1, 92, 93, 126, -1, 126, 125, 92, -1, 93, 94, 127, -1, 127, 126, 93, -1, 94, 95, 128, -1, 128, 127, 94, -1, 95, 96, 129, -1, 129, 128, 95, -1, 96, 97, 130, -1, 130, 129, 96, -1, 97, 98, 131, -1, 131, 130, 97, -1, 132, 99, 100, -1, 100, 133, 132, -1, 133, 100, 101, -1, 101, 134, 133, -1, 134, 101, 102, -1, 102, 135, 134, -1, 135, 102, 103, -1, 103, 136, 135, -1, 136, 103, 104, -1, 104, 137, 136, -1, 137, 104, 105, -1, 105, 138, 137, -1, 138, 105, 106, -1, 106, 139, 138, -1, 139, 106, 107, -1, 107, 140, 139, -1, 140, 107, 108, -1, 108, 141, 140, -1, 141, 108, 109, -1, 109, 142, 141, -1, 142, 109, 110, -1, 110, 143, 142, -1, 143, 110, 111, -1, 111, 144, 143, -1, 144, 111, 112, -1, 112, 145, 144, -1, 145, 112, 113, -1, 113, 146, 145, -1, 146, 113, 114, -1, 114, 147, 146, -1, 147, 114, 115, -1, 115, 148, 147, -1, 148, 115, 116, -1, 116, 149, 148, -1, 116, 117, 150, -1, 150, 149, 116, -1, 117, 118, 151, -1, 151, 150, 117, -1, 118, 119, 152, -1, 152, 151, 118, -1, 119, 120, 153, -1, 153, 152, 119, -1, 120, 121, 154, -1, 154, 153, 120, -1, 121, 122, 155, -1, 155, 154, 121, -1, 122, 123, 156, -1, 156, 155, 122, -1, 123, 124, 157, -1, 157, 156, 123, -1, 124, 125, 158, -1, 158, 157, 124, -1, 125, 126, 159, -1, 159, 158, 125, -1, 126, 127, 160, -1, 160, 159, 126, -1, 127, 128, 161, -1, 161, 160, 127, -1, 128, 129, 162, -1, 162, 161, 128, -1, 129, 130, 163, -1, 163, 162, 129, -1, 130, 131, 164, -1, 164, 163, 130, -1, 165, 132, 133, -1, 133, 166, 165, -1, 166, 133, 134, -1, 134, 167, 166, -1, 167, 134, 135, -1, 135, 168, 167, -1, 168, 135, 136, -1, 136, 169, 168, -1, 169, 136, 137, -1, 137, 170, 169, -1, 170, 137, 138, -1, 138, 171, 170, -1, 171, 138, 139, -1, 139, 172, 171, -1, 172, 139, 140, -1, 140, 173, 172, -1, 173, 140, 141, -1, 141, 174, 173, -1, 174, 141, 142, -1, 142, 175, 174, -1, 175, 142, 143, -1, 143, 176, 175, -1, 176, 143, 144, -1, 144, 177, 176, -1, 177, 144, 145, -1, 145, 178, 177, -1, 178, 145, 146, -1, 146, 179, 178, -1, 179, 146, 147, -1, 147, 180, 179, -1, 180, 147, 148, -1, 148, 181, 180, -1, 181, 148, 149, -1, 149, 182, 181, -1, 149, 150, 183, -1, 183, 182, 149, -1, 150, 151, 184, -1, 184, 183, 150, -1, 151, 152, 185, -1, 185, 184, 151, -1, 152, 153, 186, -1, 186, 185, 152, -1, 153, 154, 187, -1, 187, 186, 153, -1, 154, 155, 188, -1, 188, 187, 154, -1, 155, 156, 189, -1, 189, 188, 155, -1, 156, 157, 190, -1, 190, 189, 156, -1, 157, 158, 191, -1, 191, 190, 157, -1, 158, 159, 192, -1, 192, 191, 158, -1, 159, 160, 193, -1, 193, 192, 159, -1, 160, 161, 194, -1, 194, 193, 160, -1, 161, 162, 195, -1, 195, 194, 161, -1, 162, 163, 196, -1, 196, 195, 162, -1, 163, 164, 197, -1, 197, 196, 163, -1, 198, 165, 166, -1, 166, 199, 198, -1, 199, 166, 167, -1, 167, 200, 199, -1, 200, 167, 168, -1, 168, 201, 200, -1, 201, 168, 169, -1, 169, 202, 201, -1, 202, 169, 170, -1, 170, 203, 202, -1, 203, 170, 171, -1, 171, 204, 203, -1, 204, 171, 172, -1, 172, 205, 204, -1, 205, 172, 173, -1, 173, 206, 205, -1, 206, 173, 174, -1, 174, 207, 206, -1, 207, 174, 175, -1, 175, 208, 207, -1, 208, 175, 176, -1, 176, 209, 208, -1, 209, 176, 177, -1, 177, 210, 209, -1, 210, 177, 178, -1, 178, 211, 210, -1, 211, 178, 179, -1, 179, 212, 211, -1, 212, 179, 180, -1, 180, 213, 212, -1, 213, 180, 181, -1, 181, 214, 213, -1, 214, 181, 182, -1, 182, 215, 214, -1, 182, 183, 216, -1, 216, 215, 182, -1, 183, 184, 217, -1, 217, 216, 183, -1, 184, 185, 218, -1, 218, 217, 184, -1, 185, 186, 219, -1, 219, 218, 185, -1, 186, 187, 220, -1, 220, 219, 186, -1, 187, 188, 221, -1, 221, 220, 187, -1, 188, 189, 222, -1, 222, 221, 188, -1, 189, 190, 223, -1, 223, 222, 189, -1, 190, 191, 224, -1, 224, 223, 190, -1, 191, 192, 225, -1, 225, 224, 191, -1, 192, 193, 226, -1, 226, 225, 192, -1, 193, 194, 227, -1, 227, 226, 193, -1, 194, 195, 228, -1, 228, 227, 194, -1, 195, 196, 229, -1, 229, 228, 195, -1, 196, 197, 230, -1, 230, 229, 196, -1, 231, 198, 199, -1, 199, 232, 231, -1, 232, 199, 200, -1, 200, 233, 232, -1, 233, 200, 201, -1, 201, 234, 233, -1, 234, 201, 202, -1, 202, 235, 234, -1, 235, 202, 203, -1, 203, 236, 235, -1, 236, 203, 204, -1, 204, 237, 236, -1, 237, 204, 205, -1, 205, 238, 237, -1, 238, 205, 206, -1, 206, 239, 238, -1, 239, 206, 207, -1, 207, 240, 239, -1, 240, 207, 208, -1, 208, 241, 240, -1, 241, 208, 209, -1, 209, 242, 241, -1, 242, 209, 210, -1, 210, 243, 242, -1, 243, 210, 211, -1, 211, 244, 243, -1, 244, 211, 212, -1, 212, 245, 244, -1, 245, 212, 213, -1, 213, 246, 245, -1, 246, 213, 214, -1, 214, 247, 246, -1, 247, 214, 215, -1, 215, 248, 247, -1, 215, 216, 249, -1, 249, 248, 215, -1, 216, 217, 250, -1, 250, 249, 216, -1, 217, 218, 251, -1, 251, 250, 217, -1, 218, 219, 252, -1, 252, 251, 218, -1, 219, 220, 253, -1, 253, 252, 219, -1, 220, 221, 254, -1, 254, 253, 220, -1, 221, 222, 255, -1, 255, 254, 221, -1, 222, 223, 256, -1, 256, 255, 222, -1, 223, 224, 257, -1, 257, 256, 223, -1, 224, 225, 258, -1, 258, 257, 224, -1, 225, 226, 259, -1, 259, 258, 225, -1, 226, 227, 260, -1, 260, 259, 226, -1, 227, 228, 261, -1, 261, 260, 227, -1, 228, 229, 262, -1, 262, 261, 228, -1, 229, 230, 263, -1, 263, 262, 229, -1, 264, 231, 232, -1, 232, 265, 264, -1, 265, 232, 233, -1, 233, 266, 265, -1, 266, 233, 234, -1, 234, 267, 266, -1, 267, 234, 235, -1, 235, 268, 267, -1, 268, 235, 236, -1, 236, 269, 268, -1, 269, 236, 237, -1, 237, 270, 269, -1, 270, 237, 238, -1, 238, 271, 270, -1, 271, 238, 239, -1, 239, 272, 271, -1, 272, 239, 240, -1, 240, 273, 272, -1, 273, 240, 241, -1, 241, 274, 273, -1, 274, 241, 242, -1, 242, 275, 274, -1, 275, 242, 243, -1, 243, 276, 275, -1, 276, 243, 244, -1, 244, 277, 276, -1, 277, 244, 245, -1, 245, 278, 277, -1, 278, 245, 246, -1, 246, 279, 278, -1, 279, 246, 247, -1, 247, 280, 279, -1, 280, 247, 248, -1, 248, 281, 280, -1, 248, 249, 282, -1, 282, 281, 248, -1, 249, 250, 283, -1, 283, 282, 249, -1, 250, 251, 284, -1, 284, 283, 250, -1, 251, 252, 285, -1, 285, 284, 251, -1, 252, 253, 286, -1, 286, 285, 252, -1, 253, 254, 287, -1, 287, 286, 253, -1, 254, 255, 288, -1, 288, 287, 254, -1, 255, 256, 289, -1, 289, 288, 255, -1, 256, 257, 290, -1, 290, 289, 256, -1, 257, 258, 291, -1, 291, 290, 257, -1, 258, 259, 292, -1, 292, 291, 258, -1, 259, 260, 293, -1, 293, 292, 259, -1, 260, 261, 294, -1, 294, 293, 260, -1, 261, 262, 295, -1, 295, 294, 261, -1, 262, 263, 296, -1, 296, 295, 262, -1, 297, 264, 265, -1, 265, 298, 297, -1, 298, 265, 266, -1, 266, 299, 298, -1, 299, 266, 267, -1, 267, 300, 299, -1, 300, 267, 268, -1, 268, 301, 300, -1, 301, 268, 269, -1, 269, 302, 301, -1, 302, 269, 270, -1, 270, 303, 302, -1, 303, 270, 271, -1, 271, 304, 303, -1, 304, 271, 272, -1, 272, 305, 304, -1, 305, 272, 273, -1, 273, 306, 305, -1, 306, 273, 274, -1, 274, 307, 306, -1, 307, 274, 275, -1, 275, 308, 307, -1, 308, 275, 276, -1, 276, 309, 308, -1, 309, 276, 277, -1, 277, 310, 309, -1, 310, 277, 278, -1, 278, 311, 310, -1, 311, 278, 279, -1, 279, 312, 311, -1, 312, 279, 280, -1, 280, 313, 312, -1, 313, 280, 281, -1, 281, 314, 313, -1, 281, 282, 315, -1, 315, 314, 281, -1, 282, 283, 316, -1, 316, 315, 282, -1, 283, 284, 317, -1, 317, 316, 283, -1, 284, 285, 318, -1, 318, 317, 284, -1, 285, 286, 319, -1, 319, 318, 285, -1, 286, 287, 320, -1, 320, 319, 286, -1, 287, 288, 321, -1, 321, 320, 287, -1, 288, 289, 322, -1, 322, 321, 288, -1, 289, 290, 323, -1, 323, 322, 289, -1, 290, 291, 324, -1, 324, 323, 290, -1, 291, 292, 325, -1, 325, 324, 291, -1, 292, 293, 326, -1, 326, 325, 292, -1, 293, 294, 327, -1, 327, 326, 293, -1, 294, 295, 328, -1, 328, 327, 294, -1, 295, 296, 329, -1, 329, 328, 295, -1, 330, 297, 298, -1, 298, 331, 330, -1, 331, 298, 299, -1, 299, 332, 331, -1, 332, 299, 300, -1, 300, 333, 332, -1, 333, 300, 301, -1, 301, 334, 333, -1, 334, 301, 302, -1, 302, 335, 334, -1, 335, 302, 303, -1, 303, 336, 335, -1, 336, 303, 304, -1, 304, 337, 336, -1, 337, 304, 305, -1, 305, 338, 337, -1, 338, 305, 306, -1, 306, 339, 338, -1, 339, 306, 307, -1, 307, 340, 339, -1, 340, 307, 308, -1, 308, 341, 340, -1, 341, 308, 309, -1, 309, 342, 341, -1, 342, 309, 310, -1, 310, 343, 342, -1, 343, 310, 311, -1, 311, 344, 343, -1, 344, 311, 312, -1, 312, 345, 344, -1, 345, 312, 313, -1, 313, 346, 345, -1, 346, 313, 314, -1, 314, 347, 346, -1, 314, 315, 348, -1, 348, 347, 314, -1, 315, 316, 349, -1, 349, 348, 315, -1, 316, 317, 350, -1, 350, 349, 316, -1, 317, 318, 351, -1, 351, 350, 317, -1, 318, 319, 352, -1, 352, 351, 318, -1, 319, 320, 353, -1, 353, 352, 319, -1, 320, 321, 354, -1, 354, 353, 320, -1, 321, 322, 355, -1, 355, 354, 321, -1, 322, 323, 356, -1, 356, 355, 322, -1, 323, 324, 357, -1, 357, 356, 323, -1, 324, 325, 358, -1, 358, 357, 324, -1, 325, 326, 359, -1, 359, 358, 325, -1, 326, 327, 360, -1, 360, 359, 326, -1, 327, 328, 361, -1, 361, 360, 327, -1, 328, 329, 362, -1, 362, 361, 328, -1, 363, 330, 331, -1, 331, 364, 363, -1, 364, 331, 332, -1, 332, 365, 364, -1, 365, 332, 333, -1, 333, 366, 365, -1, 366, 333, 334, -1, 334, 367, 366, -1, 367, 334, 335, -1, 335, 368, 367, -1, 368, 335, 336, -1, 336, 369, 368, -1, 369, 336, 337, -1, 337, 370, 369, -1, 370, 337, 338, -1, 338, 371, 370, -1, 371, 338, 339, -1, 339, 372, 371, -1, 372, 339, 340, -1, 340, 373, 372, -1, 373, 340, 341, -1, 341, 374, 373, -1, 374, 341, 342, -1, 342, 375, 374, -1, 375, 342, 343, -1, 343, 376, 375, -1, 376, 343, 344, -1, 344, 377, 376, -1, 377, 344, 345, -1, 345, 378, 377, -1, 378, 345, 346, -1, 346, 379, 378, -1, 379, 346, 347, -1, 347, 380, 379, -1, 347, 348, 381, -1, 381, 380, 347, -1, 348, 349, 382, -1, 382, 381, 348, -1, 349, 350, 383, -1, 383, 382, 349, -1, 350, 351, 384, -1, 384, 383, 350, -1, 351, 352, 385, -1, 385, 384, 351, -1, 352, 353, 386, -1, 386, 385, 352, -1, 353, 354, 387, -1, 387, 386, 353, -1, 354, 355, 388, -1, 388, 387, 354, -1, 355, 356, 389, -1, 389, 388, 355, -1, 356, 357, 390, -1, 390, 389, 356, -1, 357, 358, 391, -1, 391, 390, 357, -1, 358, 359, 392, -1, 392, 391, 358, -1, 359, 360, 393, -1, 393, 392, 359, -1, 360, 361, 394, -1, 394, 393, 360, -1, 361, 362, 395, -1, 395, 394, 361, -1, 396, 363, 364, -1, 364, 397, 396, -1, 397, 364, 365, -1, 365, 398, 397, -1, 398, 365, 366, -1, 366, 399, 398, -1, 399, 366, 367, -1, 367, 400, 399, -1, 400, 367, 368, -1, 368, 401, 400, -1, 401, 368, 369, -1, 369, 402, 401, -1, 402, 369, 370, -1, 370, 403, 402, -1, 403, 370, 371, -1, 371, 404, 403, -1, 404, 371, 372, -1, 372, 405, 404, -1, 405, 372, 373, -1, 373, 406, 405, -1, 406, 373, 374, -1, 374, 407, 406, -1, 407, 374, 375, -1, 375, 408, 407, -1, 408, 375, 376, -1, 376, 409, 408, -1, 409, 376, 377, -1, 377, 410, 409, -1, 410, 377, 378, -1, 378, 411, 410, -1, 411, 378, 379, -1, 379, 412, 411, -1, 412, 379, 380, -1, 380, 413, 412, -1, 380, 381, 414, -1, 414, 413, 380, -1, 381, 382, 415, -1, 415, 414, 381, -1, 382, 383, 416, -1, 416, 415, 382, -1, 383, 384, 417, -1, 417, 416, 383, -1, 384, 385, 418, -1, 418, 417, 384, -1, 385, 386, 419, -1, 419, 418, 385, -1, 386, 387, 420, -1, 420, 419, 386, -1, 387, 388, 421, -1, 421, 420, 387, -1, 388, 389, 422, -1, 422, 421, 388, -1, 389, 390, 423, -1, 423, 422, 389, -1, 390, 391, 424, -1, 424, 423, 390, -1, 391, 392, 425, -1, 425, 424, 391, -1, 392, 393, 426, -1, 426, 425, 392, -1, 393, 394, 427, -1, 427, 426, 393, -1, 394, 395, 428, -1, 428, 427, 394, -1, 429, 396, 397, -1, 397, 430, 429, -1, 430, 397, 398, -1, 398, 431, 430, -1, 431, 398, 399, -1, 399, 432, 431, -1, 432, 399, 400, -1, 400, 433, 432, -1, 433, 400, 401, -1, 401, 434, 433, -1, 434, 401, 402, -1, 402, 435, 434, -1, 435, 402, 403, -1, 403, 436, 435, -1, 436, 403, 404, -1, 404, 437, 436, -1, 437, 404, 405, -1, 405, 438, 437, -1, 438, 405, 406, -1, 406, 439, 438, -1, 439, 406, 407, -1, 407, 440, 439, -1, 440, 407, 408, -1, 408, 441, 440, -1, 441, 408, 409, -1, 409, 442, 441, -1, 442, 409, 410, -1, 410, 443, 442, -1, 443, 410, 411, -1, 411, 444, 443, -1, 444, 411, 412, -1, 412, 445, 444, -1, 445, 412, 413, -1, 413, 446, 445, -1, 413, 414, 447, -1, 447, 446, 413, -1, 414, 415, 448, -1, 448, 447, 414, -1, 415, 416, 449, -1, 449, 448, 415, -1, 416, 417, 450, -1, 450, 449, 416, -1, 417, 418, 451, -1, 451, 450, 417, -1, 418, 419, 452, -1, 452, 451, 418, -1, 419, 420, 453, -1, 453, 452, 419, -1, 420, 421, 454, -1, 454, 453, 420, -1, 421, 422, 455, -1, 455, 454, 421, -1, 422, 423, 456, -1, 456, 455, 422, -1, 423, 424, 457, -1, 457, 456, 423, -1, 424, 425, 458, -1, 458, 457, 424, -1, 425, 426, 459, -1, 459, 458, 425, -1, 426, 427, 460, -1, 460, 459, 426, -1, 427, 428, 461, -1, 461, 460, 427, -1, 462, 429, 430, -1, 430, 463, 462, -1, 463, 430, 431, -1, 431, 464, 463, -1, 464, 431, 432, -1, 432, 465, 464, -1, 465, 432, 433, -1, 433, 466, 465, -1, 466, 433, 434, -1, 434, 467, 466, -1, 467, 434, 435, -1, 435, 468, 467, -1, 468, 435, 436, -1, 436, 469, 468, -1, 469, 436, 437, -1, 437, 470, 469, -1, 470, 437, 438, -1, 438, 471, 470, -1, 471, 438, 439, -1, 439, 472, 471, -1, 472, 439, 440, -1, 440, 473, 472, -1, 473, 440, 441, -1, 441, 474, 473, -1, 474, 441, 442, -1, 442, 475, 474, -1, 475, 442, 443, -1, 443, 476, 475, -1, 476, 443, 444, -1, 444, 477, 476, -1, 477, 444, 445, -1, 445, 478, 477, -1, 478, 445, 446, -1, 446, 479, 478, -1, 446, 447, 480, -1, 480, 479, 446, -1, 447, 448, 481, -1, 481, 480, 447, -1, 448, 449, 482, -1, 482, 481, 448, -1, 449, 450, 483, -1, 483, 482, 449, -1, 450, 451, 484, -1, 484, 483, 450, -1, 451, 452, 485, -1, 485, 484, 451, -1, 452, 453, 486, -1, 486, 485, 452, -1, 453, 454, 487, -1, 487, 486, 453, -1, 454, 455, 488, -1, 488, 487, 454, -1, 455, 456, 489, -1, 489, 488, 455, -1, 456, 457, 490, -1, 490, 489, 456, -1, 457, 458, 491, -1, 491, 490, 457, -1, 458, 459, 492, -1, 492, 491, 458, -1, 459, 460, 493, -1, 493, 492, 459, -1, 460, 461, 494, -1, 494, 493, 460, -1, 495, 462, 463, -1, 463, 496, 495, -1, 496, 463, 464, -1, 464, 497, 496, -1, 497, 464, 465, -1, 465, 498, 497, -1, 498, 465, 466, -1, 466, 499, 498, -1, 499, 466, 467, -1, 467, 500, 499, -1, 500, 467, 468, -1, 468, 501, 500, -1, 501, 468, 469, -1, 469, 502, 501, -1, 502, 469, 470, -1, 470, 503, 502, -1, 503, 470, 471, -1, 471, 504, 503, -1, 504, 471, 472, -1, 472, 505, 504, -1, 505, 472, 473, -1, 473, 506, 505, -1, 506, 473, 474, -1, 474, 507, 506, -1, 507, 474, 475, -1, 475, 508, 507, -1, 508, 475, 476, -1, 476, 509, 508, -1, 509, 476, 477, -1, 477, 510, 509, -1, 510, 477, 478, -1, 478, 511, 510, -1, 511, 478, 479, -1, 479, 512, 511, -1, 479, 480, 513, -1, 513, 512, 479, -1, 480, 481, 514, -1, 514, 513, 480, -1, 481, 482, 515, -1, 515, 514, 481, -1, 482, 483, 516, -1, 516, 515, 482, -1, 483, 484, 517, -1, 517, 516, 483, -1, 484, 485, 518, -1, 518, 517, 484, -1, 485, 486, 519, -1, 519, 518, 485, -1, 486, 487, 520, -1, 520, 519, 486, -1, 487, 488, 521, -1, 521, 520, 487, -1, 488, 489, 522, -1, 522, 521, 488, -1, 489, 490, 523, -1, 523, 522, 489, -1, 490, 491, 524, -1, 524, 523, 490, -1, 491, 492, 525, -1, 525, 524, 491, -1, 492, 493, 526, -1, 526, 525, 492, -1, 493, 494, 527, -1, 527, 526, 493, -1, 528, 495, 496, -1, 496, 529, 528, -1, 529, 496, 497, -1, 497, 530, 529, -1, 530, 497, 498, -1, 498, 531, 530, -1, 531, 498, 499, -1, 499, 532, 531, -1, 532, 499, 500, -1, 500, 533, 532, -1, 533, 500, 501, -1, 501, 534, 533, -1, 534, 501, 502, -1, 502, 535, 534, -1, 535, 502, 503, -1, 503, 536, 535, -1, 536, 503, 504, -1, 504, 537, 536, -1, 537, 504, 505, -1, 505, 538, 537, -1, 538, 505, 506, -1, 506, 539, 538, -1, 539, 506, 507, -1, 507, 540, 539, -1, 540, 507, 508, -1, 508, 541, 540, -1, 541, 508, 509, -1, 509, 542, 541, -1, 542, 509, 510, -1, 510, 543, 542, -1, 543, 510, 511, -1, 511, 544, 543, -1, 544, 511, 512, -1, 512, 545, 544, -1, 512, 513, 546, -1, 546, 545, 512, -1, 513, 514, 547, -1, 547, 546, 513, -1, 514, 515, 548, -1, 548, 547, 514, -1, 515, 516, 549, -1, 549, 548, 515, -1, 516, 517, 550, -1, 550, 549, 516, -1, 517, 518, 551, -1, 551, 550, 517, -1, 518, 519, 552, -1, 552, 551, 518, -1, 519, 520, 553, -1, 553, 552, 519, -1, 520, 521, 554, -1, 554, 553, 520, -1, 521, 522, 555, -1, 555, 554, 521, -1, 522, 523, 556, -1, 556, 555, 522, -1, 523, 524, 557, -1, 557, 556, 523, -1, 524, 525, 558, -1, 558, 557, 524, -1, 525, 526, 559, -1, 559, 558, 525, -1, 526, 527, 560, -1, 560, 559, 526, -1, 561, 528, 529, -1, 529, 562, 561, -1, 562, 529, 530, -1, 530, 563, 562, -1, 563, 530, 531, -1, 531, 564, 563, -1, 564, 531, 532, -1, 532, 565, 564, -1, 565, 532, 533, -1, 533, 566, 565, -1, 566, 533, 534, -1, 534, 567, 566, -1, 567, 534, 535, -1, 535, 568, 567, -1, 568, 535, 536, -1, 536, 569, 568, -1, 569, 536, 537, -1, 537, 570, 569, -1, 570, 537, 538, -1, 538, 571, 570, -1, 571, 538, 539, -1, 539, 572, 571, -1, 572, 539, 540, -1, 540, 573, 572, -1, 573, 540, 541, -1, 541, 574, 573, -1, 574, 541, 542, -1, 542, 575, 574, -1, 575, 542, 543, -1, 543, 576, 575, -1, 576, 543, 544, -1, 544, 577, 576, -1, 577, 544, 545, -1, 545, 578, 577, -1, 545, 546, 579, -1, 579, 578, 545, -1, 546, 547, 580, -1, 580, 579, 546, -1, 547, 548, 581, -1, 581, 580, 547, -1, 548, 549, 582, -1, 582, 581, 548, -1, 549, 550, 583, -1, 583, 582, 549, -1, 550, 551, 584, -1, 584, 583, 550, -1, 551, 552, 585, -1, 585, 584, 551, -1, 552, 553, 586, -1, 586, 585, 552, -1, 553, 554, 587, -1, 587, 586, 553, -1, 554, 555, 588, -1, 588, 587, 554, -1, 555, 556, 589, -1, 589, 588, 555, -1, 556, 557, 590, -1, 590, 589, 556, -1, 557, 558, 591, -1, 591, 590, 557, -1, 558, 559, 592, -1, 592, 591, 558, -1, 559, 560, 593, -1, 593, 592, 559, -1, 594, 561, 562, -1, 562, 595, 594, -1, 595, 562, 563, -1, 563, 596, 595, -1, 596, 563, 564, -1, 564, 597, 596, -1, 597, 564, 565, -1, 565, 598, 597, -1, 598, 565, 566, -1, 566, 599, 598, -1, 599, 566, 567, -1, 567, 600, 599, -1, 600, 567, 568, -1, 568, 601, 600, -1, 601, 568, 569, -1, 569, 602, 601, -1, 602, 569, 570, -1, 570, 603, 602, -1, 603, 570, 571, -1, 571, 604, 603, -1, 604, 571, 572, -1, 572, 605, 604, -1, 605, 572, 573, -1, 573, 606, 605, -1, 606, 573, 574, -1, 574, 607, 606, -1, 607, 574, 575, -1, 575, 608, 607, -1, 608, 575, 576, -1, 576, 609, 608, -1, 609, 576, 577, -1, 577, 610, 609, -1, 610, 577, 578, -1, 578, 611, 610, -1, 578, 579, 612, -1, 612, 611, 578, -1, 579, 580, 613, -1, 613, 612, 579, -1, 580, 581, 614, -1, 614, 613, 580, -1, 581, 582, 615, -1, 615, 614, 581, -1, 582, 583, 616, -1, 616, 615, 582, -1, 583, 584, 617, -1, 617, 616, 583, -1, 584, 585, 618, -1, 618, 617, 584, -1, 585, 586, 619, -1, 619, 618, 585, -1, 586, 587, 620, -1, 620, 619, 586, -1, 587, 588, 621, -1, 621, 620, 587, -1, 588, 589, 622, -1, 622, 621, 588, -1, 589, 590, 623, -1, 623, 622, 589, -1, 590, 591, 624, -1, 624, 623, 590, -1, 591, 592, 625, -1, 625, 624, 591, -1, 592, 593, 626, -1, 626, 625, 592, -1, 627, 594, 595, -1, 595, 628, 627, -1, 628, 595, 596, -1, 596, 629, 628, -1, 629, 596, 597, -1, 597, 630, 629, -1, 630, 597, 598, -1, 598, 631, 630, -1, 631, 598, 599, -1, 599, 632, 631, -1, 632, 599, 600, -1, 600, 633, 632, -1, 633, 600, 601, -1, 601, 634, 633, -1, 634, 601, 602, -1, 602, 635, 634, -1, 635, 602, 603, -1, 603, 636, 635, -1, 636, 603, 604, -1, 604, 637, 636, -1, 637, 604, 605, -1, 605, 638, 637, -1, 638, 605, 606, -1, 606, 639, 638, -1, 639, 606, 607, -1, 607, 640, 639, -1, 640, 607, 608, -1, 608, 641, 640, -1, 641, 608, 609, -1, 609, 642, 641, -1, 642, 609, 610, -1, 610, 643, 642, -1, 643, 610, 611, -1, 611, 644, 643, -1, 611, 612, 645, -1, 645, 644, 611, -1, 612, 613, 646, -1, 646, 645, 612, -1, 613, 614, 647, -1, 647, 646, 613, -1, 614, 615, 648, -1, 648, 647, 614, -1, 615, 616, 649, -1, 649, 648, 615, -1, 616, 617, 650, -1, 650, 649, 616, -1, 617, 618, 651, -1, 651, 650, 617, -1, 618, 619, 652, -1, 652, 651, 618, -1, 619, 620, 653, -1, 653, 652, 619, -1, 620, 621, 654, -1, 654, 653, 620, -1, 621, 622, 655, -1, 655, 654, 621, -1, 622, 623, 656, -1, 656, 655, 622, -1, 623, 624, 657, -1, 657, 656, 623, -1, 624, 625, 658, -1, 658, 657, 624, -1, 625, 626, 659, -1, 659, 658, 625, -1, 660, 627, 628, -1, 628, 661, 660, -1, 661, 628, 629, -1, 629, 662, 661, -1, 662, 629, 630, -1, 630, 663, 662, -1, 663, 630, 631, -1, 631, 664, 663, -1, 664, 631, 632, -1, 632, 665, 664, -1, 665, 632, 633, -1, 633, 666, 665, -1, 666, 633, 634, -1, 634, 667, 666, -1, 667, 634, 635, -1, 635, 668, 667, -1, 668, 635, 636, -1, 636, 669, 668, -1, 669, 636, 637, -1, 637, 670, 669, -1, 670, 637, 638, -1, 638, 671, 670, -1, 671, 638, 639, -1, 639, 672, 671, -1, 672, 639, 640, -1, 640, 673, 672, -1, 673, 640, 641, -1, 641, 674, 673, -1, 674, 641, 642, -1, 642, 675, 674, -1, 675, 642, 643, -1, 643, 676, 675, -1, 676, 643, 644, -1, 644, 677, 676, -1, 644, 645, 678, -1, 678, 677, 644, -1, 645, 646, 679, -1, 679, 678, 645, -1, 646, 647, 680, -1, 680, 679, 646, -1, 647, 648, 681, -1, 681, 680, 647, -1, 648, 649, 682, -1, 682, 681, 648, -1, 649, 650, 683, -1, 683, 682, 649, -1, 650, 651, 684, -1, 684, 683, 650, -1, 651, 652, 685, -1, 685, 684, 651, -1, 652, 653, 686, -1, 686, 685, 652, -1, 653, 654, 687, -1, 687, 686, 653, -1, 654, 655, 688, -1, 688, 687, 654, -1, 655, 656, 689, -1, 689, 688, 655, -1, 656, 657, 690, -1, 690, 689, 656, -1, 657, 658, 691, -1, 691, 690, 657, -1, 658, 659, 692, -1, 692, 691, 658, -1, 693, 660, 661, -1, 661, 694, 693, -1, 694, 661, 662, -1, 662, 695, 694, -1, 695, 662, 663, -1, 663, 696, 695, -1, 696, 663, 664, -1, 664, 697, 696, -1, 697, 664, 665, -1, 665, 698, 697, -1, 698, 665, 666, -1, 666, 699, 698, -1, 699, 666, 667, -1, 667, 700, 699, -1, 700, 667, 668, -1, 668, 701, 700, -1, 701, 668, 669, -1, 669, 702, 701, -1, 702, 669, 670, -1, 670, 703, 702, -1, 703, 670, 671, -1, 671, 704, 703, -1, 704, 671, 672, -1, 672, 705, 704, -1, 705, 672, 673, -1, 673, 706, 705, -1, 706, 673, 674, -1, 674, 707, 706, -1, 707, 674, 675, -1, 675, 708, 707, -1, 708, 675, 676, -1, 676, 709, 708, -1, 709, 676, 677, -1, 677, 710, 709, -1, 677, 678, 711, -1, 711, 710, 677, -1, 678, 679, 712, -1, 712, 711, 678, -1, 679, 680, 713, -1, 713, 712, 679, -1, 680, 681, 714, -1, 714, 713, 680, -1, 681, 682, 715, -1, 715, 714, 681, -1, 682, 683, 716, -1, 716, 715, 682, -1, 683, 684, 717, -1, 717, 716, 683, -1, 684, 685, 718, -1, 718, 717, 684, -1, 685, 686, 719, -1, 719, 718, 685, -1, 686, 687, 720, -1, 720, 719, 686, -1, 687, 688, 721, -1, 721, 720, 687, -1, 688, 689, 722, -1, 722, 721, 688, -1, 689, 690, 723, -1, 723, 722, 689, -1, 690, 691, 724, -1, 724, 723, 690, -1, 691, 692, 725, -1, 725, 724, 691, -1, 726, 693, 694, -1, 694, 727, 726, -1, 727, 694, 695, -1, 695, 728, 727, -1, 728, 695, 696, -1, 696, 729, 728, -1, 729, 696, 697, -1, 697, 730, 729, -1, 730, 697, 698, -1, 698, 731, 730, -1, 731, 698, 699, -1, 699, 732, 731, -1, 732, 699, 700, -1, 700, 733, 732, -1, 733, 700, 701, -1, 701, 734, 733, -1, 734, 701, 702, -1, 702, 735, 734, -1, 735, 702, 703, -1, 703, 736, 735, -1, 736, 703, 704, -1, 704, 737, 736, -1, 737, 704, 705, -1, 705, 738, 737, -1, 738, 705, 706, -1, 706, 739, 738, -1, 739, 706, 707, -1, 707, 740, 739, -1, 740, 707, 708, -1, 708, 741, 740, -1, 741, 708, 709, -1, 709, 742, 741, -1, 742, 709, 710, -1, 710, 743, 742, -1, 710, 711, 744, -1, 744, 743, 710, -1, 711, 712, 745, -1, 745, 744, 711, -1, 712, 713, 746, -1, 746, 745, 712, -1, 713, 714, 747, -1, 747, 746, 713, -1, 714, 715, 748, -1, 748, 747, 714, -1, 715, 716, 749, -1, 749, 748, 715, -1, 716, 717, 750, -1, 750, 749, 716, -1, 717, 718, 751, -1, 751, 750, 717, -1, 718, 719, 752, -1, 752, 751, 718, -1, 719, 720, 753, -1, 753, 752, 719, -1, 720, 721, 754, -1, 754, 753, 720, -1, 721, 722, 755, -1, 755, 754, 721, -1, 722, 723, 756, -1, 756, 755, 722, -1, 723, 724, 757, -1, 757, 756, 723, -1, 724, 725, 758, -1, 758, 757, 724, -1, 759, 726, 727, -1, 727, 760, 759, -1, 760, 727, 728, -1, 728, 761, 760, -1, 761, 728, 729, -1, 729, 762, 761, -1, 762, 729, 730, -1, 730, 763, 762, -1, 763, 730, 731, -1, 731, 764, 763, -1, 764, 731, 732, -1, 732, 765, 764, -1, 765, 732, 733, -1, 733, 766, 765, -1, 766, 733, 734, -1, 734, 767, 766, -1, 767, 734, 735, -1, 735, 768, 767, -1, 768, 735, 736, -1, 736, 769, 768, -1, 769, 736, 737, -1, 737, 770, 769, -1, 770, 737, 738, -1, 738, 771, 770, -1, 771, 738, 739, -1, 739, 772, 771, -1, 772, 739, 740, -1, 740, 773, 772, -1, 773, 740, 741, -1, 741, 774, 773, -1, 774, 741, 742, -1, 742, 775, 774, -1, 775, 742, 743, -1, 743, 776, 775, -1, 743, 744, 777, -1, 777, 776, 743, -1, 744, 745, 778, -1, 778, 777, 744, -1, 745, 746, 779, -1, 779, 778, 745, -1, 746, 747, 780, -1, 780, 779, 746, -1, 747, 748, 781, -1, 781, 780, 747, -1, 748, 749, 782, -1, 782, 781, 748, -1, 749, 750, 783, -1, 783, 782, 749, -1, 750, 751, 784, -1, 784, 783, 750, -1, 751, 752, 785, -1, 785, 784, 751, -1, 752, 753, 786, -1, 786, 785, 752, -1, 753, 754, 787, -1, 787, 786, 753, -1, 754, 755, 788, -1, 788, 787, 754, -1, 755, 756, 789, -1, 789, 788, 755, -1, 756, 757, 790, -1, 790, 789, 756, -1, 757, 758, 791, -1, 791, 790, 757, -1, 792, 759, 760, -1, 760, 793, 792, -1, 793, 760, 761, -1, 761, 794, 793, -1, 794, 761, 762, -1, 762, 795, 794, -1, 795, 762, 763, -1, 763, 796, 795, -1, 796, 763, 764, -1, 764, 797, 796, -1, 797, 764, 765, -1, 765, 798, 797, -1, 798, 765, 766, -1, 766, 799, 798, -1, 799, 766, 767, -1, 767, 800, 799, -1, 800, 767, 768, -1, 768, 801, 800, -1, 801, 768, 769, -1, 769, 802, 801, -1, 802, 769, 770, -1, 770, 803, 802, -1, 803, 770, 771, -1, 771, 804, 803, -1, 804, 771, 772, -1, 772, 805, 804, -1, 805, 772, 773, -1, 773, 806, 805, -1, 806, 773, 774, -1, 774, 807, 806, -1, 807, 774, 775, -1, 775, 808, 807, -1, 808, 775, 776, -1, 776, 809, 808, -1, 776, 777, 810, -1, 810, 809, 776, -1, 777, 778, 811, -1, 811, 810, 777, -1, 778, 779, 812, -1, 812, 811, 778, -1, 779, 780, 813, -1, 813, 812, 779, -1, 780, 781, 814, -1, 814, 813, 780, -1, 781, 782, 815, -1, 815, 814, 781, -1, 782, 783, 816, -1, 816, 815, 782, -1, 783, 784, 817, -1, 817, 816, 783, -1, 784, 785, 818, -1, 818, 817, 784, -1, 785, 786, 819, -1, 819, 818, 785, -1, 786, 787, 820, -1, 820, 819, 786, -1, 787, 788, 821, -1, 821, 820, 787, -1, 788, 789, 822, -1, 822, 821, 788, -1, 789, 790, 823, -1, 823, 822, 789, -1, 790, 791, 824, -1, 824, 823, 790, -1, 825, 792, 793, -1, 793, 826, 825, -1, 826, 793, 794, -1, 794, 827, 826, -1, 827, 794, 795, -1, 795, 828, 827, -1, 828, 795, 796, -1, 796, 829, 828, -1, 829, 796, 797, -1, 797, 830, 829, -1, 830, 797, 798, -1, 798, 831, 830, -1, 831, 798, 799, -1, 799, 832, 831, -1, 832, 799, 800, -1, 800, 833, 832, -1, 833, 800, 801, -1, 801, 834, 833, -1, 834, 801, 802, -1, 802, 835, 834, -1, 835, 802, 803, -1, 803, 836, 835, -1, 836, 803, 804, -1, 804, 837, 836, -1, 837, 804, 805, -1, 805, 838, 837, -1, 838, 805, 806, -1, 806, 839, 838, -1, 839, 806, 807, -1, 807, 840, 839, -1, 840, 807, 808, -1, 808, 841, 840, -1, 841, 808, 809, -1, 809, 842, 841, -1, 809, 810, 843, -1, 843, 842, 809, -1, 810, 811, 844, -1, 844, 843, 810, -1, 811, 812, 845, -1, 845, 844, 811, -1, 812, 813, 846, -1, 846, 845, 812, -1, 813, 814, 847, -1, 847, 846, 813, -1, 814, 815, 848, -1, 848, 847, 814, -1, 815, 816, 849, -1, 849, 848, 815, -1, 816, 817, 850, -1, 850, 849, 816, -1, 817, 818, 851, -1, 851, 850, 817, -1, 818, 819, 852, -1, 852, 851, 818, -1, 819, 820, 853, -1, 853, 852, 819, -1, 820, 821, 854, -1, 854, 853, 820, -1, 821, 822, 855, -1, 855, 854, 821, -1, 822, 823, 856, -1, 856, 855, 822, -1, 823, 824, 857, -1, 857, 856, 823, -1, 858, 825, 826, -1, 826, 859, 858, -1, 859, 826, 827, -1, 827, 860, 859, -1, 860, 827, 828, -1, 828, 861, 860, -1, 861, 828, 829, -1, 829, 862, 861, -1, 862, 829, 830, -1, 830, 863, 862, -1, 863, 830, 831, -1, 831, 864, 863, -1, 864, 831, 832, -1, 832, 865, 864, -1, 865, 832, 833, -1, 833, 866, 865, -1, 866, 833, 834, -1, 834, 867, 866, -1, 867, 834, 835, -1, 835, 868, 867, -1, 868, 835, 836, -1, 836, 869, 868, -1, 869, 836, 837, -1, 837, 870, 869, -1, 870, 837, 838, -1, 838, 871, 870, -1, 871, 838, 839, -1, 839, 872, 871, -1, 872, 839, 840, -1, 840, 873, 872, -1, 873, 840, 841, -1, 841, 874, 873, -1, 874, 841, 842, -1, 842, 875, 874, -1, 842, 843, 876, -1, 876, 875, 842, -1, 843, 844, 877, -1, 877, 876, 843, -1, 844, 845, 878, -1, 878, 877, 844, -1, 845, 846, 879, -1, 879, 878, 845, -1, 846, 847, 880, -1, 880, 879, 846, -1, 847, 848, 881, -1, 881, 880, 847, -1, 848, 849, 882, -1, 882, 881, 848, -1, 849, 850, 883, -1, 883, 882, 849, -1, 850, 851, 884, -1, 884, 883, 850, -1, 851, 852, 885, -1, 885, 884, 851, -1, 852, 853, 886, -1, 886, 885, 852, -1, 853, 854, 887, -1, 887, 886, 853, -1, 854, 855, 888, -1, 888, 887, 854, -1, 855, 856, 889, -1, 889, 888, 855, -1, 856, 857, 890, -1, 890, 889, 856, -1, 891, 858, 859, -1, 859, 892, 891, -1, 892, 859, 860, -1, 860, 893, 892, -1, 893, 860, 861, -1, 861, 894, 893, -1, 894, 861, 862, -1, 862, 895, 894, -1, 895, 862, 863, -1, 863, 896, 895, -1, 896, 863, 864, -1, 864, 897, 896, -1, 897, 864, 865, -1, 865, 898, 897, -1, 898, 865, 866, -1, 866, 899, 898, -1, 899, 866, 867, -1, 867, 900, 899, -1, 900, 867, 868, -1, 868, 901, 900, -1, 901, 868, 869, -1, 869, 902, 901, -1, 902, 869, 870, -1, 870, 903, 902, -1, 903, 870, 871, -1, 871, 904, 903, -1, 904, 871, 872, -1, 872, 905, 904, -1, 905, 872, 873, -1, 873, 906, 905, -1, 906, 873, 874, -1, 874, 907, 906, -1, 907, 874, 875, -1, 875, 908, 907, -1, 875, 876, 909, -1, 909, 908, 875, -1, 876, 877, 910, -1, 910, 909, 876, -1, 877, 878, 911, -1, 911, 910, 877, -1, 878, 879, 912, -1, 912, 911, 878, -1, 879, 880, 913, -1, 913, 912, 879, -1, 880, 881, 914, -1, 914, 913, 880, -1, 881, 882, 915, -1, 915, 914, 881, -1, 882, 883, 916, -1, 916, 915, 882, -1, 883, 884, 917, -1, 917, 916, 883, -1, 884, 885, 918, -1, 918, 917, 884, -1, 885, 886, 919, -1, 919, 918, 885, -1, 886, 887, 920, -1, 920, 919, 886, -1, 887, 888, 921, -1, 921, 920, 887, -1, 888, 889, 922, -1, 922, 921, 888, -1, 889, 890, 923, -1, 923, 922, 889, -1, 924, 891, 892, -1, 892, 925, 924, -1, 925, 892, 893, -1, 893, 926, 925, -1, 926, 893, 894, -1, 894, 927, 926, -1, 927, 894, 895, -1, 895, 928, 927, -1, 928, 895, 896, -1, 896, 929, 928, -1, 929, 896, 897, -1, 897, 930, 929, -1, 930, 897, 898, -1, 898, 931, 930, -1, 931, 898, 899, -1, 899, 932, 931, -1, 932, 899, 900, -1, 900, 933, 932, -1, 933, 900, 901, -1, 901, 934, 933, -1, 934, 901, 902, -1, 902, 935, 934, -1, 935, 902, 903, -1, 903, 936, 935, -1, 936, 903, 904, -1, 904, 937, 936, -1, 937, 904, 905, -1, 905, 938, 937, -1, 938, 905, 906, -1, 906, 939, 938, -1, 939, 906, 907, -1, 907, 940, 939, -1, 940, 907, 908, -1, 908, 941, 940, -1, 908, 909, 942, -1, 942, 941, 908, -1, 909, 910, 943, -1, 943, 942, 909, -1, 910, 911, 944, -1, 944, 943, 910, -1, 911, 912, 945, -1, 945, 944, 911, -1, 912, 913, 946, -1, 946, 945, 912, -1, 913, 914, 947, -1, 947, 946, 913, -1, 914, 915, 948, -1, 948, 947, 914, -1, 915, 916, 949, -1, 949, 948, 915, -1, 916, 917, 950, -1, 950, 949, 916, -1, 917, 918, 951, -1, 951, 950, 917, -1, 918, 919, 952, -1, 952, 951, 918, -1, 919, 920, 953, -1, 953, 952, 919, -1, 920, 921, 954, -1, 954, 953, 920, -1, 921, 922, 955, -1, 955, 954, 921, -1, 922, 923, 956, -1, 956, 955, 922, -1, 957, 924, 925, -1, 925, 958, 957, -1, 958, 925, 926, -1, 926, 959, 958, -1, 959, 926, 927, -1, 927, 960, 959, -1, 960, 927, 928, -1, 928, 961, 960, -1, 961, 928, 929, -1, 929, 962, 961, -1, 962, 929, 930, -1, 930, 963, 962, -1, 963, 930, 931, -1, 931, 964, 963, -1, 964, 931, 932, -1, 932, 965, 964, -1, 965, 932, 933, -1, 933, 966, 965, -1, 966, 933, 934, -1, 934, 967, 966, -1, 967, 934, 935, -1, 935, 968, 967, -1, 968, 935, 936, -1, 936, 969, 968, -1, 969, 936, 937, -1, 937, 970, 969, -1, 970, 937, 938, -1, 938, 971, 970, -1, 971, 938, 939, -1, 939, 972, 971, -1, 972, 939, 940, -1, 940, 973, 972, -1, 973, 940, 941, -1, 941, 974, 973, -1, 941, 942, 975, -1, 975, 974, 941, -1, 942, 943, 976, -1, 976, 975, 942, -1, 943, 944, 977, -1, 977, 976, 943, -1, 944, 945, 978, -1, 978, 977, 944, -1, 945, 946, 979, -1, 979, 978, 945, -1, 946, 947, 980, -1, 980, 979, 946, -1, 947, 948, 981, -1, 981, 980, 947, -1, 948, 949, 982, -1, 982, 981, 948, -1, 949, 950, 983, -1, 983, 982, 949, -1, 950, 951, 984, -1, 984, 983, 950, -1, 951, 952, 985, -1, 985, 984, 951, -1, 952, 953, 986, -1, 986, 985, 952, -1, 953, 954, 987, -1, 987, 986, 953, -1, 954, 955, 988, -1, 988, 987, 954, -1, 955, 956, 989, -1, 989, 988, 955, -1, 990, 957, 958, -1, 958, 991, 990, -1, 991, 958, 959, -1, 959, 992, 991, -1, 992, 959, 960, -1, 960, 993, 992, -1, 993, 960, 961, -1, 961, 994, 993, -1, 994, 961, 962, -1, 962, 995, 994, -1, 995, 962, 963, -1, 963, 996, 995, -1, 996, 963, 964, -1, 964, 997, 996, -1, 997, 964, 965, -1, 965, 998, 997, -1, 998, 965, 966, -1, 966, 999, 998, -1, 999, 966, 967, -1, 967, 1000, 999, -1, 1000, 967, 968, -1, 968, 1001, 1000, -1, 1001, 968, 969, -1, 969, 1002, 1001, -1, 1002, 969, 970, -1, 970, 1003, 1002, -1, 1003, 970, 971, -1, 971, 1004, 1003, -1, 1004, 971, 972, -1, 972, 1005, 1004, -1, 1005, 972, 973, -1, 973, 1006, 1005, -1, 1006, 973, 974, -1, 974, 1007, 1006, -1, 974, 975, 1008, -1, 1008, 1007, 974, -1, 975, 976, 1009, -1, 1009, 1008, 975, -1, 976, 977, 1010, -1, 1010, 1009, 976, -1, 977, 978, 1011, -1, 1011, 1010, 977, -1, 978, 979, 1012, -1, 1012, 1011, 978, -1, 979, 980, 1013, -1, 1013, 1012, 979, -1, 980, 981, 1014, -1, 1014, 1013, 980, -1, 981, 982, 1015, -1, 1015, 1014, 981, -1, 982, 983, 1016, -1, 1016, 1015, 982, -1, 983, 984, 1017, -1, 1017, 1016, 983, -1, 984, 985, 1018, -1, 1018, 1017, 984, -1, 985, 986, 1019, -1, 1019, 1018, 985, -1, 986, 987, 1020, -1, 1020, 1019, 986, -1, 987, 988, 1021, -1, 1021, 1020, 987, -1, 988, 989, 1022, -1, 1022, 1021, 988, -1, 1023, 990, 991, -1, 991, 1024, 1023, -1, 1024, 991, 992, -1, 992, 1025, 1024, -1, 1025, 992, 993, -1, 993, 1026, 1025, -1, 1026, 993, 994, -1, 994, 1027, 1026, -1, 1027, 994, 995, -1, 995, 1028, 1027, -1, 1028, 995, 996, -1, 996, 1029, 1028, -1, 1029, 996, 997, -1, 997, 1030, 1029, -1, 1030, 997, 998, -1, 998, 1031, 1030, -1, 1031, 998, 999, -1, 999, 1032, 1031, -1, 1032, 999, 1000, -1, 1000, 1033, 1032, -1, 1033, 1000, 1001, -1, 1001, 1034, 1033, -1, 1034, 1001, 1002, -1, 1002, 1035, 1034, -1, 1035, 1002, 1003, -1, 1003, 1036, 1035, -1, 1036, 1003, 1004, -1, 1004, 1037, 1036, -1, 1037, 1004, 1005, -1, 1005, 1038, 1037, -1, 1038, 1005, 1006, -1, 1006, 1039, 1038, -1, 1039, 1006, 1007, -1, 1007, 1040, 1039, -1, 1007, 1008, 1041, -1, 1041, 1040, 1007, -1, 1008, 1009, 1042, -1, 1042, 1041, 1008, -1, 1009, 1010, 1043, -1, 1043, 1042, 1009, -1, 1010, 1011, 1044, -1, 1044, 1043, 1010, -1, 1011, 1012, 1045, -1, 1045, 1044, 1011, -1, 1012, 1013, 1046, -1, 1046, 1045, 1012, -1, 1013, 1014, 1047, -1, 1047, 1046, 1013, -1, 1014, 1015, 1048, -1, 1048, 1047, 1014, -1, 1015, 1016, 1049, -1, 1049, 1048, 1015, -1, 1016, 1017, 1050, -1, 1050, 1049, 1016, -1, 1017, 1018, 1051, -1, 1051, 1050, 1017, -1, 1018, 1019, 1052, -1, 1052, 1051, 1018, -1, 1019, 1020, 1053, -1, 1053, 1052, 1019, -1, 1020, 1021, 1054, -1, 1054, 1053, 1020, -1, 1021, 1022, 1055, -1, 1055, 1054, 1021, -1, 1056, 1023, 1024, -1, 1057, 1024, 1025, -1, 1058, 1025, 1026, -1, 1059, 1026, 1027, -1, 1060, 1027, 1028, -1, 1061, 1028, 1029, -1, 1062, 1029, 1030, -1, 1063, 1030, 1031, -1, 1064, 1031, 1032, -1, 1065, 1032, 1033, -1, 1066, 1033, 1034, -1, 1067, 1034, 1035, -1, 1068, 1035, 1036, -1, 1069, 1036, 1037, -1, 1070, 1037, 1038, -1, 1071, 1038, 1039, -1, 1072, 1039, 1040, -1, 1040, 1041, 1074, -1, 1041, 1042, 1075, -1, 1042, 1043, 1076, -1, 1043, 1044, 1077, -1, 1044, 1045, 1078, -1, 1045, 1046, 1079, -1, 1046, 1047, 1080, -1, 1047, 1048, 1081, -1, 1048, 1049, 1082, -1, 1049, 1050, 1083, -1, 1050, 1051, 1084, -1, 1051, 1052, 1085, -1, 1052, 1053, 1086, -1, 1053, 1054, 1087, -1, 1054, 1055, 1088, -1 };
    self->NurbsSurface1.normalIndex = m_normalIndex;
    self->NurbsSurface1.normalIndex_length = sizeof(m_normalIndex) / sizeof(int);
    }
    self->NurbsSurface1.normalPerVertex = -1;
    self->NurbsSurface1.solid = -1;
    {
    static int m_texCoordIndex[] = { 1, 34, 33, -1, 2, 35, 34, -1, 3, 36, 35, -1, 4, 37, 36, -1, 5, 38, 37, -1, 6, 39, 38, -1, 7, 40, 39, -1, 8, 41, 40, -1, 9, 42, 41, -1, 10, 43, 42, -1, 11, 44, 43, -1, 12, 45, 44, -1, 13, 46, 45, -1, 14, 47, 46, -1, 15, 48, 47, -1, 16, 49, 48, -1, 17, 50, 49, -1, 51, 50, 17, -1, 52, 51, 18, -1, 53, 52, 19, -1, 54, 53, 20, -1, 55, 54, 21, -1, 56, 55, 22, -1, 57, 56, 23, -1, 58, 57, 24, -1, 59, 58, 25, -1, 60, 59, 26, -1, 61, 60, 27, -1, 62, 61, 28, -1, 63, 62, 29, -1, 64, 63, 30, -1, 65, 64, 31, -1, 66, 33, 34, -1, 34, 67, 66, -1, 67, 34, 35, -1, 35, 68, 67, -1, 68, 35, 36, -1, 36, 69, 68, -1, 69, 36, 37, -1, 37, 70, 69, -1, 70, 37, 38, -1, 38, 71, 70, -1, 71, 38, 39, -1, 39, 72, 71, -1, 72, 39, 40, -1, 40, 73, 72, -1, 73, 40, 41, -1, 41, 74, 73, -1, 74, 41, 42, -1, 42, 75, 74, -1, 75, 42, 43, -1, 43, 76, 75, -1, 76, 43, 44, -1, 44, 77, 76, -1, 77, 44, 45, -1, 45, 78, 77, -1, 78, 45, 46, -1, 46, 79, 78, -1, 79, 46, 47, -1, 47, 80, 79, -1, 80, 47, 48, -1, 48, 81, 80, -1, 81, 48, 49, -1, 49, 82, 81, -1, 82, 49, 50, -1, 50, 83, 82, -1, 50, 51, 84, -1, 84, 83, 50, -1, 51, 52, 85, -1, 85, 84, 51, -1, 52, 53, 86, -1, 86, 85, 52, -1, 53, 54, 87, -1, 87, 86, 53, -1, 54, 55, 88, -1, 88, 87, 54, -1, 55, 56, 89, -1, 89, 88, 55, -1, 56, 57, 90, -1, 90, 89, 56, -1, 57, 58, 91, -1, 91, 90, 57, -1, 58, 59, 92, -1, 92, 91, 58, -1, 59, 60, 93, -1, 93, 92, 59, -1, 60, 61, 94, -1, 94, 93, 60, -1, 61, 62, 95, -1, 95, 94, 61, -1, 62, 63, 96, -1, 96, 95, 62, -1, 63, 64, 97, -1, 97, 96, 63, -1, 64, 65, 98, -1, 98, 97, 64, -1, 99, 66, 67, -1, 67, 100, 99, -1, 100, 67, 68, -1, 68, 101, 100, -1, 101, 68, 69, -1, 69, 102, 101, -1, 102, 69, 70, -1, 70, 103, 102, -1, 103, 70, 71, -1, 71, 104, 103, -1, 104, 71, 72, -1, 72, 105, 104, -1, 105, 72, 73, -1, 73, 106, 105, -1, 106, 73, 74, -1, 74, 107, 106, -1, 107, 74, 75, -1, 75, 108, 107, -1, 108, 75, 76, -1, 76, 109, 108, -1, 109, 76, 77, -1, 77, 110, 109, -1, 110, 77, 78, -1, 78, 111, 110, -1, 111, 78, 79, -1, 79, 112, 111, -1, 112, 79, 80, -1, 80, 113, 112, -1, 113, 80, 81, -1, 81, 114, 113, -1, 114, 81, 82, -1, 82, 115, 114, -1, 115, 82, 83, -1, 83, 116, 115, -1, 83, 84, 117, -1, 117, 116, 83, -1, 84, 85, 118, -1, 118, 117, 84, -1, 85, 86, 119, -1, 119, 118, 85, -1, 86, 87, 120, -1, 120, 119, 86, -1, 87, 88, 121, -1, 121, 120, 87, -1, 88, 89, 122, -1, 122, 121, 88, -1, 89, 90, 123, -1, 123, 122, 89, -1, 90, 91, 124, -1, 124, 123, 90, -1, 91, 92, 125, -1, 125, 124, 91, -1, 92, 93, 126, -1, 126, 125, 92, -1, 93, 94, 127, -1, 127, 126, 93, -1, 94, 95, 128, -1, 128, 127, 94, -1, 95, 96, 129, -1, 129, 128, 95, -1, 96, 97, 130, -1, 130, 129, 96, -1, 97, 98, 131, -1, 131, 130, 97, -1, 132, 99, 100, -1, 100, 133, 132, -1, 133, 100, 101, -1, 101, 134, 133, -1, 134, 101, 102, -1, 102, 135, 134, -1, 135, 102, 103, -1, 103, 136, 135, -1, 136, 103, 104, -1, 104, 137, 136, -1, 137, 104, 105, -1, 105, 138, 137, -1, 138, 105, 106, -1, 106, 139, 138, -1, 139, 106, 107, -1, 107, 140, 139, -1, 140, 107, 108, -1, 108, 141, 140, -1, 141, 108, 109, -1, 109, 142, 141, -1, 142, 109, 110, -1, 110, 143, 142, -1, 143, 110, 111, -1, 111, 144, 143, -1, 144, 111, 112, -1, 112, 145, 144, -1, 145, 112, 113, -1, 113, 146, 145, -1, 146, 113, 114, -1, 114, 147, 146, -1, 147, 114, 115, -1, 115, 148, 147, -1, 148, 115, 116, -1, 116, 149, 148, -1, 116, 117, 150, -1, 150, 149, 116, -1, 117, 118, 151, -1, 151, 150, 117, -1, 118, 119, 152, -1, 152, 151, 118, -1, 119, 120, 153, -1, 153, 152, 119, -1, 120, 121, 154, -1, 154, 153, 120, -1, 121, 122, 155, -1, 155, 154, 121, -1, 122, 123, 156, -1, 156, 155, 122, -1, 123, 124, 157, -1, 157, 156, 123, -1, 124, 125, 158, -1, 158, 157, 124, -1, 125, 126, 159, -1, 159, 158, 125, -1, 126, 127, 160, -1, 160, 159, 126, -1, 127, 128, 161, -1, 161, 160, 127, -1, 128, 129, 162, -1, 162, 161, 128, -1, 129, 130, 163, -1, 163, 162, 129, -1, 130, 131, 164, -1, 164, 163, 130, -1, 165, 132, 133, -1, 133, 166, 165, -1, 166, 133, 134, -1, 134, 167, 166, -1, 167, 134, 135, -1, 135, 168, 167, -1, 168, 135, 136, -1, 136, 169, 168, -1, 169, 136, 137, -1, 137, 170, 169, -1, 170, 137, 138, -1, 138, 171, 170, -1, 171, 138, 139, -1, 139, 172, 171, -1, 172, 139, 140, -1, 140, 173, 172, -1, 173, 140, 141, -1, 141, 174, 173, -1, 174, 141, 142, -1, 142, 175, 174, -1, 175, 142, 143, -1, 143, 176, 175, -1, 176, 143, 144, -1, 144, 177, 176, -1, 177, 144, 145, -1, 145, 178, 177, -1, 178, 145, 146, -1, 146, 179, 178, -1, 179, 146, 147, -1, 147, 180, 179, -1, 180, 147, 148, -1, 148, 181, 180, -1, 181, 148, 149, -1, 149, 182, 181, -1, 149, 150, 183, -1, 183, 182, 149, -1, 150, 151, 184, -1, 184, 183, 150, -1, 151, 152, 185, -1, 185, 184, 151, -1, 152, 153, 186, -1, 186, 185, 152, -1, 153, 154, 187, -1, 187, 186, 153, -1, 154, 155, 188, -1, 188, 187, 154, -1, 155, 156, 189, -1, 189, 188, 155, -1, 156, 157, 190, -1, 190, 189, 156, -1, 157, 158, 191, -1, 191, 190, 157, -1, 158, 159, 192, -1, 192, 191, 158, -1, 159, 160, 193, -1, 193, 192, 159, -1, 160, 161, 194, -1, 194, 193, 160, -1, 161, 162, 195, -1, 195, 194, 161, -1, 162, 163, 196, -1, 196, 195, 162, -1, 163, 164, 197, -1, 197, 196, 163, -1, 198, 165, 166, -1, 166, 199, 198, -1, 199, 166, 167, -1, 167, 200, 199, -1, 200, 167, 168, -1, 168, 201, 200, -1, 201, 168, 169, -1, 169, 202, 201, -1, 202, 169, 170, -1, 170, 203, 202, -1, 203, 170, 171, -1, 171, 204, 203, -1, 204, 171, 172, -1, 172, 205, 204, -1, 205, 172, 173, -1, 173, 206, 205, -1, 206, 173, 174, -1, 174, 207, 206, -1, 207, 174, 175, -1, 175, 208, 207, -1, 208, 175, 176, -1, 176, 209, 208, -1, 209, 176, 177, -1, 177, 210, 209, -1, 210, 177, 178, -1, 178, 211, 210, -1, 211, 178, 179, -1, 179, 212, 211, -1, 212, 179, 180, -1, 180, 213, 212, -1, 213, 180, 181, -1, 181, 214, 213, -1, 214, 181, 182, -1, 182, 215, 214, -1, 182, 183, 216, -1, 216, 215, 182, -1, 183, 184, 217, -1, 217, 216, 183, -1, 184, 185, 218, -1, 218, 217, 184, -1, 185, 186, 219, -1, 219, 218, 185, -1, 186, 187, 220, -1, 220, 219, 186, -1, 187, 188, 221, -1, 221, 220, 187, -1, 188, 189, 222, -1, 222, 221, 188, -1, 189, 190, 223, -1, 223, 222, 189, -1, 190, 191, 224, -1, 224, 223, 190, -1, 191, 192, 225, -1, 225, 224, 191, -1, 192, 193, 226, -1, 226, 225, 192, -1, 193, 194, 227, -1, 227, 226, 193, -1, 194, 195, 228, -1, 228, 227, 194, -1, 195, 196, 229, -1, 229, 228, 195, -1, 196, 197, 230, -1, 230, 229, 196, -1, 231, 198, 199, -1, 199, 232, 231, -1, 232, 199, 200, -1, 200, 233, 232, -1, 233, 200, 201, -1, 201, 234, 233, -1, 234, 201, 202, -1, 202, 235, 234, -1, 235, 202, 203, -1, 203, 236, 235, -1, 236, 203, 204, -1, 204, 237, 236, -1, 237, 204, 205, -1, 205, 238, 237, -1, 238, 205, 206, -1, 206, 239, 238, -1, 239, 206, 207, -1, 207, 240, 239, -1, 240, 207, 208, -1, 208, 241, 240, -1, 241, 208, 209, -1, 209, 242, 241, -1, 242, 209, 210, -1, 210, 243, 242, -1, 243, 210, 211, -1, 211, 244, 243, -1, 244, 211, 212, -1, 212, 245, 244, -1, 245, 212, 213, -1, 213, 246, 245, -1, 246, 213, 214, -1, 214, 247, 246, -1, 247, 214, 215, -1, 215, 248, 247, -1, 215, 216, 249, -1, 249, 248, 215, -1, 216, 217, 250, -1, 250, 249, 216, -1, 217, 218, 251, -1, 251, 250, 217, -1, 218, 219, 252, -1, 252, 251, 218, -1, 219, 220, 253, -1, 253, 252, 219, -1, 220, 221, 254, -1, 254, 253, 220, -1, 221, 222, 255, -1, 255, 254, 221, -1, 222, 223, 256, -1, 256, 255, 222, -1, 223, 224, 257, -1, 257, 256, 223, -1, 224, 225, 258, -1, 258, 257, 224, -1, 225, 226, 259, -1, 259, 258, 225, -1, 226, 227, 260, -1, 260, 259, 226, -1, 227, 228, 261, -1, 261, 260, 227, -1, 228, 229, 262, -1, 262, 261, 228, -1, 229, 230, 263, -1, 263, 262, 229, -1, 264, 231, 232, -1, 232, 265, 264, -1, 265, 232, 233, -1, 233, 266, 265, -1, 266, 233, 234, -1, 234, 267, 266, -1, 267, 234, 235, -1, 235, 268, 267, -1, 268, 235, 236, -1, 236, 269, 268, -1, 269, 236, 237, -1, 237, 270, 269, -1, 270, 237, 238, -1, 238, 271, 270, -1, 271, 238, 239, -1, 239, 272, 271, -1, 272, 239, 240, -1, 240, 273, 272, -1, 273, 240, 241, -1, 241, 274, 273, -1, 274, 241, 242, -1, 242, 275, 274, -1, 275, 242, 243, -1, 243, 276, 275, -1, 276, 243, 244, -1, 244, 277, 276, -1, 277, 244, 245, -1, 245, 278, 277, -1, 278, 245, 246, -1, 246, 279, 278, -1, 279, 246, 247, -1, 247, 280, 279, -1, 280, 247, 248, -1, 248, 281, 280, -1, 248, 249, 282, -1, 282, 281, 248, -1, 249, 250, 283, -1, 283, 282, 249, -1, 250, 251, 284, -1, 284, 283, 250, -1, 251, 252, 285, -1, 285, 284, 251, -1, 252, 253, 286, -1, 286, 285, 252, -1, 253, 254, 287, -1, 287, 286, 253, -1, 254, 255, 288, -1, 288, 287, 254, -1, 255, 256, 289, -1, 289, 288, 255, -1, 256, 257, 290, -1, 290, 289, 256, -1, 257, 258, 291, -1, 291, 290, 257, -1, 258, 259, 292, -1, 292, 291, 258, -1, 259, 260, 293, -1, 293, 292, 259, -1, 260, 261, 294, -1, 294, 293, 260, -1, 261, 262, 295, -1, 295, 294, 261, -1, 262, 263, 296, -1, 296, 295, 262, -1, 297, 264, 265, -1, 265, 298, 297, -1, 298, 265, 266, -1, 266, 299, 298, -1, 299, 266, 267, -1, 267, 300, 299, -1, 300, 267, 268, -1, 268, 301, 300, -1, 301, 268, 269, -1, 269, 302, 301, -1, 302, 269, 270, -1, 270, 303, 302, -1, 303, 270, 271, -1, 271, 304, 303, -1, 304, 271, 272, -1, 272, 305, 304, -1, 305, 272, 273, -1, 273, 306, 305, -1, 306, 273, 274, -1, 274, 307, 306, -1, 307, 274, 275, -1, 275, 308, 307, -1, 308, 275, 276, -1, 276, 309, 308, -1, 309, 276, 277, -1, 277, 310, 309, -1, 310, 277, 278, -1, 278, 311, 310, -1, 311, 278, 279, -1, 279, 312, 311, -1, 312, 279, 280, -1, 280, 313, 312, -1, 313, 280, 281, -1, 281, 314, 313, -1, 281, 282, 315, -1, 315, 314, 281, -1, 282, 283, 316, -1, 316, 315, 282, -1, 283, 284, 317, -1, 317, 316, 283, -1, 284, 285, 318, -1, 318, 317, 284, -1, 285, 286, 319, -1, 319, 318, 285, -1, 286, 287, 320, -1, 320, 319, 286, -1, 287, 288, 321, -1, 321, 320, 287, -1, 288, 289, 322, -1, 322, 321, 288, -1, 289, 290, 323, -1, 323, 322, 289, -1, 290, 291, 324, -1, 324, 323, 290, -1, 291, 292, 325, -1, 325, 324, 291, -1, 292, 293, 326, -1, 326, 325, 292, -1, 293, 294, 327, -1, 327, 326, 293, -1, 294, 295, 328, -1, 328, 327, 294, -1, 295, 296, 329, -1, 329, 328, 295, -1, 330, 297, 298, -1, 298, 331, 330, -1, 331, 298, 299, -1, 299, 332, 331, -1, 332, 299, 300, -1, 300, 333, 332, -1, 333, 300, 301, -1, 301, 334, 333, -1, 334, 301, 302, -1, 302, 335, 334, -1, 335, 302, 303, -1, 303, 336, 335, -1, 336, 303, 304, -1, 304, 337, 336, -1, 337, 304, 305, -1, 305, 338, 337, -1, 338, 305, 306, -1, 306, 339, 338, -1, 339, 306, 307, -1, 307, 340, 339, -1, 340, 307, 308, -1, 308, 341, 340, -1, 341, 308, 309, -1, 309, 342, 341, -1, 342, 309, 310, -1, 310, 343, 342, -1, 343, 310, 311, -1, 311, 344, 343, -1, 344, 311, 312, -1, 312, 345, 344, -1, 345, 312, 313, -1, 313, 346, 345, -1, 346, 313, 314, -1, 314, 347, 346, -1, 314, 315, 348, -1, 348, 347, 314, -1, 315, 316, 349, -1, 349, 348, 315, -1, 316, 317, 350, -1, 350, 349, 316, -1, 317, 318, 351, -1, 351, 350, 317, -1, 318, 319, 352, -1, 352, 351, 318, -1, 319, 320, 353, -1, 353, 352, 319, -1, 320, 321, 354, -1, 354, 353, 320, -1, 321, 322, 355, -1, 355, 354, 321, -1, 322, 323, 356, -1, 356, 355, 322, -1, 323, 324, 357, -1, 357, 356, 323, -1, 324, 325, 358, -1, 358, 357, 324, -1, 325, 326, 359, -1, 359, 358, 325, -1, 326, 327, 360, -1, 360, 359, 326, -1, 327, 328, 361, -1, 361, 360, 327, -1, 328, 329, 362, -1, 362, 361, 328, -1, 363, 330, 331, -1, 331, 364, 363, -1, 364, 331, 332, -1, 332, 365, 364, -1, 365, 332, 333, -1, 333, 366, 365, -1, 366, 333, 334, -1, 334, 367, 366, -1, 367, 334, 335, -1, 335, 368, 367, -1, 368, 335, 336, -1, 336, 369, 368, -1, 369, 336, 337, -1, 337, 370, 369, -1, 370, 337, 338, -1, 338, 371, 370, -1, 371, 338, 339, -1, 339, 372, 371, -1, 372, 339, 340, -1, 340, 373, 372, -1, 373, 340, 341, -1, 341, 374, 373, -1, 374, 341, 342, -1, 342, 375, 374, -1, 375, 342, 343, -1, 343, 376, 375, -1, 376, 343, 344, -1, 344, 377, 376, -1, 377, 344, 345, -1, 345, 378, 377, -1, 378, 345, 346, -1, 346, 379, 378, -1, 379, 346, 347, -1, 347, 380, 379, -1, 347, 348, 381, -1, 381, 380, 347, -1, 348, 349, 382, -1, 382, 381, 348, -1, 349, 350, 383, -1, 383, 382, 349, -1, 350, 351, 384, -1, 384, 383, 350, -1, 351, 352, 385, -1, 385, 384, 351, -1, 352, 353, 386, -1, 386, 385, 352, -1, 353, 354, 387, -1, 387, 386, 353, -1, 354, 355, 388, -1, 388, 387, 354, -1, 355, 356, 389, -1, 389, 388, 355, -1, 356, 357, 390, -1, 390, 389, 356, -1, 357, 358, 391, -1, 391, 390, 357, -1, 358, 359, 392, -1, 392, 391, 358, -1, 359, 360, 393, -1, 393, 392, 359, -1, 360, 361, 394, -1, 394, 393, 360, -1, 361, 362, 395, -1, 395, 394, 361, -1, 396, 363, 364, -1, 364, 397, 396, -1, 397, 364, 365, -1, 365, 398, 397, -1, 398, 365, 366, -1, 366, 399, 398, -1, 399, 366, 367, -1, 367, 400, 399, -1, 400, 367, 368, -1, 368, 401, 400, -1, 401, 368, 369, -1, 369, 402, 401, -1, 402, 369, 370, -1, 370, 403, 402, -1, 403, 370, 371, -1, 371, 404, 403, -1, 404, 371, 372, -1, 372, 405, 404, -1, 405, 372, 373, -1, 373, 406, 405, -1, 406, 373, 374, -1, 374, 407, 406, -1, 407, 374, 375, -1, 375, 408, 407, -1, 408, 375, 376, -1, 376, 409, 408, -1, 409, 376, 377, -1, 377, 410, 409, -1, 410, 377, 378, -1, 378, 411, 410, -1, 411, 378, 379, -1, 379, 412, 411, -1, 412, 379, 380, -1, 380, 413, 412, -1, 380, 381, 414, -1, 414, 413, 380, -1, 381, 382, 415, -1, 415, 414, 381, -1, 382, 383, 416, -1, 416, 415, 382, -1, 383, 384, 417, -1, 417, 416, 383, -1, 384, 385, 418, -1, 418, 417, 384, -1, 385, 386, 419, -1, 419, 418, 385, -1, 386, 387, 420, -1, 420, 419, 386, -1, 387, 388, 421, -1, 421, 420, 387, -1, 388, 389, 422, -1, 422, 421, 388, -1, 389, 390, 423, -1, 423, 422, 389, -1, 390, 391, 424, -1, 424, 423, 390, -1, 391, 392, 425, -1, 425, 424, 391, -1, 392, 393, 426, -1, 426, 425, 392, -1, 393, 394, 427, -1, 427, 426, 393, -1, 394, 395, 428, -1, 428, 427, 394, -1, 429, 396, 397, -1, 397, 430, 429, -1, 430, 397, 398, -1, 398, 431, 430, -1, 431, 398, 399, -1, 399, 432, 431, -1, 432, 399, 400, -1, 400, 433, 432, -1, 433, 400, 401, -1, 401, 434, 433, -1, 434, 401, 402, -1, 402, 435, 434, -1, 435, 402, 403, -1, 403, 436, 435, -1, 436, 403, 404, -1, 404, 437, 436, -1, 437, 404, 405, -1, 405, 438, 437, -1, 438, 405, 406, -1, 406, 439, 438, -1, 439, 406, 407, -1, 407, 440, 439, -1, 440, 407, 408, -1, 408, 441, 440, -1, 441, 408, 409, -1, 409, 442, 441, -1, 442, 409, 410, -1, 410, 443, 442, -1, 443, 410, 411, -1, 411, 444, 443, -1, 444, 411, 412, -1, 412, 445, 444, -1, 445, 412, 413, -1, 413, 446, 445, -1, 413, 414, 447, -1, 447, 446, 413, -1, 414, 415, 448, -1, 448, 447, 414, -1, 415, 416, 449, -1, 449, 448, 415, -1, 416, 417, 450, -1, 450, 449, 416, -1, 417, 418, 451, -1, 451, 450, 417, -1, 418, 419, 452, -1, 452, 451, 418, -1, 419, 420, 453, -1, 453, 452, 419, -1, 420, 421, 454, -1, 454, 453, 420, -1, 421, 422, 455, -1, 455, 454, 421, -1, 422, 423, 456, -1, 456, 455, 422, -1, 423, 424, 457, -1, 457, 456, 423, -1, 424, 425, 458, -1, 458, 457, 424, -1, 425, 426, 459, -1, 459, 458, 425, -1, 426, 427, 460, -1, 460, 459, 426, -1, 427, 428, 461, -1, 461, 460, 427, -1, 462, 429, 430, -1, 430, 463, 462, -1, 463, 430, 431, -1, 431, 464, 463, -1, 464, 431, 432, -1, 432, 465, 464, -1, 465, 432, 433, -1, 433, 466, 465, -1, 466, 433, 434, -1, 434, 467, 466, -1, 467, 434, 435, -1, 435, 468, 467, -1, 468, 435, 436, -1, 436, 469, 468, -1, 469, 436, 437, -1, 437, 470, 469, -1, 470, 437, 438, -1, 438, 471, 470, -1, 471, 438, 439, -1, 439, 472, 471, -1, 472, 439, 440, -1, 440, 473, 472, -1, 473, 440, 441, -1, 441, 474, 473, -1, 474, 441, 442, -1, 442, 475, 474, -1, 475, 442, 443, -1, 443, 476, 475, -1, 476, 443, 444, -1, 444, 477, 476, -1, 477, 444, 445, -1, 445, 478, 477, -1, 478, 445, 446, -1, 446, 479, 478, -1, 446, 447, 480, -1, 480, 479, 446, -1, 447, 448, 481, -1, 481, 480, 447, -1, 448, 449, 482, -1, 482, 481, 448, -1, 449, 450, 483, -1, 483, 482, 449, -1, 450, 451, 484, -1, 484, 483, 450, -1, 451, 452, 485, -1, 485, 484, 451, -1, 452, 453, 486, -1, 486, 485, 452, -1, 453, 454, 487, -1, 487, 486, 453, -1, 454, 455, 488, -1, 488, 487, 454, -1, 455, 456, 489, -1, 489, 488, 455, -1, 456, 457, 490, -1, 490, 489, 456, -1, 457, 458, 491, -1, 491, 490, 457, -1, 458, 459, 492, -1, 492, 491, 458, -1, 459, 460, 493, -1, 493, 492, 459, -1, 460, 461, 494, -1, 494, 493, 460, -1, 495, 462, 463, -1, 463, 496, 495, -1, 496, 463, 464, -1, 464, 497, 496, -1, 497, 464, 465, -1, 465, 498, 497, -1, 498, 465, 466, -1, 466, 499, 498, -1, 499, 466, 467, -1, 467, 500, 499, -1, 500, 467, 468, -1, 468, 501, 500, -1, 501, 468, 469, -1, 469, 502, 501, -1, 502, 469, 470, -1, 470, 503, 502, -1, 503, 470, 471, -1, 471, 504, 503, -1, 504, 471, 472, -1, 472, 505, 504, -1, 505, 472, 473, -1, 473, 506, 505, -1, 506, 473, 474, -1, 474, 507, 506, -1, 507, 474, 475, -1, 475, 508, 507, -1, 508, 475, 476, -1, 476, 509, 508, -1, 509, 476, 477, -1, 477, 510, 509, -1, 510, 477, 478, -1, 478, 511, 510, -1, 511, 478, 479, -1, 479, 512, 511, -1, 479, 480, 513, -1, 513, 512, 479, -1, 480, 481, 514, -1, 514, 513, 480, -1, 481, 482, 515, -1, 515, 514, 481, -1, 482, 483, 516, -1, 516, 515, 482, -1, 483, 484, 517, -1, 517, 516, 483, -1, 484, 485, 518, -1, 518, 517, 484, -1, 485, 486, 519, -1, 519, 518, 485, -1, 486, 487, 520, -1, 520, 519, 486, -1, 487, 488, 521, -1, 521, 520, 487, -1, 488, 489, 522, -1, 522, 521, 488, -1, 489, 490, 523, -1, 523, 522, 489, -1, 490, 491, 524, -1, 524, 523, 490, -1, 491, 492, 525, -1, 525, 524, 491, -1, 492, 493, 526, -1, 526, 525, 492, -1, 493, 494, 527, -1, 527, 526, 493, -1, 528, 495, 496, -1, 496, 529, 528, -1, 529, 496, 497, -1, 497, 530, 529, -1, 530, 497, 498, -1, 498, 531, 530, -1, 531, 498, 499, -1, 499, 532, 531, -1, 532, 499, 500, -1, 500, 533, 532, -1, 533, 500, 501, -1, 501, 534, 533, -1, 534, 501, 502, -1, 502, 535, 534, -1, 535, 502, 503, -1, 503, 536, 535, -1, 536, 503, 504, -1, 504, 537, 536, -1, 537, 504, 505, -1, 505, 538, 537, -1, 538, 505, 506, -1, 506, 539, 538, -1, 539, 506, 507, -1, 507, 540, 539, -1, 540, 507, 508, -1, 508, 541, 540, -1, 541, 508, 509, -1, 509, 542, 541, -1, 542, 509, 510, -1, 510, 543, 542, -1, 543, 510, 511, -1, 511, 544, 543, -1, 544, 511, 512, -1, 512, 545, 544, -1, 512, 513, 546, -1, 546, 545, 512, -1, 513, 514, 547, -1, 547, 546, 513, -1, 514, 515, 548, -1, 548, 547, 514, -1, 515, 516, 549, -1, 549, 548, 515, -1, 516, 517, 550, -1, 550, 549, 516, -1, 517, 518, 551, -1, 551, 550, 517, -1, 518, 519, 552, -1, 552, 551, 518, -1, 519, 520, 553, -1, 553, 552, 519, -1, 520, 521, 554, -1, 554, 553, 520, -1, 521, 522, 555, -1, 555, 554, 521, -1, 522, 523, 556, -1, 556, 555, 522, -1, 523, 524, 557, -1, 557, 556, 523, -1, 524, 525, 558, -1, 558, 557, 524, -1, 525, 526, 559, -1, 559, 558, 525, -1, 526, 527, 560, -1, 560, 559, 526, -1, 561, 528, 529, -1, 529, 562, 561, -1, 562, 529, 530, -1, 530, 563, 562, -1, 563, 530, 531, -1, 531, 564, 563, -1, 564, 531, 532, -1, 532, 565, 564, -1, 565, 532, 533, -1, 533, 566, 565, -1, 566, 533, 534, -1, 534, 567, 566, -1, 567, 534, 535, -1, 535, 568, 567, -1, 568, 535, 536, -1, 536, 569, 568, -1, 569, 536, 537, -1, 537, 570, 569, -1, 570, 537, 538, -1, 538, 571, 570, -1, 571, 538, 539, -1, 539, 572, 571, -1, 572, 539, 540, -1, 540, 573, 572, -1, 573, 540, 541, -1, 541, 574, 573, -1, 574, 541, 542, -1, 542, 575, 574, -1, 575, 542, 543, -1, 543, 576, 575, -1, 576, 543, 544, -1, 544, 577, 576, -1, 577, 544, 545, -1, 545, 578, 577, -1, 545, 546, 579, -1, 579, 578, 545, -1, 546, 547, 580, -1, 580, 579, 546, -1, 547, 548, 581, -1, 581, 580, 547, -1, 548, 549, 582, -1, 582, 581, 548, -1, 549, 550, 583, -1, 583, 582, 549, -1, 550, 551, 584, -1, 584, 583, 550, -1, 551, 552, 585, -1, 585, 584, 551, -1, 552, 553, 586, -1, 586, 585, 552, -1, 553, 554, 587, -1, 587, 586, 553, -1, 554, 555, 588, -1, 588, 587, 554, -1, 555, 556, 589, -1, 589, 588, 555, -1, 556, 557, 590, -1, 590, 589, 556, -1, 557, 558, 591, -1, 591, 590, 557, -1, 558, 559, 592, -1, 592, 591, 558, -1, 559, 560, 593, -1, 593, 592, 559, -1, 594, 561, 562, -1, 562, 595, 594, -1, 595, 562, 563, -1, 563, 596, 595, -1, 596, 563, 564, -1, 564, 597, 596, -1, 597, 564, 565, -1, 565, 598, 597, -1, 598, 565, 566, -1, 566, 599, 598, -1, 599, 566, 567, -1, 567, 600, 599, -1, 600, 567, 568, -1, 568, 601, 600, -1, 601, 568, 569, -1, 569, 602, 601, -1, 602, 569, 570, -1, 570, 603, 602, -1, 603, 570, 571, -1, 571, 604, 603, -1, 604, 571, 572, -1, 572, 605, 604, -1, 605, 572, 573, -1, 573, 606, 605, -1, 606, 573, 574, -1, 574, 607, 606, -1, 607, 574, 575, -1, 575, 608, 607, -1, 608, 575, 576, -1, 576, 609, 608, -1, 609, 576, 577, -1, 577, 610, 609, -1, 610, 577, 578, -1, 578, 611, 610, -1, 578, 579, 612, -1, 612, 611, 578, -1, 579, 580, 613, -1, 613, 612, 579, -1, 580, 581, 614, -1, 614, 613, 580, -1, 581, 582, 615, -1, 615, 614, 581, -1, 582, 583, 616, -1, 616, 615, 582, -1, 583, 584, 617, -1, 617, 616, 583, -1, 584, 585, 618, -1, 618, 617, 584, -1, 585, 586, 619, -1, 619, 618, 585, -1, 586, 587, 620, -1, 620, 619, 586, -1, 587, 588, 621, -1, 621, 620, 587, -1, 588, 589, 622, -1, 622, 621, 588, -1, 589, 590, 623, -1, 623, 622, 589, -1, 590, 591, 624, -1, 624, 623, 590, -1, 591, 592, 625, -1, 625, 624, 591, -1, 592, 593, 626, -1, 626, 625, 592, -1, 627, 594, 595, -1, 595, 628, 627, -1, 628, 595, 596, -1, 596, 629, 628, -1, 629, 596, 597, -1, 597, 630, 629, -1, 630, 597, 598, -1, 598, 631, 630, -1, 631, 598, 599, -1, 599, 632, 631, -1, 632, 599, 600, -1, 600, 633, 632, -1, 633, 600, 601, -1, 601, 634, 633, -1, 634, 601, 602, -1, 602, 635, 634, -1, 635, 602, 603, -1, 603, 636, 635, -1, 636, 603, 604, -1, 604, 637, 636, -1, 637, 604, 605, -1, 605, 638, 637, -1, 638, 605, 606, -1, 606, 639, 638, -1, 639, 606, 607, -1, 607, 640, 639, -1, 640, 607, 608, -1, 608, 641, 640, -1, 641, 608, 609, -1, 609, 642, 641, -1, 642, 609, 610, -1, 610, 643, 642, -1, 643, 610, 611, -1, 611, 644, 643, -1, 611, 612, 645, -1, 645, 644, 611, -1, 612, 613, 646, -1, 646, 645, 612, -1, 613, 614, 647, -1, 647, 646, 613, -1, 614, 615, 648, -1, 648, 647, 614, -1, 615, 616, 649, -1, 649, 648, 615, -1, 616, 617, 650, -1, 650, 649, 616, -1, 617, 618, 651, -1, 651, 650, 617, -1, 618, 619, 652, -1, 652, 651, 618, -1, 619, 620, 653, -1, 653, 652, 619, -1, 620, 621, 654, -1, 654, 653, 620, -1, 621, 622, 655, -1, 655, 654, 621, -1, 622, 623, 656, -1, 656, 655, 622, -1, 623, 624, 657, -1, 657, 656, 623, -1, 624, 625, 658, -1, 658, 657, 624, -1, 625, 626, 659, -1, 659, 658, 625, -1, 660, 627, 628, -1, 628, 661, 660, -1, 661, 628, 629, -1, 629, 662, 661, -1, 662, 629, 630, -1, 630, 663, 662, -1, 663, 630, 631, -1, 631, 664, 663, -1, 664, 631, 632, -1, 632, 665, 664, -1, 665, 632, 633, -1, 633, 666, 665, -1, 666, 633, 634, -1, 634, 667, 666, -1, 667, 634, 635, -1, 635, 668, 667, -1, 668, 635, 636, -1, 636, 669, 668, -1, 669, 636, 637, -1, 637, 670, 669, -1, 670, 637, 638, -1, 638, 671, 670, -1, 671, 638, 639, -1, 639, 672, 671, -1, 672, 639, 640, -1, 640, 673, 672, -1, 673, 640, 641, -1, 641, 674, 673, -1, 674, 641, 642, -1, 642, 675, 674, -1, 675, 642, 643, -1, 643, 676, 675, -1, 676, 643, 644, -1, 644, 677, 676, -1, 644, 645, 678, -1, 678, 677, 644, -1, 645, 646, 679, -1, 679, 678, 645, -1, 646, 647, 680, -1, 680, 679, 646, -1, 647, 648, 681, -1, 681, 680, 647, -1, 648, 649, 682, -1, 682, 681, 648, -1, 649, 650, 683, -1, 683, 682, 649, -1, 650, 651, 684, -1, 684, 683, 650, -1, 651, 652, 685, -1, 685, 684, 651, -1, 652, 653, 686, -1, 686, 685, 652, -1, 653, 654, 687, -1, 687, 686, 653, -1, 654, 655, 688, -1, 688, 687, 654, -1, 655, 656, 689, -1, 689, 688, 655, -1, 656, 657, 690, -1, 690, 689, 656, -1, 657, 658, 691, -1, 691, 690, 657, -1, 658, 659, 692, -1, 692, 691, 658, -1, 693, 660, 661, -1, 661, 694, 693, -1, 694, 661, 662, -1, 662, 695, 694, -1, 695, 662, 663, -1, 663, 696, 695, -1, 696, 663, 664, -1, 664, 697, 696, -1, 697, 664, 665, -1, 665, 698, 697, -1, 698, 665, 666, -1, 666, 699, 698, -1, 699, 666, 667, -1, 667, 700, 699, -1, 700, 667, 668, -1, 668, 701, 700, -1, 701, 668, 669, -1, 669, 702, 701, -1, 702, 669, 670, -1, 670, 703, 702, -1, 703, 670, 671, -1, 671, 704, 703, -1, 704, 671, 672, -1, 672, 705, 704, -1, 705, 672, 673, -1, 673, 706, 705, -1, 706, 673, 674, -1, 674, 707, 706, -1, 707, 674, 675, -1, 675, 708, 707, -1, 708, 675, 676, -1, 676, 709, 708, -1, 709, 676, 677, -1, 677, 710, 709, -1, 677, 678, 711, -1, 711, 710, 677, -1, 678, 679, 712, -1, 712, 711, 678, -1, 679, 680, 713, -1, 713, 712, 679, -1, 680, 681, 714, -1, 714, 713, 680, -1, 681, 682, 715, -1, 715, 714, 681, -1, 682, 683, 716, -1, 716, 715, 682, -1, 683, 684, 717, -1, 717, 716, 683, -1, 684, 685, 718, -1, 718, 717, 684, -1, 685, 686, 719, -1, 719, 718, 685, -1, 686, 687, 720, -1, 720, 719, 686, -1, 687, 688, 721, -1, 721, 720, 687, -1, 688, 689, 722, -1, 722, 721, 688, -1, 689, 690, 723, -1, 723, 722, 689, -1, 690, 691, 724, -1, 724, 723, 690, -1, 691, 692, 725, -1, 725, 724, 691, -1, 726, 693, 694, -1, 694, 727, 726, -1, 727, 694, 695, -1, 695, 728, 727, -1, 728, 695, 696, -1, 696, 729, 728, -1, 729, 696, 697, -1, 697, 730, 729, -1, 730, 697, 698, -1, 698, 731, 730, -1, 731, 698, 699, -1, 699, 732, 731, -1, 732, 699, 700, -1, 700, 733, 732, -1, 733, 700, 701, -1, 701, 734, 733, -1, 734, 701, 702, -1, 702, 735, 734, -1, 735, 702, 703, -1, 703, 736, 735, -1, 736, 703, 704, -1, 704, 737, 736, -1, 737, 704, 705, -1, 705, 738, 737, -1, 738, 705, 706, -1, 706, 739, 738, -1, 739, 706, 707, -1, 707, 740, 739, -1, 740, 707, 708, -1, 708, 741, 740, -1, 741, 708, 709, -1, 709, 742, 741, -1, 742, 709, 710, -1, 710, 743, 742, -1, 710, 711, 744, -1, 744, 743, 710, -1, 711, 712, 745, -1, 745, 744, 711, -1, 712, 713, 746, -1, 746, 745, 712, -1, 713, 714, 747, -1, 747, 746, 713, -1, 714, 715, 748, -1, 748, 747, 714, -1, 715, 716, 749, -1, 749, 748, 715, -1, 716, 717, 750, -1, 750, 749, 716, -1, 717, 718, 751, -1, 751, 750, 717, -1, 718, 719, 752, -1, 752, 751, 718, -1, 719, 720, 753, -1, 753, 752, 719, -1, 720, 721, 754, -1, 754, 753, 720, -1, 721, 722, 755, -1, 755, 754, 721, -1, 722, 723, 756, -1, 756, 755, 722, -1, 723, 724, 757, -1, 757, 756, 723, -1, 724, 725, 758, -1, 758, 757, 724, -1, 759, 726, 727, -1, 727, 760, 759, -1, 760, 727, 728, -1, 728, 761, 760, -1, 761, 728, 729, -1, 729, 762, 761, -1, 762, 729, 730, -1, 730, 763, 762, -1, 763, 730, 731, -1, 731, 764, 763, -1, 764, 731, 732, -1, 732, 765, 764, -1, 765, 732, 733, -1, 733, 766, 765, -1, 766, 733, 734, -1, 734, 767, 766, -1, 767, 734, 735, -1, 735, 768, 767, -1, 768, 735, 736, -1, 736, 769, 768, -1, 769, 736, 737, -1, 737, 770, 769, -1, 770, 737, 738, -1, 738, 771, 770, -1, 771, 738, 739, -1, 739, 772, 771, -1, 772, 739, 740, -1, 740, 773, 772, -1, 773, 740, 741, -1, 741, 774, 773, -1, 774, 741, 742, -1, 742, 775, 774, -1, 775, 742, 743, -1, 743, 776, 775, -1, 743, 744, 777, -1, 777, 776, 743, -1, 744, 745, 778, -1, 778, 777, 744, -1, 745, 746, 779, -1, 779, 778, 745, -1, 746, 747, 780, -1, 780, 779, 746, -1, 747, 748, 781, -1, 781, 780, 747, -1, 748, 749, 782, -1, 782, 781, 748, -1, 749, 750, 783, -1, 783, 782, 749, -1, 750, 751, 784, -1, 784, 783, 750, -1, 751, 752, 785, -1, 785, 784, 751, -1, 752, 753, 786, -1, 786, 785, 752, -1, 753, 754, 787, -1, 787, 786, 753, -1, 754, 755, 788, -1, 788, 787, 754, -1, 755, 756, 789, -1, 789, 788, 755, -1, 756, 757, 790, -1, 790, 789, 756, -1, 757, 758, 791, -1, 791, 790, 757, -1, 792, 759, 760, -1, 760, 793, 792, -1, 793, 760, 761, -1, 761, 794, 793, -1, 794, 761, 762, -1, 762, 795, 794, -1, 795, 762, 763, -1, 763, 796, 795, -1, 796, 763, 764, -1, 764, 797, 796, -1, 797, 764, 765, -1, 765, 798, 797, -1, 798, 765, 766, -1, 766, 799, 798, -1, 799, 766, 767, -1, 767, 800, 799, -1, 800, 767, 768, -1, 768, 801, 800, -1, 801, 768, 769, -1, 769, 802, 801, -1, 802, 769, 770, -1, 770, 803, 802, -1, 803, 770, 771, -1, 771, 804, 803, -1, 804, 771, 772, -1, 772, 805, 804, -1, 805, 772, 773, -1, 773, 806, 805, -1, 806, 773, 774, -1, 774, 807, 806, -1, 807, 774, 775, -1, 775, 808, 807, -1, 808, 775, 776, -1, 776, 809, 808, -1, 776, 777, 810, -1, 810, 809, 776, -1, 777, 778, 811, -1, 811, 810, 777, -1, 778, 779, 812, -1, 812, 811, 778, -1, 779, 780, 813, -1, 813, 812, 779, -1, 780, 781, 814, -1, 814, 813, 780, -1, 781, 782, 815, -1, 815, 814, 781, -1, 782, 783, 816, -1, 816, 815, 782, -1, 783, 784, 817, -1, 817, 816, 783, -1, 784, 785, 818, -1, 818, 817, 784, -1, 785, 786, 819, -1, 819, 818, 785, -1, 786, 787, 820, -1, 820, 819, 786, -1, 787, 788, 821, -1, 821, 820, 787, -1, 788, 789, 822, -1, 822, 821, 788, -1, 789, 790, 823, -1, 823, 822, 789, -1, 790, 791, 824, -1, 824, 823, 790, -1, 825, 792, 793, -1, 793, 826, 825, -1, 826, 793, 794, -1, 794, 827, 826, -1, 827, 794, 795, -1, 795, 828, 827, -1, 828, 795, 796, -1, 796, 829, 828, -1, 829, 796, 797, -1, 797, 830, 829, -1, 830, 797, 798, -1, 798, 831, 830, -1, 831, 798, 799, -1, 799, 832, 831, -1, 832, 799, 800, -1, 800, 833, 832, -1, 833, 800, 801, -1, 801, 834, 833, -1, 834, 801, 802, -1, 802, 835, 834, -1, 835, 802, 803, -1, 803, 836, 835, -1, 836, 803, 804, -1, 804, 837, 836, -1, 837, 804, 805, -1, 805, 838, 837, -1, 838, 805, 806, -1, 806, 839, 838, -1, 839, 806, 807, -1, 807, 840, 839, -1, 840, 807, 808, -1, 808, 841, 840, -1, 841, 808, 809, -1, 809, 842, 841, -1, 809, 810, 843, -1, 843, 842, 809, -1, 810, 811, 844, -1, 844, 843, 810, -1, 811, 812, 845, -1, 845, 844, 811, -1, 812, 813, 846, -1, 846, 845, 812, -1, 813, 814, 847, -1, 847, 846, 813, -1, 814, 815, 848, -1, 848, 847, 814, -1, 815, 816, 849, -1, 849, 848, 815, -1, 816, 817, 850, -1, 850, 849, 816, -1, 817, 818, 851, -1, 851, 850, 817, -1, 818, 819, 852, -1, 852, 851, 818, -1, 819, 820, 853, -1, 853, 852, 819, -1, 820, 821, 854, -1, 854, 853, 820, -1, 821, 822, 855, -1, 855, 854, 821, -1, 822, 823, 856, -1, 856, 855, 822, -1, 823, 824, 857, -1, 857, 856, 823, -1, 858, 825, 826, -1, 826, 859, 858, -1, 859, 826, 827, -1, 827, 860, 859, -1, 860, 827, 828, -1, 828, 861, 860, -1, 861, 828, 829, -1, 829, 862, 861, -1, 862, 829, 830, -1, 830, 863, 862, -1, 863, 830, 831, -1, 831, 864, 863, -1, 864, 831, 832, -1, 832, 865, 864, -1, 865, 832, 833, -1, 833, 866, 865, -1, 866, 833, 834, -1, 834, 867, 866, -1, 867, 834, 835, -1, 835, 868, 867, -1, 868, 835, 836, -1, 836, 869, 868, -1, 869, 836, 837, -1, 837, 870, 869, -1, 870, 837, 838, -1, 838, 871, 870, -1, 871, 838, 839, -1, 839, 872, 871, -1, 872, 839, 840, -1, 840, 873, 872, -1, 873, 840, 841, -1, 841, 874, 873, -1, 874, 841, 842, -1, 842, 875, 874, -1, 842, 843, 876, -1, 876, 875, 842, -1, 843, 844, 877, -1, 877, 876, 843, -1, 844, 845, 878, -1, 878, 877, 844, -1, 845, 846, 879, -1, 879, 878, 845, -1, 846, 847, 880, -1, 880, 879, 846, -1, 847, 848, 881, -1, 881, 880, 847, -1, 848, 849, 882, -1, 882, 881, 848, -1, 849, 850, 883, -1, 883, 882, 849, -1, 850, 851, 884, -1, 884, 883, 850, -1, 851, 852, 885, -1, 885, 884, 851, -1, 852, 853, 886, -1, 886, 885, 852, -1, 853, 854, 887, -1, 887, 886, 853, -1, 854, 855, 888, -1, 888, 887, 854, -1, 855, 856, 889, -1, 889, 888, 855, -1, 856, 857, 890, -1, 890, 889, 856, -1, 891, 858, 859, -1, 859, 892, 891, -1, 892, 859, 860, -1, 860, 893, 892, -1, 893, 860, 861, -1, 861, 894, 893, -1, 894, 861, 862, -1, 862, 895, 894, -1, 895, 862, 863, -1, 863, 896, 895, -1, 896, 863, 864, -1, 864, 897, 896, -1, 897, 864, 865, -1, 865, 898, 897, -1, 898, 865, 866, -1, 866, 899, 898, -1, 899, 866, 867, -1, 867, 900, 899, -1, 900, 867, 868, -1, 868, 901, 900, -1, 901, 868, 869, -1, 869, 902, 901, -1, 902, 869, 870, -1, 870, 903, 902, -1, 903, 870, 871, -1, 871, 904, 903, -1, 904, 871, 872, -1, 872, 905, 904, -1, 905, 872, 873, -1, 873, 906, 905, -1, 906, 873, 874, -1, 874, 907, 906, -1, 907, 874, 875, -1, 875, 908, 907, -1, 875, 876, 909, -1, 909, 908, 875, -1, 876, 877, 910, -1, 910, 909, 876, -1, 877, 878, 911, -1, 911, 910, 877, -1, 878, 879, 912, -1, 912, 911, 878, -1, 879, 880, 913, -1, 913, 912, 879, -1, 880, 881, 914, -1, 914, 913, 880, -1, 881, 882, 915, -1, 915, 914, 881, -1, 882, 883, 916, -1, 916, 915, 882, -1, 883, 884, 917, -1, 917, 916, 883, -1, 884, 885, 918, -1, 918, 917, 884, -1, 885, 886, 919, -1, 919, 918, 885, -1, 886, 887, 920, -1, 920, 919, 886, -1, 887, 888, 921, -1, 921, 920, 887, -1, 888, 889, 922, -1, 922, 921, 888, -1, 889, 890, 923, -1, 923, 922, 889, -1, 924, 891, 892, -1, 892, 925, 924, -1, 925, 892, 893, -1, 893, 926, 925, -1, 926, 893, 894, -1, 894, 927, 926, -1, 927, 894, 895, -1, 895, 928, 927, -1, 928, 895, 896, -1, 896, 929, 928, -1, 929, 896, 897, -1, 897, 930, 929, -1, 930, 897, 898, -1, 898, 931, 930, -1, 931, 898, 899, -1, 899, 932, 931, -1, 932, 899, 900, -1, 900, 933, 932, -1, 933, 900, 901, -1, 901, 934, 933, -1, 934, 901, 902, -1, 902, 935, 934, -1, 935, 902, 903, -1, 903, 936, 935, -1, 936, 903, 904, -1, 904, 937, 936, -1, 937, 904, 905, -1, 905, 938, 937, -1, 938, 905, 906, -1, 906, 939, 938, -1, 939, 906, 907, -1, 907, 940, 939, -1, 940, 907, 908, -1, 908, 941, 940, -1, 908, 909, 942, -1, 942, 941, 908, -1, 909, 910, 943, -1, 943, 942, 909, -1, 910, 911, 944, -1, 944, 943, 910, -1, 911, 912, 945, -1, 945, 944, 911, -1, 912, 913, 946, -1, 946, 945, 912, -1, 913, 914, 947, -1, 947, 946, 913, -1, 914, 915, 948, -1, 948, 947, 914, -1, 915, 916, 949, -1, 949, 948, 915, -1, 916, 917, 950, -1, 950, 949, 916, -1, 917, 918, 951, -1, 951, 950, 917, -1, 918, 919, 952, -1, 952, 951, 918, -1, 919, 920, 953, -1, 953, 952, 919, -1, 920, 921, 954, -1, 954, 953, 920, -1, 921, 922, 955, -1, 955, 954, 921, -1, 922, 923, 956, -1, 956, 955, 922, -1, 957, 924, 925, -1, 925, 958, 957, -1, 958, 925, 926, -1, 926, 959, 958, -1, 959, 926, 927, -1, 927, 960, 959, -1, 960, 927, 928, -1, 928, 961, 960, -1, 961, 928, 929, -1, 929, 962, 961, -1, 962, 929, 930, -1, 930, 963, 962, -1, 963, 930, 931, -1, 931, 964, 963, -1, 964, 931, 932, -1, 932, 965, 964, -1, 965, 932, 933, -1, 933, 966, 965, -1, 966, 933, 934, -1, 934, 967, 966, -1, 967, 934, 935, -1, 935, 968, 967, -1, 968, 935, 936, -1, 936, 969, 968, -1, 969, 936, 937, -1, 937, 970, 969, -1, 970, 937, 938, -1, 938, 971, 970, -1, 971, 938, 939, -1, 939, 972, 971, -1, 972, 939, 940, -1, 940, 973, 972, -1, 973, 940, 941, -1, 941, 974, 973, -1, 941, 942, 975, -1, 975, 974, 941, -1, 942, 943, 976, -1, 976, 975, 942, -1, 943, 944, 977, -1, 977, 976, 943, -1, 944, 945, 978, -1, 978, 977, 944, -1, 945, 946, 979, -1, 979, 978, 945, -1, 946, 947, 980, -1, 980, 979, 946, -1, 947, 948, 981, -1, 981, 980, 947, -1, 948, 949, 982, -1, 982, 981, 948, -1, 949, 950, 983, -1, 983, 982, 949, -1, 950, 951, 984, -1, 984, 983, 950, -1, 951, 952, 985, -1, 985, 984, 951, -1, 952, 953, 986, -1, 986, 985, 952, -1, 953, 954, 987, -1, 987, 986, 953, -1, 954, 955, 988, -1, 988, 987, 954, -1, 955, 956, 989, -1, 989, 988, 955, -1, 990, 957, 958, -1, 958, 991, 990, -1, 991, 958, 959, -1, 959, 992, 991, -1, 992, 959, 960, -1, 960, 993, 992, -1, 993, 960, 961, -1, 961, 994, 993, -1, 994, 961, 962, -1, 962, 995, 994, -1, 995, 962, 963, -1, 963, 996, 995, -1, 996, 963, 964, -1, 964, 997, 996, -1, 997, 964, 965, -1, 965, 998, 997, -1, 998, 965, 966, -1, 966, 999, 998, -1, 999, 966, 967, -1, 967, 1000, 999, -1, 1000, 967, 968, -1, 968, 1001, 1000, -1, 1001, 968, 969, -1, 969, 1002, 1001, -1, 1002, 969, 970, -1, 970, 1003, 1002, -1, 1003, 970, 971, -1, 971, 1004, 1003, -1, 1004, 971, 972, -1, 972, 1005, 1004, -1, 1005, 972, 973, -1, 973, 1006, 1005, -1, 1006, 973, 974, -1, 974, 1007, 1006, -1, 974, 975, 1008, -1, 1008, 1007, 974, -1, 975, 976, 1009, -1, 1009, 1008, 975, -1, 976, 977, 1010, -1, 1010, 1009, 976, -1, 977, 978, 1011, -1, 1011, 1010, 977, -1, 978, 979, 1012, -1, 1012, 1011, 978, -1, 979, 980, 1013, -1, 1013, 1012, 979, -1, 980, 981, 1014, -1, 1014, 1013, 980, -1, 981, 982, 1015, -1, 1015, 1014, 981, -1, 982, 983, 1016, -1, 1016, 1015, 982, -1, 983, 984, 1017, -1, 1017, 1016, 983, -1, 984, 985, 1018, -1, 1018, 1017, 984, -1, 985, 986, 1019, -1, 1019, 1018, 985, -1, 986, 987, 1020, -1, 1020, 1019, 986, -1, 987, 988, 1021, -1, 1021, 1020, 987, -1, 988, 989, 1022, -1, 1022, 1021, 988, -1, 1023, 990, 991, -1, 991, 1024, 1023, -1, 1024, 991, 992, -1, 992, 1025, 1024, -1, 1025, 992, 993, -1, 993, 1026, 1025, -1, 1026, 993, 994, -1, 994, 1027, 1026, -1, 1027, 994, 995, -1, 995, 1028, 1027, -1, 1028, 995, 996, -1, 996, 1029, 1028, -1, 1029, 996, 997, -1, 997, 1030, 1029, -1, 1030, 997, 998, -1, 998, 1031, 1030, -1, 1031, 998, 999, -1, 999, 1032, 1031, -1, 1032, 999, 1000, -1, 1000, 1033, 1032, -1, 1033, 1000, 1001, -1, 1001, 1034, 1033, -1, 1034, 1001, 1002, -1, 1002, 1035, 1034, -1, 1035, 1002, 1003, -1, 1003, 1036, 1035, -1, 1036, 1003, 1004, -1, 1004, 1037, 1036, -1, 1037, 1004, 1005, -1, 1005, 1038, 1037, -1, 1038, 1005, 1006, -1, 1006, 1039, 1038, -1, 1039, 1006, 1007, -1, 1007, 1040, 1039, -1, 1007, 1008, 1041, -1, 1041, 1040, 1007, -1, 1008, 1009, 1042, -1, 1042, 1041, 1008, -1, 1009, 1010, 1043, -1, 1043, 1042, 1009, -1, 1010, 1011, 1044, -1, 1044, 1043, 1010, -1, 1011, 1012, 1045, -1, 1045, 1044, 1011, -1, 1012, 1013, 1046, -1, 1046, 1045, 1012, -1, 1013, 1014, 1047, -1, 1047, 1046, 1013, -1, 1014, 1015, 1048, -1, 1048, 1047, 1014, -1, 1015, 1016, 1049, -1, 1049, 1048, 1015, -1, 1016, 1017, 1050, -1, 1050, 1049, 1016, -1, 1017, 1018, 1051, -1, 1051, 1050, 1017, -1, 1018, 1019, 1052, -1, 1052, 1051, 1018, -1, 1019, 1020, 1053, -1, 1053, 1052, 1019, -1, 1020, 1021, 1054, -1, 1054, 1053, 1020, -1, 1021, 1022, 1055, -1, 1055, 1054, 1021, -1, 1056, 1023, 1024, -1, 1057, 1024, 1025, -1, 1058, 1025, 1026, -1, 1059, 1026, 1027, -1, 1060, 1027, 1028, -1, 1061, 1028, 1029, -1, 1062, 1029, 1030, -1, 1063, 1030, 1031, -1, 1064, 1031, 1032, -1, 1065, 1032, 1033, -1, 1066, 1033, 1034, -1, 1067, 1034, 1035, -1, 1068, 1035, 1036, -1, 1069, 1036, 1037, -1, 1070, 1037, 1038, -1, 1071, 1038, 1039, -1, 1072, 1039, 1040, -1, 1040, 1041, 1074, -1, 1041, 1042, 1075, -1, 1042, 1043, 1076, -1, 1043, 1044, 1077, -1, 1044, 1045, 1078, -1, 1045, 1046, 1079, -1, 1046, 1047, 1080, -1, 1047, 1048, 1081, -1, 1048, 1049, 1082, -1, 1049, 1050, 1083, -1, 1050, 1051, 1084, -1, 1051, 1052, 1085, -1, 1052, 1053, 1086, -1, 1053, 1054, 1087, -1, 1054, 1055, 1088, -1 };
    self->NurbsSurface1.texCoordIndex = m_texCoordIndex;
    self->NurbsSurface1.texCoordIndex_length = sizeof(m_texCoordIndex) / sizeof(int);
    }
    {
    static int m_set_colorIndex[1];
    self->NurbsSurface1.set_colorIndex = NULL;
    self->NurbsSurface1.set_colorIndex_length = 0;
    }
    {
    static int m_set_coordIndex[1];
    self->NurbsSurface1.set_coordIndex = NULL;
    self->NurbsSurface1.set_coordIndex_length = 0;
    }
    {
    static int m_set_normalIndex[1];
    self->NurbsSurface1.set_normalIndex = NULL;
    self->NurbsSurface1.set_normalIndex_length = 0;
    }
    {
    static int m_set_texCoordIndex[1];
    self->NurbsSurface1.set_texCoordIndex = NULL;
    self->NurbsSurface1.set_texCoordIndex_length = 0;
    }
    self->NurbsSurface1.m_type = 115;
    self->NurbsSurface1.m_data = NULL;
    self->Shape_5.appearance = &self->Appearance_6;
    self->Shape_5.geometry = &self->NurbsSurface1;
    self->Shape_5.m_type = 240;
    self->Shape_5.m_data = NULL;
    X3dTimeSensorInit(&self->TimeSensor1);
    self->TimeSensor1.m_parent = (X3dNode *)&self->Transform1;
    self->TimeSensor1.cycleInterval = 2;
    self->TimeSensor1.enabled = -1;
    self->TimeSensor1.loop = -1;
    self->TimeSensor1.startTime = 0;
    self->TimeSensor1.stopTime = 0;
    self->TimeSensor1.cycleTime = 0;
    self->TimeSensor1.fraction_changed = 0;
    self->TimeSensor1.isActive = 0;
    self->TimeSensor1.time = 0;
    self->TimeSensor1.m_type = 284;
    self->TimeSensor1.m_data = NULL;
    X3dCoordinateInterpolatorInit(&self->CoordinateInterpolator1);
    self->CoordinateInterpolator1.m_parent = (X3dNode *)&self->Transform1;
    {
    static float m_key[] = { 0, 1 };
    self->CoordinateInterpolator1.key = m_key;
    self->CoordinateInterpolator1.key_length = sizeof(m_key) / sizeof(float);
    }
    {
    static float m_keyValue[] = { 0, -1, 0, 0, -0.707107, 0, 0, -1, 0, 0, -0.707107, 0, 0, -1, 0, 0, -0.707107, 0, 0, -1, 0, 0, -0.707107, 0, 0, -1, 0, 0, -0.707107, -0.707107, -0.500000, -0.500000, -0.500000, -0.707107, -0.707107, 0, -0.500000, -0.500000, 0.500000, 0, -0.707107, 0.707107, 0.500000, -0.500000, 0.500000, 0.707107, -0.707107, 0, 0.500000, -0.500000, -0.500000, 0, -0.707107, -0.707107, 0, 0, -1, -0.707107, 0, -0.707107, -1, 0, 0, -0.707107, 0, 0.707107, 0, 0, 1, 0.707107, 0, 0.707107, 1, 0, 0, 0.707107, 0, -0.707107, 0, 0, -1, 0, 0.707107, -0.707107, -0.500000, 0.500000, -0.500000, -0.707107, 0.707107, 0, -0.500000, 0.500000, 0.500000, 0, 0.707107, 0.707107, 0.500000, 0.500000, 0.500000, 0.707107, 0.707107, 0, 0.500000, 0.500000, -0.500000, 0, 0.707107, -0.707107, 0, 1, 0, 0, 0.707107, 0, 0, 1, 0, 0, 0.707107, 0, 0, 1, 0, 0, 0.707107, 0, 0, 1, 0, 0, 0.707107, 0, 0, 1, 0, 0, -1.641960, -0.106933, 0, -1.161041, -0.075613, 0, -1.641960, -0.106933, 0, -1.161041, -0.075613, 0, -1.641960, -0.106933, 0, -1.161041, -0.075613, 0, -1.641960, -0.106933, 0, -1.161041, -0.075613, 0, -1.641960, -0.106933, 0, -1.306497, -0.738463, -0.263081, -0.410032, -0.503937, -0.372053, -0.579872, -0.005568, -0.263081, -0.410032, 0.496063, 0, -0.823694, 0.680927, 0.263081, -0.410032, 0.496063, 0.372053, -0.579872, -0.005568, 0.263081, -0.410032, -0.503937, 0, -1.306497, -0.738463, 0, 0, -1, -0.707107, 0, -0.707107, -1, 0, 0, -0.707107, 0, 0.707107, 0, 0, 1, 0.707107, 0, 0.707107, 1, 0, 0, 0.707107, 0, -0.707107, 0, 0, -1, 0, 0.707107, -0.707107, -1.307082, 1.195424, -0.500000, -1.848494, 1.690584, 0, -1.307082, 1.195424, 0.500000, 0, 0.707107, 0.707107, 1.307082, 1.195424, 0.500000, 1.848494, 1.690584, 0, 1.307082, 1.195424, -0.500000, 0, 0.707107, -0.707107, 0, 1, 0, 0, 0.707107, 0, 0, 1, 0, 0, 0.707107, 0, 0, 1, 0, 0, 0.707107, 0, 0, 1, 0, 0, 0.707107, 0, 0, 1, 0 };
    self->CoordinateInterpolator1.keyValue = m_keyValue;
    self->CoordinateInterpolator1.keyValue_length = sizeof(m_keyValue) / sizeof(float);
    }
    self->CoordinateInterpolator1.set_fraction = 0;
    {
    static float m_value_changed[1];
    self->CoordinateInterpolator1.value_changed = NULL;
    self->CoordinateInterpolator1.value_changed_length = 0;
    }
    self->CoordinateInterpolator1.m_type = 57;
    self->CoordinateInterpolator1.m_data = NULL;
    {
    static float m_rotation[4] = { 0, 0, 1, 0 };
    self->Transform1.rotation = m_rotation;
    self->Transform1.rotation_length = sizeof(m_rotation) / sizeof(float);
    }
    {
    static float m_translation[3] = { 0.398400, 9.165837e-2, -1.438946e-2 };
    self->Transform1.translation = m_translation;
    self->Transform1.translation_length = sizeof(m_translation) / sizeof(float);
    }
    {
    static float m_bboxCenter[3] = { 0, 0, 0 };
    self->Transform1.bboxCenter = m_bboxCenter;
    self->Transform1.bboxCenter_length = sizeof(m_bboxCenter) / sizeof(float);
    }
    {
    static float m_bboxSize[3] = { -1, -1, -1 };
    self->Transform1.bboxSize = m_bboxSize;
    self->Transform1.bboxSize_length = sizeof(m_bboxSize) / sizeof(float);
    }
    {
    static float m_center[3] = { 0, 0, 0 };
    self->Transform1.center = m_center;
    self->Transform1.center_length = sizeof(m_center) / sizeof(float);
    }
    {
    static float m_scale[3] = { 1, 1, 1 };
    self->Transform1.scale = m_scale;
    self->Transform1.scale_length = sizeof(m_scale) / sizeof(float);
    }
    {
    static float m_scaleOrientation[4] = { 0, 0, 1, 0 };
    self->Transform1.scaleOrientation = m_scaleOrientation;
    self->Transform1.scaleOrientation_length = sizeof(m_scaleOrientation) / sizeof(float);
    }
    {
    static X3dNode* m_children[3];
    m_children[0] =&self->Shape_5;
    m_children[1] =&self->TimeSensor1;
    m_children[2] =&self->CoordinateInterpolator1;
    self->Transform1.children = m_children;
    self->Transform1.children_length = sizeof(m_children) / sizeof(X3dNode*);
    }
    {
    static X3dNode* m_addChildren = NULL;
    self->Transform1.addChildren = NULL;
    self->Transform1.addChildren_length = 0;
    }
    {
    static X3dNode* m_removeChildren = NULL;
    self->Transform1.removeChildren = NULL;
    self->Transform1.removeChildren_length = 0;
    }
    self->Transform1.m_type = 289;
    self->Transform1.m_data = NULL;
    {
    static X3dNode* m_children[1];
    m_children[0] =&self->Transform1;
    self->root.children = m_children;
    self->root.children_length = sizeof(m_children) / sizeof(X3dNode*);
    }
    {
    static float m_bboxCenter[3] = { 0, 0, 0 };
    self->root.bboxCenter = m_bboxCenter;
    self->root.bboxCenter_length = sizeof(m_bboxCenter) / sizeof(float);
    }
    {
    static float m_bboxSize[3] = { -1, -1, -1 };
    self->root.bboxSize = m_bboxSize;
    self->root.bboxSize_length = sizeof(m_bboxSize) / sizeof(float);
    }
    {
    static X3dNode* m_addChildren = NULL;
    self->root.addChildren = NULL;
    self->root.addChildren_length = 0;
    }
    {
    static X3dNode* m_removeChildren = NULL;
    self->root.removeChildren = NULL;
    self->root.removeChildren_length = 0;
    }
    {
    self->root.m_type = 104;
    self->root.m_data = NULL;
    }

}

void X3dTreeRenderCallback(struct X3dNodeStruct *node, void *data) {
    switch(node->m_type) {
      case 289:
        if (X3dTransformTreeRenderCallback)
            X3dTransformTreeRenderCallback(node, data);
        else
            X3dTransformTreeRender(node, data);
        break;
      case 57:
        if (X3dCoordinateInterpolatorTreeRenderCallback)
            X3dCoordinateInterpolatorTreeRenderCallback(node, data);
        else
            X3dCoordinateInterpolatorTreeRender(node, data);
        break;
      case 115:
        if (X3dIndexedFaceSetTreeRenderCallback)
            X3dIndexedFaceSetTreeRenderCallback(node, data);
        else
            X3dIndexedFaceSetTreeRender(node, data);
        break;
      case 147:
        if (X3dMaterialTreeRenderCallback)
            X3dMaterialTreeRenderCallback(node, data);
        else
            X3dMaterialTreeRender(node, data);
        break;
      case 284:
        if (X3dTimeSensorTreeRenderCallback)
            X3dTimeSensorTreeRenderCallback(node, data);
        else
            X3dTimeSensorTreeRender(node, data);
        break;
      case 240:
        if (X3dShapeTreeRenderCallback)
            X3dShapeTreeRenderCallback(node, data);
        else
            X3dShapeTreeRender(node, data);
        break;
      case 168:
        if (X3dNormalInterpolatorTreeRenderCallback)
            X3dNormalInterpolatorTreeRenderCallback(node, data);
        else
            X3dNormalInterpolatorTreeRender(node, data);
        break;
      case 104:
        if (X3dGroupTreeRenderCallback)
            X3dGroupTreeRenderCallback(node, data);
        else
            X3dGroupTreeRender(node, data);
        break;
      case 1:
        if (X3dAppearanceTreeRenderCallback)
            X3dAppearanceTreeRenderCallback(node, data);
        else
            X3dAppearanceTreeRender(node, data);
        break;
    }
}

void X3dTreeDoWithDataCallback(struct X3dNodeStruct *node, void *data) {
    switch(node->m_type) {
      case 289:
        if (X3dTransformTreeDoWithDataCallback)
            X3dTransformTreeDoWithDataCallback(node, data);
        else
            X3dTransformTreeDoWithData(node, data);
        break;
      case 57:
        if (X3dCoordinateInterpolatorTreeDoWithDataCallback)
            X3dCoordinateInterpolatorTreeDoWithDataCallback(node, data);
        else
            X3dCoordinateInterpolatorTreeDoWithData(node, data);
        break;
      case 115:
        if (X3dIndexedFaceSetTreeDoWithDataCallback)
            X3dIndexedFaceSetTreeDoWithDataCallback(node, data);
        else
            X3dIndexedFaceSetTreeDoWithData(node, data);
        break;
      case 147:
        if (X3dMaterialTreeDoWithDataCallback)
            X3dMaterialTreeDoWithDataCallback(node, data);
        else
            X3dMaterialTreeDoWithData(node, data);
        break;
      case 284:
        if (X3dTimeSensorTreeDoWithDataCallback)
            X3dTimeSensorTreeDoWithDataCallback(node, data);
        else
            X3dTimeSensorTreeDoWithData(node, data);
        break;
      case 240:
        if (X3dShapeTreeDoWithDataCallback)
            X3dShapeTreeDoWithDataCallback(node, data);
        else
            X3dShapeTreeDoWithData(node, data);
        break;
      case 168:
        if (X3dNormalInterpolatorTreeDoWithDataCallback)
            X3dNormalInterpolatorTreeDoWithDataCallback(node, data);
        else
            X3dNormalInterpolatorTreeDoWithData(node, data);
        break;
      case 104:
        if (X3dGroupTreeDoWithDataCallback)
            X3dGroupTreeDoWithDataCallback(node, data);
        else
            X3dGroupTreeDoWithData(node, data);
        break;
      case 1:
        if (X3dAppearanceTreeDoWithDataCallback)
            X3dAppearanceTreeDoWithDataCallback(node, data);
        else
            X3dAppearanceTreeDoWithData(node, data);
        break;
    }
}

X3dNode *X3dGetNodeFromGlName(struct X3dSceneGraph *self, int glName) {
    switch (glName) {
       case 0:
         return &self->NurbsSurface1;
    }
    return NULL;
}
void X3dMFBoolSendEvent(short* target, short* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFColorSendEvent(float* target, float* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFColorRGBASendEvent(float* target, float* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFDoubleSendEvent(double* target, double* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFFloatSendEvent(float* target, float* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFInt32SendEvent(int* target, int* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFMatrix3fSendEvent(float* target, float* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFMatrix4fSendEvent(float* target, float* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFNodeSendEvent(X3dNode** target, X3dNode** source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFRotationSendEvent(float* target, float* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFStringSendEvent(const char** target, const char** source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFTimeSendEvent(double* target, double* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFVec2dSendEvent(double* target, double* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFVec2fSendEvent(float* target, float* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFVec3dSendEvent(double* target, double* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFVec3fSendEvent(float* target, float* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dMFVec4fSendEvent(float* target, float* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dSFBoolSendEvent(short* target, short source) {
    *target = source;
}
void X3dSFColorSendEvent(float* target, float* source) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < 3; i++)
        target[i] = source[i];
}
void X3dSFColorRGBASendEvent(float* target, float* source) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < 4; i++)
        target[i] = source[i];
}
void X3dSFDoubleSendEvent(double* target, double source) {
    *target = source;
}
void X3dSFFloatSendEvent(float* target, float source) {
    *target = source;
}
void X3dSFImageSendEvent(int* target, int* source, int size) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < size; i++)
        target[i] = source[i];
}
void X3dSFInt32SendEvent(int* target, int source) {
    *target = source;
}
void X3dSFMatrix3fSendEvent(float* target, float* source) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < 9; i++)
        target[i] = source[i];
}
void X3dSFMatrix4fSendEvent(float* target, float* source) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < 9; i++)
        target[i] = source[i];
}
void X3dSFNodeSendEvent(X3dNode** target, X3dNode* source) {
    *target = source;
}
void X3dSFRotationSendEvent(float* target, float* source) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < 4; i++)
        target[i] = source[i];
}
void X3dSFStringSendEvent(const char** target, const char* source) {
    *target = source;
}
void X3dSFTimeSendEvent(double* target, double source) {
    *target = source;
}
void X3dSFVec2dSendEvent(double* target, double* source) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < 2; i++)
        target[i] = source[i];
}
void X3dSFVec2fSendEvent(float* target, float* source) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < 2; i++)
        target[i] = source[i];
}
void X3dSFVec3dSendEvent(double* target, double* source) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < 3; i++)
        target[i] = source[i];
}
void X3dSFVec3fSendEvent(float* target, float* source) {
    int i;
    if ((target == NULL) || (source == NULL)) return;
    for (i = 0; i < 3; i++)
        target[i] = source[i];
}
void X3dProcessEvents(struct X3dSceneGraph *self, void *data) {
    int nextEvent = 0;
    if (X3dTimeSensorProcessEventCallback != NULL) {
        nextEvent = X3dTimeSensorProcessEventCallback(&self->TimeSensor1, "", data);
        if (nextEvent) {
            {
                X3dSFFloatSendEvent(&(self->CoordinateInterpolator1.set_fraction), self->TimeSensor1.fraction_changed);
                if (X3dCoordinateInterpolatorProcessEventCallback != NULL) {
                    nextEvent = X3dCoordinateInterpolatorProcessEventCallback(&self->CoordinateInterpolator1, "set_fraction", data);
                    if (nextEvent) {
                        {
                            X3dMFVec3fSendEvent(((struct X3dCoordinate *)self->NurbsSurface1..coord)->point, self->CoordinateInterpolator1.value_changed, self->CoordinateInterpolator1.value_changed_length);
                            if (X3dNurbsSurfaceProcessEventCallback != NULL) {
                                nextEvent = X3dNurbsSurfaceProcessEventCallback(&self->NurbsSurface1, "controlPoint", data);
                                if (nextEvent) {
                                }
                            }
                        }
                    }
                }
            }
            {
                X3dSFFloatSendEvent(&(self->CoordinateInterpolator_8.set_fraction), self->TimeSensor1.fraction_changed);
                if (X3dCoordinateInterpolatorProcessEventCallback != NULL) {
                    nextEvent = X3dCoordinateInterpolatorProcessEventCallback(&self->CoordinateInterpolator_8, "set_fraction", data);
                    if (nextEvent) {
                        {
                            X3dMFVec3fSendEvent(self->Coordinate_4.point, self->CoordinateInterpolator_8.value_changed, self->CoordinateInterpolator_8.value_changed_length);
                            if (X3dCoordinateProcessEventCallback != NULL) {
                                nextEvent = X3dCoordinateProcessEventCallback(&self->Coordinate_4, "point", data);
                                if (nextEvent) {
                                }
                            }
                        }
                    }
                }
            }
            {
                X3dSFFloatSendEvent(&(self->NormalInterpolator_9.set_fraction), self->TimeSensor1.fraction_changed);
                if (X3dNormalInterpolatorProcessEventCallback != NULL) {
                    nextEvent = X3dNormalInterpolatorProcessEventCallback(&self->NormalInterpolator_9, "set_fraction", data);
                    if (nextEvent) {
                        {
                            X3dMFVec3fSendEvent(self->Normal1.vector, self->NormalInterpolator_9.value_changed, self->NormalInterpolator_9.value_changed_length);
                            if (X3dNormalProcessEventCallback != NULL) {
                                nextEvent = X3dNormalProcessEventCallback(&self->Normal1, "vector", data);
                                if (nextEvent) {
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    reInitSensor(&(self->TimeSensor1));
}
