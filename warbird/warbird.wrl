#VRML V2.0 utf8

DEF Switch2 Switch {
  choice [
    Group {
      children [
        DEF BOX1_HIDE Transform {
          children 
            DEF BOX1_SWITCH Switch {
              choice 
                DEF BOX1_MOVE Transform {
                  scale 1.500000 1.500000 1.500000
                  children [
                    DEF BOX1_SENSOR TouchSensor {
                    }
                    Inline {
                      url "bill.wrl"
                    }
                  ]
                }
            }
        }
        DEF BOX1_HIT_CHECK Script {
          eventIn SFVec3f translation_in
          eventIn SFVec3f box_position
          eventOut SFInt32 deleted_out
          eventOut SFInt32 choice_out
          url [
            "javascript:
      function initialize()
         {
         choice_out=0;
         deleted_out=0;
         }
      function translation_in(val)  
         {
         if (!deleted)
            if (   (val[0]>=box[0]-boxsize/2) && (val[0]<=box[0]+boxsize/2)
                && (val[1]>=box[1]-boxsize/2) && (val[1]<=box[1]+boxsize/2)
                && (val[2]>=box[2]-boxsize/2) && (val[2]<=box[2]+boxsize/2)
               )
               {
               choice_out=1;
               deleted_out=1;
               deleted=1;
               }
            else
               choice_out=0;
         else
            choice_out=1;
         }
         
      function box_position(val)
         {
         box[0]=val[0];
         box[1]=val[1];
         box[2]=val[2];
         }  
      "
            "c++:
   X3dScript_BOX1_HIT_CHECK *self = (X3dScript_BOX1_HIT_CHECK *)node;
   static bool BOX1_HIT_CHECK_init = false;
   if (!BOX1_HIT_CHECK_init) {
       self->choice_out = 0;
       self->deleted_out = 0;
       BOX1_HIT_CHECK_init = true;
   } else if (!self->deleted) 
      {
      self->box[0] = self->box_position[0];
      self->box[1] = self->box_position[1];
      self->box[2] = self->box_position[2];
      if (
          (self->translation_in[0] >= self->box[0] - self->boxsize / 2) && 
          (self->translation_in[0] <= self->box[0] + self->boxsize / 2) && 
          (self->translation_in[1] >= self->box[1] - self->boxsize / 2) && 
          (self->translation_in[1] <= self->box[1] + self->boxsize / 2) && 
          (self->translation_in[2] >= self->box[2] - self->boxsize / 2) && 
          (self->translation_in[2] <= self->box[2] + self->boxsize / 2)
         )
         {
         self->choice_out = 1;
         self->deleted_out = 1;
         self->deleted = 1;
         }
      else
         self->choice_out = 0;
   }
   else
      self->choice_out = 1;
"
          ]
          field SFInt32           deleted 0
          field SFVec3f           box 1e4 1e4 1e4
          field SFFloat           boxsize 1.500000
        }
        DEF BOX1_MOVE_ON Script {
          eventIn SFVec3f translation_in
          eventOut SFVec3f translation_out
          url [
            "javascript:
      function nextsteps()
         {
         step_translation[0]=(Math.random()-0.5)*0.04;
         step_translation[1]=(Math.random()-0.5)*0.04;
         step_translation[2]=(Math.random()-0.5)*0.04;
         step=Math.random()*200+1;
         }
      function initialize()
         {
         translation_out[0]=Math.random()*8-4;
         translation_out[1]=Math.random()*6-3;
         translation_out[2]=Math.random()*-30-1;
         nextsteps();
         }
      function translation_in(val)  
         {
         step--;
         if (step<=0)
            nextsteps();
         if (   (translation_out[0]+step_translation[0]<4) 
             && (translation_out[0]+step_translation[0]>-4)) 
            translation_out[0]+=step_translation[0];
         if (   (translation_out[1]+step_translation[1]<3) 
             && (translation_out[1]+step_translation[1]>-3)) 
             translation_out[1]+=step_translation[1];
         if (   (translation_out[2]+step_translation[2]<-1) 
             && (translation_out[2]+step_translation[2]>-30)) 
            translation_out[2]+=step_translation[2];
         }
      "
            "c++:
   X3dScript_BOX1_MOVE_ON *self = (X3dScript_BOX1_MOVE_ON *)node;
   static bool BOX1_MOVE_ON_init = false;
   if (!BOX1_MOVE_ON_init) {
       self->translation_out[0] = ((float)rand()) / RAND_MAX * 8 - 4;
       self->translation_out[1] = ((float)rand()) / RAND_MAX * 6 - 3;
       self->translation_out[2] = ((float)rand()) / RAND_MAX * -30 - 1;
       BOX1_MOVE_ON_init = true;
   }         
   self->step_translation[0] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[1] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[2] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   if ((self->translation_out[0] + self->step_translation[0] < 4) && 
       (self->translation_out[0] + self->step_translation[0] > -4)) 
       self->translation_out[0] += self->step_translation[0];
   if ((self->translation_out[1] + self->step_translation[1] < 3) &&
       (self->translation_out[1] + self->step_translation[1] > -3)) 
       self->translation_out[1] += self->step_translation[1];
   if ((self->translation_out[2] + self->step_translation[2] < -1) && 
       (self->translation_out[2] + self->step_translation[2] > -30)) 
       self->translation_out[2] += self->step_translation[2];
"
          ]
          field SFVec3f           step_translation 0 0 0
          field SFInt32           step 0
        }
        DEF BOX1_HIDE_SCRIPT Script {
          eventIn SFBool isover_in
          eventOut SFVec3f hide_out
          url [
            "javascript:
   function isover_in(val)            
      {            
      if (val)
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=100;
         }
      else
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=0;
         }
      }    
   "
"c++:
   X3dScript_BOX1_HIDE_SCRIPT *self = (X3dScript_BOX1_HIDE_SCRIPT *)node;
   if (self->isover_in) {             
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 100;
   } else {
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 0;
   }
"
          ]
        }
        DEF STEER Script {
          eventIn SFVec3f wall_xy_in
          eventOut SFFloat xvalue
          eventOut SFFloat yvalue
          url [
            "javascript:
   function initialize()
      {
      }
/*
   function steer()
      {
      xvalue=wall_xy[0];
      yvalue=wall_xy[1];
      }
*/
   function wall_xy_in(val)
      {
      xvalue=val[0]/1.5;
      yvalue=val[1]/1.5;
      }
   "
            "c++:
   X3dScript_STEER *self = (X3dScript_STEER *)node;
   self->xvalue = -self->wall_xy_in[0] / 1.5;
   self->yvalue = self->wall_xy_in[1] / 1.5;
"
          ]
        }
        DEF WALL_SENSOR PlaneSensor {
          maxPosition 1e4 1e4
          minPosition -1e4 -1e4
        }
        DEF WALL_SENSOR2 TouchSensor {
        }
        DEF ROT_TRANS1 Script {
          eventIn SFVec3f translation_in
          eventIn SFRotation rotation_in
          eventOut MFString debug
          eventOut SFVec3f translation_out
          url [
            "javascript:
   function initialize()
      {
      translation_out[0]=0;
      translation_out[1]=0;
      translation_out[2]=0;
      }
// account vektorproduct c = a x b
   function vectorproduct(c,a,b)
      {
      c[0]=a[1]*b[2]-a[2]*b[1];
      c[1]=a[2]*b[0]-a[0]*b[2];
      c[2]=a[0]*b[1]-a[1]*b[0];
      }
// account scalarproduct a * b
   function scalarproduct(a,b)
      {
      return(a[0]*b[0]+a[1]*b[1]+a[2]*b[2]);
      }
// account quaternion multiplication a b
   function quaternionmult(c,a,b)
      {
      vectorproduct(c,a,b);
      c[0]=c[0]+a[3]*b[0]+b[3]*a[0];
      c[1]=c[1]+a[3]*b[1]+b[3]*a[1];
      c[2]=c[2]+a[3]*b[2]+b[3]*a[2];
      c[3]=a[3]*b[3]-scalarproduct(a,b);
      }             
// make rotation to quaternion with norm 1 
   function norm_quaternion_from_rotation(quad,rot)  
      {
      quad[3]=Math.cos(rot[3]/2.0);
      winkelkorrektur=Math.sin(rot[3]/2.0);
      quad[0]=rot[0]*winkelkorrektur;
      quad[1]=rot[1]*winkelkorrektur;
      quad[2]=rot[2]*winkelkorrektur;
      leng=Math.sqrt(quad[0]*quad[0]+quad[1]*quad[1]+quad[2]*quad[2]+
                     quad[3]*quad[3]);
      if (leng!=0)
         {
         quad[0]=quad[0]/leng;
         quad[1]=quad[1]/leng;
         quad[2]=quad[2]/leng;
         quad[3]=quad[3]/leng;
         }
      else
         {
         quad[0]=0;
         quad[1]=0;
         quad[2]=0;
         quad[3]=0;
         }
      }
   function rotation_in(val)  
      {
      rotation[0]=val[0];
      rotation[1]=val[1];
      rotation[2]=val[2];
      rotation[3]=val[3];
//            debug = new MFString(rotation);
      }
   function translation_in(val)  
      {
      norm_quaternion_from_rotation(quaternion1,rotation);
      quaternion2[0]=val[0];
      quaternion2[1]=val[1];
      quaternion2[2]=val[2];
      quaternion2[3]=0;
      quaternionmult(quaternion3,quaternion1,quaternion2);
      quaternion4[0]=-quaternion1[0];
      quaternion4[1]=-quaternion1[1];
      quaternion4[2]=-quaternion1[2];
      quaternion4[3]= quaternion1[3];
      quaternionmult(quaternion2,quaternion3,quaternion4);
      translation_out[0]=quaternion2[0];
      translation_out[1]=quaternion2[1];
      translation_out[2]=quaternion2[2];
      }
   "
            "c++:
   X3dScript_ROT_TRANS1 *self = (X3dScript_ROT_TRANS1 *)node;
   static bool ROT_TRANS1_init = false;
   if (!ROT_TRANS1_init) {
       self->translation_out[0] = 0;
       self->translation_out[1] = 0;
       self->translation_out[2] = 0;
       ROT_TRANS1_init = true;
   }         

// account quaternion multiplication a b
   extern void quaternionMult(float *c, float *a, float *b);
// make rotation to quaternion with norm 1 
   extern void norm_quaternion_from_rotation(float *quad, float *rot); 

   self->rotation[0] = self->rotation_in[0];
   self->rotation[1] = self->rotation_in[1];
   self->rotation[2] = self->rotation_in[2];
   self->rotation[3] = self->rotation_in[3];
   norm_quaternion_from_rotation(self->quaternion1, self->rotation);
   self->quaternion2[0] = self->translation_in[0];
   self->quaternion2[1] = self->translation_in[1];
   self->quaternion2[2] = self->translation_in[2];
   self->quaternion2[3] = 0;
   quaternionMult(self->quaternion3, self->quaternion2, self->quaternion1);
   self->quaternion4[0] = -self->quaternion1[0];
   self->quaternion4[1] = -self->quaternion1[1];
   self->quaternion4[2] = -self->quaternion1[2];
   self->quaternion4[3] = self->quaternion1[3];
   quaternionMult(self->quaternion2, self->quaternion4, self->quaternion3);
   self->translation_out[0] = self->quaternion2[0];
   self->translation_out[1] = self->quaternion2[1];
   self->translation_out[2] = self->quaternion2[2];
"
          ]
          field MFFloat           rotation [
            0
            0
            0
            0
          ]
          field MFFloat           quaternion1 [
            0
            0
            0
            0
          ]
          field MFFloat           quaternion2 [
            0
            0
            0
            0
          ]
          field MFFloat           quaternion3 [
            0
            0
            0
            0
          ]
          field MFFloat           quaternion4 [
            0
            0
            0
            0
          ]
          field SFFloat           leng 1
          field SFFloat           winkelkorrektur 0
        }
        DEF ROT_TRANS2 Script {
          eventIn SFVec3f translation_in
          eventIn SFRotation rotation_in
          eventOut MFString debug
          eventOut SFVec3f translation_out
          url [
            "javascript:
   function initialize()
      {
      translation_out[0]=0;
      translation_out[1]=0;
      translation_out[2]=0;
      }
// account vektorproduct c = a x b
   function vectorproduct(c,a,b)
      {
      c[0]=a[1]*b[2]-a[2]*b[1];
      c[1]=a[2]*b[0]-a[0]*b[2];
      c[2]=a[0]*b[1]-a[1]*b[0];
      }
// account scalarproduct a * b
   function scalarproduct(a,b)
      {
      return(a[0]*b[0]+a[1]*b[1]+a[2]*b[2]);
      }
// account quaternion multiplication a b
   function quaternionmult(c,a,b)
      {
      vectorproduct(c,a,b);
      c[0]=c[0]+a[3]*b[0]+b[3]*a[0];
      c[1]=c[1]+a[3]*b[1]+b[3]*a[1];
      c[2]=c[2]+a[3]*b[2]+b[3]*a[2];
      c[3]=a[3]*b[3]-scalarproduct(a,b);
      }             
// make rotation to quaternion with norm 1 
   function norm_quaternion_from_rotation(quad,rot)  
      {
      quad[3]=Math.cos(rot[3]/2.0);
      winkelkorrektur=Math.sin(rot[3]/2.0);
      quad[0]=rot[0]*winkelkorrektur;
      quad[1]=rot[1]*winkelkorrektur;
      quad[2]=rot[2]*winkelkorrektur;
      leng=Math.sqrt(quad[0]*quad[0]+quad[1]*quad[1]+quad[2]*quad[2]+
                     quad[3]*quad[3]);
      if (leng!=0)
         {
         quad[0]=quad[0]/leng;
         quad[1]=quad[1]/leng;
         quad[2]=quad[2]/leng;
         quad[3]=quad[3]/leng;
         }
      else
         {
         quad[0]=0;
         quad[1]=0;
         quad[2]=0;
         quad[3]=0;
         }
      }
   function rotation_in(val)  
      {
      rotation[0]=val[0];
      rotation[1]=val[1];
      rotation[2]=val[2];
      rotation[3]=val[3];
//            debug = new MFString(rotation);
      }
   function translation_in(val)  
      {
      norm_quaternion_from_rotation(quaternion1,rotation);
      quaternion2[0]=val[0];
      quaternion2[1]=val[1];
      quaternion2[2]=val[2];
      quaternion2[3]=0;
      quaternionmult(quaternion3,quaternion1,quaternion2);
      quaternion4[0]=-quaternion1[0];
      quaternion4[1]=-quaternion1[1];
      quaternion4[2]=-quaternion1[2];
      quaternion4[3]= quaternion1[3];
      quaternionmult(quaternion2,quaternion3,quaternion4);
      translation_out[0]=quaternion2[0];
      translation_out[1]=quaternion2[1];
      translation_out[2]=quaternion2[2];
      }
   "
            "c++:
   X3dScript_ROT_TRANS1 *self = (X3dScript_ROT_TRANS1 *)node;
   static bool ROT_TRANS1_init = false;
   if (!ROT_TRANS1_init) {
       self->translation_out[0] = 0;
       self->translation_out[1] = 0;
       self->translation_out[2] = 0;
       ROT_TRANS1_init = true;
   }         

// account quaternion multiplication a b
   extern void quaternionMult(float *c, float *a, float *b);
// make rotation to quaternion with norm 1 
   extern void norm_quaternion_from_rotation(float *quad, float *rot); 

   self->rotation[0] = self->rotation_in[0];
   self->rotation[1] = self->rotation_in[1];
   self->rotation[2] = self->rotation_in[2];
   self->rotation[3] = self->rotation_in[3];
   norm_quaternion_from_rotation(self->quaternion1, self->rotation);
   self->quaternion2[0] = self->translation_in[0];
   self->quaternion2[1] = self->translation_in[1];
   self->quaternion2[2] = self->translation_in[2];
   self->quaternion2[3] = 0;
   quaternionMult(self->quaternion3, self->quaternion2, self->quaternion1);
   self->quaternion4[0] = -self->quaternion1[0];
   self->quaternion4[1] = -self->quaternion1[1];
   self->quaternion4[2] = -self->quaternion1[2];
   self->quaternion4[3] = self->quaternion1[3];
   quaternionMult(self->quaternion2, self->quaternion4, self->quaternion3);
   self->translation_out[0] = self->quaternion2[0];
   self->translation_out[1] = self->quaternion2[1];
   self->translation_out[2] = self->quaternion2[2];
"
          ]
          field MFFloat           rotation [
            0
            0
            0
            0
          ]
          field MFFloat           quaternion1 [
            0
            0
            0
            0
          ]
          field MFFloat           quaternion2 [
            0
            0
            0
            0
          ]
          field MFFloat           quaternion3 [
            0
            0
            0
            0
          ]
          field MFFloat           quaternion4 [
            0
            0
            0
            0
          ]
          field SFFloat           leng 1
          field SFFloat           winkelkorrektur 0
        }
        Background {
          groundColor 0 0 1
          skyColor 0 0 1
        }
        DEF WALL_FIRE Script {
          eventIn SFBool isactive_in
          eventOut SFBool fire
          url [
            "javascript:

 // field SFBool old_isactive //

 // eventOut SFBool fire //

      function initialize()            
         {            
         fire=FALSE;
         }            
// release button == fire     
      function isactive_in(val)            
         {            
         if ((!val) && old_isactive) 
            fire=TRUE;
         else 
            fire=FALSE;           
         old_isactive=val;           
         }            
      "
            "c++:
      X3dScript_WALL_FIRE *self = (X3dScript_WALL_FIRE *)node;
      static bool WALL_FIRE_init = false;
      if (!WALL_FIRE_init) {
           self->fire = false; 
           WALL_FIRE_init = true;
      }         
      if ((!self->isactive_in) && self->old_isactive)
          self->fire = true;
      else
          self->fire = false;
      self->old_isactive = self->isactive_in;           
"
          ]
          field SFBool           old_isactive FALSE
        }
        DEF THING Transform {
          children 
            DEF ROLL_AXIS Transform {
              children 
                DEF UP_DOWN_AXIS Transform {
                  children [
                    DEF THING_SENSOR TouchSensor {
                    }
                    DEF HIDE_THING Transform {
                      children [
                        Inline {
                          url "thing.wrl"
                        }
                        DEF PLANE_SWITCH Switch {
                          choice 
                            Inline {
                              url "plane.wrl"
                            }
                        }
                        Transform {
                          translation 0 0 -1.150000
                        }
                      ]
                    }
                  ]
                }
            }
        }
        DEF BULLET_SWITCH Switch {
          choice 
            DEF BULLET_MOVE Transform {
              children [
                DEF DUMMY_BULLET TouchSensor {
                }
                Inline {
                  url "bullet.wrl"
                }
              ]
            }
        }
        DEF TIMER TimeSensor {
          loop TRUE
        }
        DEF SOUND Sound {
          maxBack 500
          maxFront 500
          minBack 500
          minFront 500
          source DEF SOUNDCLIP AudioClip {
            description "away"
            url "multimedia/bubble.wav"
          }
        }
        NavigationInfo {
          type "NONE"
        }
        DEF ROLL_TURN Script {
          eventIn SFFloat xvalue_in
          eventIn SFInt32 rock_and_roll_flag_in
          eventOut SFRotation rotation_out
          url [
            "javascript:
   function initialize()            
      {            
      rotation_out[0]=1;            
      rotation_out[1]=0;            
      rotation_out[2]=0;            
      rotation_out[3]=0;            
      }            
   function rock_and_roll_flag_in(val)
      {
      rock_and_roll_flag=val;
      }
   function xvalue_in(val)  
      {
      rotation_out[0]=0;
      if (rock_and_roll_flag==1)
         {
         rotation_out[1]=0;
         rotation_out[2]=1;
         }
      else
         {
         rotation_out[1]=1;
         rotation_out[2]=0;
         }
      rotation_out[3]=-val/1.0;
      }
   "
            "c++:
   X3dScript_ROLL_TURN *self = (X3dScript_ROLL_TURN *)node;
   static bool ROLL_TURN_init = false;
   if (!ROLL_TURN_init) {
       self->rotation_out[0]=1;
       self->rotation_out[1]=0;
       self->rotation_out[2]=0;
       self->rotation_out[3]=0;
       ROLL_TURN_init = true;
   }         
   self->rock_and_roll_flag = self->rock_and_roll_flag_in;
   if (self->rock_and_roll_flag==1) {
       self->rotation_out[1]=0;
       self->rotation_out[2]=1;
   } else {
       self->rotation_out[1]=1;
       self->rotation_out[2]=0;
   }
   self->rotation_out[0]=0;
   self->rotation_out[3]=self->xvalue_in * 2.0;
"
          ]
          field SFInt32           rock_and_roll_flag 0
        }
        DEF UP_DOWN_TURN Script {
          eventIn SFFloat yvalue_in
          eventOut SFRotation rotation_out
          url [
            "javascript:
   function initialize()            
      {            
      rotation_out[0]=0;            
      rotation_out[1]=0;            
      rotation_out[2]=0;            
      rotation_out[3]=0;            
      }            
   function yvalue_in(val)  
      {
      rotation_out[0]=1;
      rotation_out[1]=0;
      rotation_out[2]=0;
      rotation_out[3]=-val/1.0;
      }
   "
            "c++:
   X3dScript_UP_DOWN_TURN *self = (X3dScript_UP_DOWN_TURN *)node;
   static bool UP_DOWN_TURN_init = false;
   if (!UP_DOWN_TURN_init) {
       self->rotation_out[0]=0;
       self->rotation_out[1]=0;
       self->rotation_out[2]=0;
       self->rotation_out[3]=0;
       UP_DOWN_TURN_init = true;
   }         
   self->rotation_out[0]=1;
   self->rotation_out[1]=0;
   self->rotation_out[2]=0;
   self->rotation_out[3]=self->yvalue_in * 2.0;
"
          ]
        }
        DEF FLY_FORWARD Script {
          eventIn SFTime time_in
          eventOut SFVec3f translation_out
          eventOut SFTime time_out
          url [
            "javascript:
   function initialize()
      {
      translation_out[0]=0;
      translation_out[1]=0;
      translation_out[2]=0;
      }
   function time_in(val)  
      {
      translation_out[0]=0;
      translation_out[1]=0;
      translation_out[2]=0.15;
      time_out=val;
      }
   "
            "c++:
   X3dScript_FLY_FORWARD *self = (X3dScript_FLY_FORWARD *)node;
   static bool FLY_FORWARD_init = false;
   if (!FLY_FORWARD_init) {
       self->translation_out[0]=0;
       self->translation_out[1]=0;
       self->translation_out[2]=0;
       FLY_FORWARD_init = true;
   }         
   self->translation_out[0]=0;
   self->translation_out[1]=0;
   self->translation_out[2]=0.15;
   self->time_out = self->time_in;
"
          ]
        }
        DEF FLY_ON Script {
          eventIn SFVec3f translation_in
          eventIn SFTime time_in
          eventIn SFTime enter_time
          eventIn SFTime exit_time
          eventIn SFBool fire_in
          eventOut SFVec3f translation_out
          eventOut SFVec3f top_translation_out
          eventOut SFInt32 bullet_choice_out
          eventOut SFVec3f bullet_translation_out
          url [
            "javascript:

 // field SFNode metadata //

 // field SFVec3f top_translation //

 // field SFVec3f translation_old //

 // field SFBool brake //

 // field SFVec3f bullet_translation_start //

 // field SFVec3f bullet_direction //

 // field SFFloat bulletway_length //

 // field SFTime old_time //

 // field SFFloat factor //

 // eventOut SFVec3f translation_out //

 // eventOut SFVec3f top_translation_out //

 // eventOut SFInt32 bullet_choice_out //

 // eventOut SFVec3f bullet_translation_out //

   function initialize()
      {
      bullet_choice_out=-1;
      }
   // stop movement 
   function exit_time(val)
      {
      brake=TRUE;
      }
   // restart movement
   function enter_time(val)
      {
      brake=FALSE;
      }
   function time_in(val)
      {
      factor=5.0/Browser.getCurrentFrameRate();
      old_time=val;
      }
   function fire_in(val)
      {
      if (val)
         {
         bullet_translation_start=top_translation_out;
         // switch on bullet
         bullet_choice_out=0;
         bulletway_length=0;
         }
      }
   function drive_bullet(val)
      {
      if (bulletway_length==0)
         {
         bullet_direction=val;
         }
      if ((bullet_translation_out[2]>10) ||
          (bullet_translation_out[2]<-35))
         {
         bulletway_length=0;
         bullet_choice_out=-1;
         bullet_translation_out[2]=val[2];
         }
      else if (bulletway_length<45)
         {
         bullet_translation_out[0]=bullet_translation_start[0]-
                                   bulletway_length*bullet_direction[0];
         bullet_translation_out[1]=bullet_translation_start[1]-
                                   bulletway_length*bullet_direction[1];
         bullet_translation_out[2]=bullet_translation_start[2]-
                                   bulletway_length*bullet_direction[2];
         bulletway_length+=10.0*factor;
         }
      else
         {
         bulletway_length=0;
         bullet_choice_out=-1;
         bullet_translation_out[2]=val[2];
         }
      }
   //
   function translation_in(val)  
      {
      top_translation[0]=translation_old[0]-val[0]*factor;
      top_translation[1]=translation_old[1]-val[1]*factor;
      top_translation[2]=translation_old[2]-val[2]*factor;
      if (top_translation[2]<-35)
          top_translation[2] = 7;
      if (top_translation[2]>7)
          top_translation[2] = -35;
      if (top_translation[0]<-7)
          top_translation[0] = 7;
      if (top_translation[0]>7)
          top_translation[0] = -7;
      if (top_translation[1]<-7)
          top_translation[1] = 7;
      if (top_translation[1]>7)
          top_translation[1] = -7;
      translation_old = top_translation;
      translation_out[0]=translation_old[0]-val[0]*factor;
      translation_out[1]=translation_old[1]-val[1]*factor;
      translation_out[2]=translation_old[2]-val[2]*factor;
      translation_old=translation_out;
      if (bullet_choice_out==0)
         drive_bullet(val);
      top_translation_out=top_translation;
      }
   "
   "c++:
      X3dScript_FLY_ON *self = (X3dScript_FLY_ON *)node;
      static bool FLY_ON_init = false;
      if (!FLY_ON_init) {
           self->bullet_choice_out = -1; 
           FLY_ON_init = true;
      }         
/*
   function exit_time(val)
      {
      brake=TRUE;
      }
   // restart movement
   function enter_time(val)
      {
      brake=FALSE;
      }
*/
      self->factor = 0.06;
      self->old_time = self->time_in;
      if (self->fire_in)
         {
         self->bullet_translation_start = self->top_translation_out;
         // switch on bullet
         self->bullet_choice_out = 0;
         self->bulletway_length = 0;
         }
      self->top_translation[0] = self->translation_old[0] -
                                 self->translation_in[0] * self->factor;
      self->top_translation[1] = self->translation_old[1] -
                                 self->translation_in[1] * self->factor;
      self->top_translation[2] = self->translation_old[2] -
                                 self->translation_in[2] * self->factor;
      if (self->top_translation[2] < -35)
          self->top_translation[2] = 7;
      if (self->top_translation[2] > 7)
          self->top_translation[2] = -35;
      if (self->top_translation[0] < -7)
          self->top_translation[0] = 7;
      if (self->top_translation[0] > 7)
          self->top_translation[0] = -7;
      if (self->top_translation[1] < -7)
          self->top_translation[1] = 7;
      if (self->top_translation[1] > 7)
          self->top_translation[1] = -7;
      self->translation_old = self->top_translation;
      self->translation_out[0] = self->translation_old[0] -
                                 self->translation_in[0] * self->factor;
      self->translation_out[1] = self->translation_old[1] -
                                 self->translation_in[1] * self->factor;
      self->translation_out[2] = self->translation_old[2] - 
                                 self->translation_in[2] * self->factor;
      self->translation_old[0] = self->translation_out[0];
      self->translation_old[1] = self->translation_out[1];
      self->translation_old[2] = self->translation_out[2];
      if (self->bullet_choice_out == 0) 
         {
         if (self->bulletway_length == 0)
            {
            self->bullet_direction = self->translation_in;
            }
         if ((self->bullet_translation_out[2] > 10) ||
             (self->bullet_translation_out[2] < -35))
            {
            self->bulletway_length = 0;
            self->bullet_choice_out = -1;
            self->bullet_translation_out[2] = self->translation_in[2];
            }
         else if (self->bulletway_length < 45)
            {
            self->bullet_translation_out[0] = self->bullet_translation_start[0] -
                                              self->bulletway_length *
                                              self->bullet_direction[0];
            self->bullet_translation_out[1] = self->bullet_translation_start[1] -
                                              self->bulletway_length *
                                              self->bullet_direction[1];
            self->bullet_translation_out[2] = self->bullet_translation_start[2] -
                                              self->bulletway_length *
                                              self->bullet_direction[2];
            self->bulletway_length += 10.0 * self->factor;
            }
         else
            {
            self->bulletway_length = 0;
            self->bullet_choice_out = -1;
            self->bullet_translation_out[2] = self->translation_in[2];
            }
         }
      self->top_translation_out = self->top_translation;   
"
          ]
          field SFVec3f           top_translation -1 0 0
          field SFVec3f           translation_old 0 0 0
          field SFVec3f           bullet_translation_start 0 0 0
          field SFVec3f           bullet_direction 0 0 0
          field SFFloat           bulletway_length 0
          field SFTime           old_time 0
          field SFFloat           factor 10
        }
        DEF THING_SCRIPT Script {
          eventIn SFBool isover_in
          eventIn SFBool fire_in
          eventOut SFVec3f hide_out
          url [
            "javascript:
   function isover_in(val)            
      {            
      if (val)
         {
         hide_out[0]=0.1;
         hide_out[1]=0.1;
         hide_out[2]=0.1;
         }
      else
         {
         hide_out[0]=1.0;
         hide_out[1]=1.0;
         hide_out[2]=1.0;
         }
      }    
   function fire_in(val)            
      {
      if (val)
         {
         hide_out[0]=1;
         hide_out[1]=1;
         hide_out[2]=1;
         }                  
      }
   "
            "c++:
      X3dScript_THING_SCRIPT *self = (X3dScript_THING_SCRIPT *)node;
      if (self->isover_in)
         {
         self->hide_out[0]=0.1;
         self->hide_out[1]=0.1;
         self->hide_out[2]=0.1;
         }
      else
         {
         self->hide_out[0]=1.0;
         self->hide_out[1]=1.0;
         self->hide_out[2]=1.0;
         }
      if (self->fire_in)
         {
         self->hide_out[0]=1;
         self->hide_out[1]=1;
         self->hide_out[2]=1;
         }                  
"
          ]
        }
        Viewpoint {
          orientation 0.216404 6.832183e-2 -0.973910 0
          position 1.070576e-4 -3.391865e-4 10
        }
        Viewpoint {
        }
        WorldInfo {
          info [
            "(C) Copyright 1999 ICA University Stuttgart (modified by mufti@csv.ica.uni-stuttgart.de)"
            "This program is free software; you can redistribute it and/or modify"
            "it under the terms of the GNU General Public License as published by"
            "the Free Software Foundation; version 2 of the License              "
            "This program is distributed in the hope that it will be useful,     "
            "but WITHOUT ANY WARRANTY; without even the implied warranty of      "
            "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       "
            "GNU General Public License for more details.                        "
            "You should have received a copy of the GNU General Public License   "
            "along with this program; if not, write to the Free Software         "
            "Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA"
          ]
          title "Tux warbird"
        }
        Transform {
          translation -5.552411 -2.600564 0
          children 
            Shape {
              appearance Appearance {
                material Material {
                }
              }
              geometry DEF Text1 Text {
                string ""
              }
            }
        }
        Group {
          children 
            DEF Switch1 Switch {
              choice 
                Transform {
                  translation -10.787153 0 -18.900000
                  children [
                    Shape {
                      appearance Appearance {
                        material Material {
                        }
                      }
                      geometry DEF Text1_5 Text {
                        string [
                          "Resistance is futile. You will be assimilat..."
                          "General Protection Fault in MSBILL32.DLL"
                        ]
                      }
                    }
                    DEF DUMMY_TEXT TouchSensor {
                    }
                  ]
                }
            }
        }
        Shape {
          appearance Appearance {
            material Material {
              diffuseColor 0 0 1
            }
          }
          geometry IndexedFaceSet {
            coord DEF COORD Coordinate {
              point [
                -600 -600 -35
                600 -600 -35
                -600 600 -35
                600 600 -35
              ]
            }
            normal Normal {
              vector [
                0 0 1
                0 0 1
                0 0 1
                0 0 1
              ]
            }
            coordIndex [
              0 1 3 2 -1 
            ]
            normalIndex [
              0 1 2 3 -1 
            ]
            texCoordIndex [
              0 1 3 2 -1 
            ]
          }
        }
        DEF BOX2_HIDE Transform {
          children 
            DEF BOX2_SWITCH Switch {
              choice 
                DEF BOX2_MOVE Transform {
                  scale 1.500000 1.500000 1.500000
                  children [
                    DEF BOX2_SENSOR TouchSensor {
                    }
                    Inline {
                      url "bill.wrl"
                    }
                  ]
                }
            }
        }
        DEF BOX2_HIT_CHECK Script {
          eventIn SFVec3f translation_in
          eventIn SFVec3f box_position
          eventOut SFInt32 deleted_out
          eventOut SFInt32 choice_out
          url [
            "javascript:
      function initialize()
         {
         choice_out=0;
         deleted_out=0;
         }
      function translation_in(val)  
         {
         if (!deleted)
            if (   (val[0]>=box[0]-boxsize/2) && (val[0]<=box[0]+boxsize/2)
                && (val[1]>=box[1]-boxsize/2) && (val[1]<=box[1]+boxsize/2)
                && (val[2]>=box[2]-boxsize/2) && (val[2]<=box[2]+boxsize/2)
               )
               {
               choice_out=1;
               deleted_out=1;
               deleted=1;
               }
            else
               choice_out=0;
         else
            choice_out=1;
         }
         
      function box_position(val)
         {
         box[0]=val[0];
         box[1]=val[1];
         box[2]=val[2];
         }  
      "
            "c++:
   X3dScript_BOX2_HIT_CHECK *self = (X3dScript_BOX2_HIT_CHECK *)node;
   static bool BOX2_HIT_CHECK_init = false;
   if (!BOX2_HIT_CHECK_init) {
       self->choice_out = 0;
       self->deleted_out = 0;
       BOX2_HIT_CHECK_init = true;
   } else if (!self->deleted) 
      {
      self->box[0] = self->box_position[0];
      self->box[1] = self->box_position[1];
      self->box[2] = self->box_position[2];
      if (
          (self->translation_in[0] >= self->box[0] - self->boxsize / 2) && 
          (self->translation_in[0] <= self->box[0] + self->boxsize / 2) && 
          (self->translation_in[1] >= self->box[1] - self->boxsize / 2) && 
          (self->translation_in[1] <= self->box[1] + self->boxsize / 2) && 
          (self->translation_in[2] >= self->box[2] - self->boxsize / 2) && 
          (self->translation_in[2] <= self->box[2] + self->boxsize / 2)
         )
         {
         self->choice_out = 1;
         self->deleted_out = 1;
         self->deleted = 1;
         }
      else
         self->choice_out = 0;
   }
   else
      self->choice_out = 1;
"
          ]
          field SFInt32           deleted 0
          field SFVec3f           box 1e4 1e4 1e4
          field SFFloat           boxsize 1.500000
        }
        DEF BOX2_MOVE_ON Script {
          eventIn SFVec3f translation_in
          eventOut SFVec3f translation_out
          url [
            "javascript:
      function nextsteps()
         {
         step_translation[0]=(Math.random()-0.5)*0.04;
         step_translation[1]=(Math.random()-0.5)*0.04;
         step_translation[2]=(Math.random()-0.5)*0.04;
         step=Math.random()*200+1;
         }
      function initialize()
         {
         translation_out[0]=Math.random()*8-4;
         translation_out[1]=Math.random()*6-3;
         translation_out[2]=Math.random()*-30-1;
         nextsteps();
         }
      function translation_in(val)  
         {
         step--;
         if (step<=0)
            nextsteps();
         if (   (translation_out[0]+step_translation[0]<4) 
             && (translation_out[0]+step_translation[0]>-4)) 
            translation_out[0]+=step_translation[0];
         if (   (translation_out[1]+step_translation[1]<3) 
             && (translation_out[1]+step_translation[1]>-3)) 
             translation_out[1]+=step_translation[1];
         if (   (translation_out[2]+step_translation[2]<-1) 
             && (translation_out[2]+step_translation[2]>-30)) 
            translation_out[2]+=step_translation[2];
         }
      "
            "c++:
   X3dScript_BOX2_MOVE_ON *self = (X3dScript_BOX2_MOVE_ON *)node;
   static bool BOX2_MOVE_ON_init = false;
   if (!BOX2_MOVE_ON_init) {
       self->translation_out[0] = ((float)rand()) / RAND_MAX * 8 - 4;
       self->translation_out[1] = ((float)rand()) / RAND_MAX * 6 - 3;
       self->translation_out[2] = ((float)rand()) / RAND_MAX * -30 - 1;
       BOX2_MOVE_ON_init = true;
   }         
   self->step_translation[0] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[1] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[2] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   if ((self->translation_out[0] + self->step_translation[0] < 4) && 
       (self->translation_out[0] + self->step_translation[0] > -4)) 
       self->translation_out[0] += self->step_translation[0];
   if ((self->translation_out[1] + self->step_translation[1] < 3) &&
       (self->translation_out[1] + self->step_translation[1] > -3)) 
       self->translation_out[1] += self->step_translation[1];
   if ((self->translation_out[2] + self->step_translation[2] < -1) && 
       (self->translation_out[2] + self->step_translation[2] > -30)) 
       self->translation_out[2] += self->step_translation[2];
"
          ]
          field SFVec3f           step_translation 0 0 0
          field SFInt32           step 0
        }
        DEF BOX2_HIDE_SCRIPT Script {
          eventIn SFBool isover_in
          eventOut SFVec3f hide_out
          url [
            "javascript:
   function isover_in(val)            
      {            
      if (val)
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=100;
         }
      else
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=0;
         }
      }    
   "
"c++:
   X3dScript_BOX2_HIDE_SCRIPT *self = (X3dScript_BOX2_HIDE_SCRIPT *)node;
   if (self->isover_in) {             
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 100;
   } else {
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 0;
   }
"
          ]
        }
        DEF BOX3_HIDE Transform {
          children 
            DEF BOX3_SWITCH Switch {
              choice 
                DEF BOX3_MOVE Transform {
                  scale 1.500000 1.500000 1.500000
                  children [
                    DEF BOX3_SENSOR TouchSensor {
                    }
                    Inline {
                      url "bill.wrl"
                    }
                  ]
                }
            }
        }
        DEF BOX3_HIT_CHECK Script {
          eventIn SFVec3f translation_in
          eventIn SFVec3f box_position
          eventOut SFInt32 deleted_out
          eventOut SFInt32 choice_out
          url [
            "javascript:
      function initialize()
         {
         choice_out=0;
         deleted_out=0;
         }
      function translation_in(val)  
         {
         if (!deleted)
            if (   (val[0]>=box[0]-boxsize/2) && (val[0]<=box[0]+boxsize/2)
                && (val[1]>=box[1]-boxsize/2) && (val[1]<=box[1]+boxsize/2)
                && (val[2]>=box[2]-boxsize/2) && (val[2]<=box[2]+boxsize/2)
               )
               {
               choice_out=1;
               deleted_out=1;
               deleted=1;
               }
            else
               choice_out=0;
         else
            choice_out=1;
         }
         
      function box_position(val)
         {
         box[0]=val[0];
         box[1]=val[1];
         box[2]=val[2];
         }  
      "
            "c++:
   X3dScript_BOX3_HIT_CHECK *self = (X3dScript_BOX3_HIT_CHECK *)node;
   static bool BOX3_HIT_CHECK_init = false;
   if (!BOX3_HIT_CHECK_init) {
       self->choice_out = 0;
       self->deleted_out = 9;
       BOX3_HIT_CHECK_init = true;
   } else if (!self->deleted) 
      {
      self->box[0] = self->box_position[0];
      self->box[1] = self->box_position[1];
      self->box[2] = self->box_position[2];
      if (
          (self->translation_in[0] >= self->box[0] - self->boxsize / 2) && 
          (self->translation_in[0] <= self->box[0] + self->boxsize / 2) && 
          (self->translation_in[1] >= self->box[1] - self->boxsize / 2) && 
          (self->translation_in[1] <= self->box[1] + self->boxsize / 2) && 
          (self->translation_in[2] >= self->box[2] - self->boxsize / 2) && 
          (self->translation_in[2] <= self->box[2] + self->boxsize / 2)
         )
         {
         self->choice_out = 1;
         self->deleted_out = 1;
         self->deleted = 1;
         }
      else
         self->choice_out = 0;
   }
   else
      self->choice_out = 1;
"
          ]
          field SFInt32           deleted 0
          field SFVec3f           box 1e4 1e4 1e4
          field SFFloat           boxsize 1.500000
        }
        DEF BOX3_MOVE_ON Script {
          eventIn SFVec3f translation_in
          eventOut SFVec3f translation_out
          url [
            "javascript:
      function nextsteps()
         {
         step_translation[0]=(Math.random()-0.5)*0.04;
         step_translation[1]=(Math.random()-0.5)*0.04;
         step_translation[2]=(Math.random()-0.5)*0.04;
         step=Math.random()*200+1;
         }
      function initialize()
         {
         translation_out[0]=Math.random()*8-4;
         translation_out[1]=Math.random()*6-3;
         translation_out[2]=Math.random()*-30-1;
         nextsteps();
         }
      function translation_in(val)  
         {
         step--;
         if (step<=0)
            nextsteps();
         if (   (translation_out[0]+step_translation[0]<4) 
             && (translation_out[0]+step_translation[0]>-4)) 
            translation_out[0]+=step_translation[0];
         if (   (translation_out[1]+step_translation[1]<3) 
             && (translation_out[1]+step_translation[1]>-3)) 
             translation_out[1]+=step_translation[1];
         if (   (translation_out[2]+step_translation[2]<-1) 
             && (translation_out[2]+step_translation[2]>-30)) 
            translation_out[2]+=step_translation[2];
         }
      "
            "c++:
   X3dScript_BOX3_MOVE_ON *self = (X3dScript_BOX3_MOVE_ON *)node;
   static bool BOX3_MOVE_ON_init = false;
   if (!BOX3_MOVE_ON_init) {
       self->translation_out[0] = ((float)rand()) / RAND_MAX * 8 - 4;
       self->translation_out[1] = ((float)rand()) / RAND_MAX * 6 - 3;
       self->translation_out[2] = ((float)rand()) / RAND_MAX * -30 - 1;
       BOX3_MOVE_ON_init = true;
   }         
   self->step_translation[0] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[1] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[2] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   if ((self->translation_out[0] + self->step_translation[0] < 4) && 
       (self->translation_out[0] + self->step_translation[0] > -4)) 
       self->translation_out[0] += self->step_translation[0];
   if ((self->translation_out[1] + self->step_translation[1] < 3) &&
       (self->translation_out[1] + self->step_translation[1] > -3)) 
       self->translation_out[1] += self->step_translation[1];
   if ((self->translation_out[2] + self->step_translation[2] < -1) && 
       (self->translation_out[2] + self->step_translation[2] > -30)) 
       self->translation_out[2] += self->step_translation[2];
"
          ]
          field SFVec3f           step_translation 0 0 0
          field SFInt32           step 0
        }
        DEF BOX3_HIDE_SCRIPT Script {
          eventIn SFBool isover_in
          eventOut SFVec3f hide_out
          url [
            "javascript:
   function isover_in(val)            
      {            
      if (val)
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=100;
         }
      else
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=0;
         }
      }    
   "
"c++:
   X3dScript_BOX3_HIDE_SCRIPT *self = (X3dScript_BOX3_HIDE_SCRIPT *)node;
   if (self->isover_in) {             
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 100;
   } else {
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 0;
   }
"
          ]
        }
        DEF BOX4_HIDE Transform {
          children 
            DEF BOX4_SWITCH Switch {
              choice 
                DEF BOX4_MOVE Transform {
                  scale 1.500000 1.500000 1.500000
                  children [
                    DEF BOX4_SENSOR TouchSensor {
                    }
                    Inline {
                      url "bill.wrl"
                    }
                  ]
                }
            }
        }
        DEF BOX4_HIT_CHECK Script {
          eventIn SFVec3f translation_in
          eventIn SFVec3f box_position
          eventOut SFInt32 deleted_out
          eventOut SFInt32 choice_out
          url [
            "javascript:
      function initialize()
         {
         choice_out=0;
         deleted_out=0;
         }
      function translation_in(val)  
         {
         if (!deleted)
            if (   (val[0]>=box[0]-boxsize/2) && (val[0]<=box[0]+boxsize/2)
                && (val[1]>=box[1]-boxsize/2) && (val[1]<=box[1]+boxsize/2)
                && (val[2]>=box[2]-boxsize/2) && (val[2]<=box[2]+boxsize/2)
               )
               {
               choice_out=1;
               deleted_out=1;
               deleted=1;
               }
            else
               choice_out=0;
         else
            choice_out=1;
         }
         
      function box_position(val)
         {
         box[0]=val[0];
         box[1]=val[1];
         box[2]=val[2];
         }  
      "
            "c++:
   X3dScript_BOX4_HIT_CHECK *self = (X3dScript_BOX4_HIT_CHECK *)node;
   static bool BOX4_HIT_CHECK_init = false;
   if (!BOX4_HIT_CHECK_init) {
       self->choice_out = 0;
       self->deleted_out = 0;
       BOX4_HIT_CHECK_init = true;
   } else if (!self->deleted) 
      {
      self->box[0] = self->box_position[0];
      self->box[1] = self->box_position[1];
      self->box[2] = self->box_position[2];
      if (
          (self->translation_in[0] >= self->box[0] - self->boxsize / 2) && 
          (self->translation_in[0] <= self->box[0] + self->boxsize / 2) && 
          (self->translation_in[1] >= self->box[1] - self->boxsize / 2) && 
          (self->translation_in[1] <= self->box[1] + self->boxsize / 2) && 
          (self->translation_in[2] >= self->box[2] - self->boxsize / 2) && 
          (self->translation_in[2] <= self->box[2] + self->boxsize / 2)
         )
         {
         self->choice_out = 1;
         self->deleted_out = 1;
         self->deleted = 1;
         }
      else
         self->choice_out = 0;
   }
   else
      self->choice_out = 1;
"
          ]
          field SFInt32           deleted 0
          field SFVec3f           box 1e4 1e4 1e4
          field SFFloat           boxsize 1.500000
        }
        DEF BOX4_MOVE_ON Script {
          eventIn SFVec3f translation_in
          eventOut SFVec3f translation_out
          url [
            "javascript:
      function nextsteps()
         {
         step_translation[0]=(Math.random()-0.5)*0.04;
         step_translation[1]=(Math.random()-0.5)*0.04;
         step_translation[2]=(Math.random()-0.5)*0.04;
         step=Math.random()*200+1;
         }
      function initialize()
         {
         translation_out[0]=Math.random()*8-4;
         translation_out[1]=Math.random()*6-3;
         translation_out[2]=Math.random()*-30-1;
         nextsteps();
         }
      function translation_in(val)  
         {
         step--;
         if (step<=0)
            nextsteps();
         if (   (translation_out[0]+step_translation[0]<4) 
             && (translation_out[0]+step_translation[0]>-4)) 
            translation_out[0]+=step_translation[0];
         if (   (translation_out[1]+step_translation[1]<3) 
             && (translation_out[1]+step_translation[1]>-3)) 
             translation_out[1]+=step_translation[1];
         if (   (translation_out[2]+step_translation[2]<-1) 
             && (translation_out[2]+step_translation[2]>-30)) 
            translation_out[2]+=step_translation[2];
         }
      "
            "c++:
   X3dScript_BOX4_MOVE_ON *self = (X3dScript_BOX4_MOVE_ON *)node;
   static bool BOX4_MOVE_ON_init = false;
   if (!BOX4_MOVE_ON_init) {
       self->translation_out[0] = ((float)rand()) / RAND_MAX * 8 - 4;
       self->translation_out[1] = ((float)rand()) / RAND_MAX * 6 - 3;
       self->translation_out[2] = ((float)rand()) / RAND_MAX * -30 - 1;
       BOX4_MOVE_ON_init = true;
   }         
   self->step_translation[0] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[1] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[2] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   if ((self->translation_out[0] + self->step_translation[0] < 4) && 
       (self->translation_out[0] + self->step_translation[0] > -4)) 
       self->translation_out[0] += self->step_translation[0];
   if ((self->translation_out[1] + self->step_translation[1] < 3) &&
       (self->translation_out[1] + self->step_translation[1] > -3)) 
       self->translation_out[1] += self->step_translation[1];
   if ((self->translation_out[2] + self->step_translation[2] < -1) && 
       (self->translation_out[2] + self->step_translation[2] > -30)) 
       self->translation_out[2] += self->step_translation[2];
"
          ]
          field SFVec3f           step_translation 0 0 0
          field SFInt32           step 0
        }
        DEF BOX4_HIDE_SCRIPT Script {
          eventIn SFBool isover_in
          eventOut SFVec3f hide_out
          url [
            "javascript:
   function isover_in(val)            
      {            
      if (val)
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=100;
         }
      else
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=0;
         }
      }    
   "
"c++:
   X3dScript_BOX4_HIDE_SCRIPT *self = (X3dScript_BOX4_HIDE_SCRIPT *)node;
   if (self->isover_in) {             
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 100;
   } else {
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 0;
   }
"
          ]
        }
        DEF BOX5_HIDE Transform {
          children 
            DEF BOX5_SWITCH Switch {
              choice 
                DEF BOX5_MOVE Transform {
                  scale 1.500000 1.500000 1.500000
                  children [
                    DEF BOX5_SENSOR TouchSensor {
                    }
                    Inline {
                      url "bill.wrl"
                    }
                  ]
                }
            }
        }
        DEF BOX5_HIT_CHECK Script {
          eventIn SFVec3f translation_in
          eventIn SFVec3f box_position
          eventOut SFInt32 deleted_out
          eventOut SFInt32 choice_out
          url [
            "javascript:
      function initialize()
         {
         choice_out=0;
         deleted_out=0;
         }
      function translation_in(val)  
         {
         if (!deleted)
            if (   (val[0]>=box[0]-boxsize/2) && (val[0]<=box[0]+boxsize/2)
                && (val[1]>=box[1]-boxsize/2) && (val[1]<=box[1]+boxsize/2)
                && (val[2]>=box[2]-boxsize/2) && (val[2]<=box[2]+boxsize/2)
               )
               {
               choice_out=1;
               deleted_out=1;
               deleted=1;
               }
            else
               choice_out=0;
         else
            choice_out=1;
         }
         
      function box_position(val)
         {
         box[0]=val[0];
         box[1]=val[1];
         box[2]=val[2];
         }  
      "
            "c++:
   X3dScript_BOX5_HIT_CHECK *self = (X3dScript_BOX5_HIT_CHECK *)node;
   static bool BOX5_HIT_CHECK_init = false;
   if (!BOX5_HIT_CHECK_init) {
       self->choice_out = 0;
       self->deleted_out = 0;
       BOX5_HIT_CHECK_init = true;
   } else if (!self->deleted) 
      {
      self->box[0] = self->box_position[0];
      self->box[1] = self->box_position[1];
      self->box[2] = self->box_position[2];
      if (
          (self->translation_in[0] >= self->box[0] - self->boxsize / 2) && 
          (self->translation_in[0] <= self->box[0] + self->boxsize / 2) && 
          (self->translation_in[1] >= self->box[1] - self->boxsize / 2) && 
          (self->translation_in[1] <= self->box[1] + self->boxsize / 2) && 
          (self->translation_in[2] >= self->box[2] - self->boxsize / 2) && 
          (self->translation_in[2] <= self->box[2] + self->boxsize / 2)
         )
         {
         self->choice_out = 1;
         self->deleted_out = 1;
         self->deleted = 1;
         }
      else
         self->choice_out = 0;
   }
   else
      self->choice_out = 1;
"
          ]
          field SFInt32           deleted 0
          field SFVec3f           box 1e4 1e4 1e4
          field SFFloat           boxsize 1.500000
        }
        DEF BOX5_MOVE_ON Script {
          eventIn SFVec3f translation_in
          eventOut SFVec3f translation_out
          url [
            "javascript:
      function nextsteps()
         {
         step_translation[0]=(Math.random()-0.5)*0.04;
         step_translation[1]=(Math.random()-0.5)*0.04;
         step_translation[2]=(Math.random()-0.5)*0.04;
         step=Math.random()*200+1;
         }
      function initialize()
         {
         translation_out[0]=Math.random()*8-4;
         translation_out[1]=Math.random()*6-3;
         translation_out[2]=Math.random()*-30-1;
         nextsteps();
         }
      function translation_in(val)  
         {
         step--;
         if (step<=0)
            nextsteps();
         if (   (translation_out[0]+step_translation[0]<4) 
             && (translation_out[0]+step_translation[0]>-4)) 
            translation_out[0]+=step_translation[0];
         if (   (translation_out[1]+step_translation[1]<3) 
             && (translation_out[1]+step_translation[1]>-3)) 
             translation_out[1]+=step_translation[1];
         if (   (translation_out[2]+step_translation[2]<-1) 
             && (translation_out[2]+step_translation[2]>-30)) 
            translation_out[2]+=step_translation[2];
         }
      "
            "c++:
   X3dScript_BOX5_MOVE_ON *self = (X3dScript_BOX5_MOVE_ON *)node;
   static bool BOX5_MOVE_ON_init = false;
   if (!BOX5_MOVE_ON_init) {
       self->translation_out[0] = ((float)rand()) / RAND_MAX * 8 - 4;
       self->translation_out[1] = ((float)rand()) / RAND_MAX * 6 - 3;
       self->translation_out[2] = ((float)rand()) / RAND_MAX * -30 - 1;
       BOX5_MOVE_ON_init = true;
   }         
   self->step_translation[0] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[1] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   self->step_translation[2] = (((float)rand()) / RAND_MAX - 0.5) * 0.04;
   if ((self->translation_out[0] + self->step_translation[0] < 4) && 
       (self->translation_out[0] + self->step_translation[0] > -4)) 
       self->translation_out[0] += self->step_translation[0];
   if ((self->translation_out[1] + self->step_translation[1] < 3) &&
       (self->translation_out[1] + self->step_translation[1] > -3)) 
       self->translation_out[1] += self->step_translation[1];
   if ((self->translation_out[2] + self->step_translation[2] < -1) && 
       (self->translation_out[2] + self->step_translation[2] > -30)) 
       self->translation_out[2] += self->step_translation[2];
"
          ]
          field SFVec3f           step_translation 0 0 0
          field SFInt32           step 0
        }
        DEF BOX5_HIDE_SCRIPT Script {
          eventIn SFBool isover_in
          eventOut SFVec3f hide_out
          url [
            "javascript:
   function isover_in(val)            
      {            
      if (val)
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=100;
         }
      else
         {
         hide_out[0]=0;
         hide_out[1]=0;
         hide_out[2]=0;
         }
      }    
   "
"c++:
   X3dScript_BOX5_HIDE_SCRIPT *self = (X3dScript_BOX5_HIDE_SCRIPT *)node;
   if (self->isover_in) {             
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 100;
   } else {
       self->hide_out[0] = 0;
       self->hide_out[1] = 0;
       self->hide_out[2] = 0;
   }
"
          ]
        }
      ]
    }
    Transform {
      translation 0 0 -10
      children 
        Inline {
          url "game_over.wrl"
        }
    }
  ]
  whichChoice 0
}

ROUTE BOX1_HIT_CHECK.choice_out TO BOX1_SWITCH.set_whichChoice
ROUTE BOX1_MOVE_ON.translation_out TO BOX1_HIT_CHECK.box_position
ROUTE BOX1_MOVE_ON.translation_out TO BOX1_MOVE.set_translation
ROUTE BOX1_SENSOR.isOver TO BOX1_HIDE_SCRIPT.isover_in
ROUTE BOX1_HIDE_SCRIPT.hide_out TO BOX1_HIDE.set_translation
ROUTE WALL_SENSOR.translation_changed TO STEER.wall_xy_in
ROUTE ROT_TRANS1.translation_out TO ROT_TRANS2.translation_in
ROUTE WALL_SENSOR2.isActive TO WALL_FIRE.isactive_in
ROUTE STEER.xvalue TO ROLL_TURN.xvalue_in
ROUTE ROLL_TURN.rotation_out TO ROLL_AXIS.set_rotation
ROUTE ROLL_TURN.rotation_out TO ROT_TRANS2.rotation_in
ROUTE STEER.yvalue TO UP_DOWN_TURN.yvalue_in
ROUTE UP_DOWN_TURN.rotation_out TO UP_DOWN_AXIS.set_rotation
ROUTE UP_DOWN_TURN.rotation_out TO ROT_TRANS1.rotation_in
ROUTE TIMER.time TO FLY_FORWARD.time_in
ROUTE FLY_FORWARD.translation_out TO ROT_TRANS1.translation_in
ROUTE ROT_TRANS2.translation_out TO FLY_ON.translation_in
ROUTE FLY_FORWARD.time_out TO FLY_ON.time_in
ROUTE WALL_FIRE.fire TO FLY_ON.fire_in
ROUTE FLY_ON.translation_out TO THING.set_translation
ROUTE FLY_ON.top_translation_out TO BOX1_HIT_CHECK.translation_in
ROUTE FLY_ON.top_translation_out TO BOX1_MOVE_ON.translation_in
ROUTE FLY_ON.bullet_choice_out TO BULLET_SWITCH.set_whichChoice
ROUTE FLY_ON.bullet_translation_out TO BOX1_HIT_CHECK.translation_in
ROUTE FLY_ON.bullet_translation_out TO BULLET_MOVE.set_translation
ROUTE THING_SENSOR.isOver TO THING_SCRIPT.isover_in
ROUTE WALL_FIRE.fire TO THING_SCRIPT.fire_in
ROUTE THING_SCRIPT.hide_out TO HIDE_THING.set_scale
ROUTE FLY_ON.top_translation_out TO BOX2_HIT_CHECK.translation_in
ROUTE FLY_ON.bullet_translation_out TO BOX2_HIT_CHECK.translation_in
ROUTE BOX2_HIT_CHECK.choice_out TO BOX2_SWITCH.set_whichChoice
ROUTE FLY_ON.top_translation_out TO BOX2_MOVE_ON.translation_in
ROUTE BOX2_MOVE_ON.translation_out TO BOX2_HIT_CHECK.box_position
ROUTE BOX2_MOVE_ON.translation_out TO BOX2_MOVE.set_translation
ROUTE BOX2_SENSOR.isOver TO BOX2_HIDE_SCRIPT.isover_in
ROUTE BOX2_HIDE_SCRIPT.hide_out TO BOX2_HIDE.set_translation
ROUTE FLY_ON.top_translation_out TO BOX3_HIT_CHECK.translation_in
ROUTE FLY_ON.bullet_translation_out TO BOX3_HIT_CHECK.translation_in
ROUTE BOX3_HIT_CHECK.choice_out TO BOX3_SWITCH.set_whichChoice
ROUTE FLY_ON.top_translation_out TO BOX3_MOVE_ON.translation_in
ROUTE BOX3_MOVE_ON.translation_out TO BOX3_HIT_CHECK.box_position
ROUTE BOX3_MOVE_ON.translation_out TO BOX3_MOVE.set_translation
ROUTE BOX3_SENSOR.isOver TO BOX3_HIDE_SCRIPT.isover_in
ROUTE BOX3_HIDE_SCRIPT.hide_out TO BOX3_HIDE.set_translation
ROUTE FLY_ON.top_translation_out TO BOX4_HIT_CHECK.translation_in
ROUTE FLY_ON.bullet_translation_out TO BOX4_HIT_CHECK.translation_in
ROUTE BOX4_HIT_CHECK.choice_out TO BOX4_SWITCH.set_whichChoice
ROUTE FLY_ON.top_translation_out TO BOX4_MOVE_ON.translation_in
ROUTE BOX4_MOVE_ON.translation_out TO BOX4_HIT_CHECK.box_position
ROUTE BOX4_MOVE_ON.translation_out TO BOX4_MOVE.set_translation
ROUTE BOX4_SENSOR.isOver TO BOX4_HIDE_SCRIPT.isover_in
ROUTE BOX4_HIDE_SCRIPT.hide_out TO BOX4_HIDE.set_translation
ROUTE FLY_ON.top_translation_out TO BOX5_HIT_CHECK.translation_in
ROUTE FLY_ON.bullet_translation_out TO BOX5_HIT_CHECK.translation_in
ROUTE BOX5_HIT_CHECK.choice_out TO BOX5_SWITCH.set_whichChoice
ROUTE FLY_ON.top_translation_out TO BOX5_MOVE_ON.translation_in
ROUTE BOX5_MOVE_ON.translation_out TO BOX5_HIT_CHECK.box_position
ROUTE BOX5_MOVE_ON.translation_out TO BOX5_MOVE.set_translation
ROUTE BOX5_SENSOR.isOver TO BOX5_HIDE_SCRIPT.isover_in
ROUTE BOX5_HIDE_SCRIPT.hide_out TO BOX5_HIDE.set_translation

DEF LOAD_NEW_WORLD Script {
  eventIn SFTime starttime_in
  eventIn SFInt32 box1_in
  eventIn SFInt32 box2_in
  eventIn SFInt32 box3_in
  eventIn SFInt32 box4_in
  eventIn SFInt32 box5_in
  eventOut SFTime starttime_out
  eventOut SFInt32 plane_choice
  eventOut SFInt32 choice_out
  eventOut SFInt32 victory_out
  url [
    "javascript:

 // field MFInt32 box_in //

 // field SFInt32 deleted //

 // field SFInt32 waitticks //

 // field SFBool victory //

 // eventOut SFTime starttime_out //

 // eventOut SFInt32 plane_choice //

 // eventOut SFInt32 choice_out //

 // eventOut SFInt32 victory_out //

   function initialize()
      {
      // insert your url at game end here 
      box_in[1]=0;
      box_in[2]=0;
      box_in[3]=0;
      box_in[4]=0;
      box_in[5]=0;
      starttime_out=0;
      plane_choice=0;
      deleted=waitticks;
      }
   function starttime_in(val)
      {
      if (!victory)      
         if (deleted>0)
            {
            if (deleted==waitticks)
               {
               starttime_out=val;
               choice_out=0;
               }
            deleted--;
            }         
         else {
            choice_out=-1;
        }
      }
   function test_end()
      {
      deleted=waitticks;
      if ((box_in[1]+box_in[2]+box_in[3]+box_in[4]+box_in[5])==5)
         {
         victory=TRUE;
         victory_out=1; 
         }
      }
   function test_plane(val)
      {
      if (plane_choice==0)
         plane_choice=1;
      else
         plane_choice=0;
      }
   function box1_in(val)
      {
      test_plane(val);
      box_in[1]=val;
      test_end();
      }
   function box2_in(val)
      {
      test_plane(val);
      box_in[2]=val;
      test_end();
      }
   function box3_in(val)
      {
      test_plane(val);
      box_in[3]=val;
      test_end();
      }
   function box4_in(val)
      {
      test_plane(val);
      box_in[4]=val;
      test_end();
      }
   function box5_in(val)
      {
      test_plane(val);
      box_in[5]=val;
      test_end();
      }   
"
    "c++:
      X3dScript_LOAD_NEW_WORLD *self = (X3dScript_LOAD_NEW_WORLD *)node;
      static bool LOAD_NEW_WORLD_init = false;
      if (!LOAD_NEW_WORLD_init) {
          self->box_in[0] = 0;
          self->box_in[1] = 0;
          self->box_in[2] = 0;
          self->box_in[3] = 0;
          self->box_in[4] = 0;
          self->starttime_out = 0;
          self->plane_choice = 0;
          self->deleted = self->waitticks;
          LOAD_NEW_WORLD_init = true;
      }         
      if (!self->victory)      
         if (self->deleted > 0)
            {
            if (self->deleted == self->waitticks)
               {
//               starttime_out=val;
               self->choice_out = 0;
               }
            self->deleted--;
            }         
         else
            self->choice_out = -1;

      if ((self->box1_in == 1) && (self->box_in[0] == 0))
          {
          self->deleted = self->waitticks;          
          self->box_in[0] = self->box1_in;
          if (self->plane_choice == 0)
              self->plane_choice = 1;
          else
              self->plane_choice = 0;
          }
      if ((self->box2_in == 1) && (self->box_in[1] == 0))
          {
          self->deleted = self->waitticks;          
          self->box_in[1] = self->box2_in;
          if (self->plane_choice == 0)
              self->plane_choice = 1;
          else
              self->plane_choice = 0;
          }
      if ((self->box3_in == 1) && (self->box_in[2] == 0))
          {
          self->deleted = self->waitticks;          
          self->box_in[2] = self->box3_in;
          if (self->plane_choice == 0)
              self->plane_choice = 1;
          else
              self->plane_choice = 0;
          }
      if ((self->box4_in == 1) && (self->box_in[3] == 0))
          {
          self->deleted = self->waitticks;          
          self->box_in[3] = self->box4_in;
          if (self->plane_choice == 0)
              self->plane_choice = 1;
          else
              self->plane_choice = 0;
          }
      if ((self->box5_in == 1) && (self->box_in[4] == 0))
          {
          self->deleted = self->waitticks;          
          self->box_in[4] = self->box5_in;
          if (self->plane_choice == 0)
              self->plane_choice = 1;
          else
              self->plane_choice = 0;
          }
      if ((self->box_in[0] + 
           self->box_in[1] + 
           self->box_in[2] + 
           self->box_in[3] +
           self->box_in[4]) == 5)
          {
          self->victory = true;
          self->victory_out = 1;
          }
"
  ]
  field MFInt32   box_in [
    0 
    0 
    0 
    0 
    0 
  ]
  field MFString   your_url ""
  field MFString   param ""
  field SFInt32   deleted 0
  field SFInt32   waitticks 300
  field SFBool   victory FALSE
}

ROUTE TIMER.time TO LOAD_NEW_WORLD.starttime_in
ROUTE BOX1_HIT_CHECK.deleted_out TO LOAD_NEW_WORLD.box1_in
ROUTE BOX2_HIT_CHECK.deleted_out TO LOAD_NEW_WORLD.box2_in
ROUTE BOX3_HIT_CHECK.deleted_out TO LOAD_NEW_WORLD.box3_in
ROUTE BOX4_HIT_CHECK.deleted_out TO LOAD_NEW_WORLD.box4_in
ROUTE BOX5_HIT_CHECK.deleted_out TO LOAD_NEW_WORLD.box5_in
ROUTE LOAD_NEW_WORLD.starttime_out TO SOUNDCLIP.set_startTime
ROUTE LOAD_NEW_WORLD.plane_choice TO ROLL_TURN.rock_and_roll_flag_in
ROUTE LOAD_NEW_WORLD.plane_choice TO PLANE_SWITCH.set_whichChoice
ROUTE LOAD_NEW_WORLD.choice_out TO Switch1.set_whichChoice
ROUTE LOAD_NEW_WORLD.victory_out TO Switch2.set_whichChoice

